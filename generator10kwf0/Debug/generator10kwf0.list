
generator10kwf0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003380  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08003440  08003440  00013440  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080034a8  080034a8  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  080034a8  080034a8  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  080034a8  080034a8  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080034a8  080034a8  000134a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080034ac  080034ac  000134ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  080034b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000198  20000004  080034b4  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000019c  080034b4  0002019c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006864  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001942  00000000  00000000  00026890  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000008b8  00000000  00000000  000281d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000007c0  00000000  00000000  00028a90  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000bd36  00000000  00000000  00029250  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000647c  00000000  00000000  00034f86  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0003dd94  00000000  00000000  0003b402  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00079196  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001f04  00000000  00000000  00079214  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000004 	.word	0x20000004
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003428 	.word	0x08003428

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000008 	.word	0x20000008
 8000104:	08003428 	.word	0x08003428

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_cdrcmple>:
 8000220:	4684      	mov	ip, r0
 8000222:	1c10      	adds	r0, r2, #0
 8000224:	4662      	mov	r2, ip
 8000226:	468c      	mov	ip, r1
 8000228:	1c19      	adds	r1, r3, #0
 800022a:	4663      	mov	r3, ip
 800022c:	e000      	b.n	8000230 <__aeabi_cdcmpeq>
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <__aeabi_cdcmpeq>:
 8000230:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000232:	f000 fb4f 	bl	80008d4 <__ledf2>
 8000236:	2800      	cmp	r0, #0
 8000238:	d401      	bmi.n	800023e <__aeabi_cdcmpeq+0xe>
 800023a:	2100      	movs	r1, #0
 800023c:	42c8      	cmn	r0, r1
 800023e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000240 <__aeabi_dcmpeq>:
 8000240:	b510      	push	{r4, lr}
 8000242:	f000 faa7 	bl	8000794 <__eqdf2>
 8000246:	4240      	negs	r0, r0
 8000248:	3001      	adds	r0, #1
 800024a:	bd10      	pop	{r4, pc}

0800024c <__aeabi_dcmplt>:
 800024c:	b510      	push	{r4, lr}
 800024e:	f000 fb41 	bl	80008d4 <__ledf2>
 8000252:	2800      	cmp	r0, #0
 8000254:	db01      	blt.n	800025a <__aeabi_dcmplt+0xe>
 8000256:	2000      	movs	r0, #0
 8000258:	bd10      	pop	{r4, pc}
 800025a:	2001      	movs	r0, #1
 800025c:	bd10      	pop	{r4, pc}
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_dcmple>:
 8000260:	b510      	push	{r4, lr}
 8000262:	f000 fb37 	bl	80008d4 <__ledf2>
 8000266:	2800      	cmp	r0, #0
 8000268:	dd01      	ble.n	800026e <__aeabi_dcmple+0xe>
 800026a:	2000      	movs	r0, #0
 800026c:	bd10      	pop	{r4, pc}
 800026e:	2001      	movs	r0, #1
 8000270:	bd10      	pop	{r4, pc}
 8000272:	46c0      	nop			; (mov r8, r8)

08000274 <__aeabi_dcmpgt>:
 8000274:	b510      	push	{r4, lr}
 8000276:	f000 fac9 	bl	800080c <__gedf2>
 800027a:	2800      	cmp	r0, #0
 800027c:	dc01      	bgt.n	8000282 <__aeabi_dcmpgt+0xe>
 800027e:	2000      	movs	r0, #0
 8000280:	bd10      	pop	{r4, pc}
 8000282:	2001      	movs	r0, #1
 8000284:	bd10      	pop	{r4, pc}
 8000286:	46c0      	nop			; (mov r8, r8)

08000288 <__aeabi_dcmpge>:
 8000288:	b510      	push	{r4, lr}
 800028a:	f000 fabf 	bl	800080c <__gedf2>
 800028e:	2800      	cmp	r0, #0
 8000290:	da01      	bge.n	8000296 <__aeabi_dcmpge+0xe>
 8000292:	2000      	movs	r0, #0
 8000294:	bd10      	pop	{r4, pc}
 8000296:	2001      	movs	r0, #1
 8000298:	bd10      	pop	{r4, pc}
 800029a:	46c0      	nop			; (mov r8, r8)

0800029c <__aeabi_cfrcmple>:
 800029c:	4684      	mov	ip, r0
 800029e:	1c08      	adds	r0, r1, #0
 80002a0:	4661      	mov	r1, ip
 80002a2:	e7ff      	b.n	80002a4 <__aeabi_cfcmpeq>

080002a4 <__aeabi_cfcmpeq>:
 80002a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80002a6:	f000 f8a9 	bl	80003fc <__lesf2>
 80002aa:	2800      	cmp	r0, #0
 80002ac:	d401      	bmi.n	80002b2 <__aeabi_cfcmpeq+0xe>
 80002ae:	2100      	movs	r1, #0
 80002b0:	42c8      	cmn	r0, r1
 80002b2:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080002b4 <__aeabi_fcmpeq>:
 80002b4:	b510      	push	{r4, lr}
 80002b6:	f000 f82b 	bl	8000310 <__eqsf2>
 80002ba:	4240      	negs	r0, r0
 80002bc:	3001      	adds	r0, #1
 80002be:	bd10      	pop	{r4, pc}

080002c0 <__aeabi_fcmplt>:
 80002c0:	b510      	push	{r4, lr}
 80002c2:	f000 f89b 	bl	80003fc <__lesf2>
 80002c6:	2800      	cmp	r0, #0
 80002c8:	db01      	blt.n	80002ce <__aeabi_fcmplt+0xe>
 80002ca:	2000      	movs	r0, #0
 80002cc:	bd10      	pop	{r4, pc}
 80002ce:	2001      	movs	r0, #1
 80002d0:	bd10      	pop	{r4, pc}
 80002d2:	46c0      	nop			; (mov r8, r8)

080002d4 <__aeabi_fcmple>:
 80002d4:	b510      	push	{r4, lr}
 80002d6:	f000 f891 	bl	80003fc <__lesf2>
 80002da:	2800      	cmp	r0, #0
 80002dc:	dd01      	ble.n	80002e2 <__aeabi_fcmple+0xe>
 80002de:	2000      	movs	r0, #0
 80002e0:	bd10      	pop	{r4, pc}
 80002e2:	2001      	movs	r0, #1
 80002e4:	bd10      	pop	{r4, pc}
 80002e6:	46c0      	nop			; (mov r8, r8)

080002e8 <__aeabi_fcmpgt>:
 80002e8:	b510      	push	{r4, lr}
 80002ea:	f000 f839 	bl	8000360 <__gesf2>
 80002ee:	2800      	cmp	r0, #0
 80002f0:	dc01      	bgt.n	80002f6 <__aeabi_fcmpgt+0xe>
 80002f2:	2000      	movs	r0, #0
 80002f4:	bd10      	pop	{r4, pc}
 80002f6:	2001      	movs	r0, #1
 80002f8:	bd10      	pop	{r4, pc}
 80002fa:	46c0      	nop			; (mov r8, r8)

080002fc <__aeabi_fcmpge>:
 80002fc:	b510      	push	{r4, lr}
 80002fe:	f000 f82f 	bl	8000360 <__gesf2>
 8000302:	2800      	cmp	r0, #0
 8000304:	da01      	bge.n	800030a <__aeabi_fcmpge+0xe>
 8000306:	2000      	movs	r0, #0
 8000308:	bd10      	pop	{r4, pc}
 800030a:	2001      	movs	r0, #1
 800030c:	bd10      	pop	{r4, pc}
 800030e:	46c0      	nop			; (mov r8, r8)

08000310 <__eqsf2>:
 8000310:	b570      	push	{r4, r5, r6, lr}
 8000312:	0042      	lsls	r2, r0, #1
 8000314:	024e      	lsls	r6, r1, #9
 8000316:	004c      	lsls	r4, r1, #1
 8000318:	0245      	lsls	r5, r0, #9
 800031a:	0a6d      	lsrs	r5, r5, #9
 800031c:	0e12      	lsrs	r2, r2, #24
 800031e:	0fc3      	lsrs	r3, r0, #31
 8000320:	0a76      	lsrs	r6, r6, #9
 8000322:	0e24      	lsrs	r4, r4, #24
 8000324:	0fc9      	lsrs	r1, r1, #31
 8000326:	2aff      	cmp	r2, #255	; 0xff
 8000328:	d00f      	beq.n	800034a <__eqsf2+0x3a>
 800032a:	2cff      	cmp	r4, #255	; 0xff
 800032c:	d011      	beq.n	8000352 <__eqsf2+0x42>
 800032e:	2001      	movs	r0, #1
 8000330:	42a2      	cmp	r2, r4
 8000332:	d000      	beq.n	8000336 <__eqsf2+0x26>
 8000334:	bd70      	pop	{r4, r5, r6, pc}
 8000336:	42b5      	cmp	r5, r6
 8000338:	d1fc      	bne.n	8000334 <__eqsf2+0x24>
 800033a:	428b      	cmp	r3, r1
 800033c:	d00d      	beq.n	800035a <__eqsf2+0x4a>
 800033e:	2a00      	cmp	r2, #0
 8000340:	d1f8      	bne.n	8000334 <__eqsf2+0x24>
 8000342:	0028      	movs	r0, r5
 8000344:	1e45      	subs	r5, r0, #1
 8000346:	41a8      	sbcs	r0, r5
 8000348:	e7f4      	b.n	8000334 <__eqsf2+0x24>
 800034a:	2001      	movs	r0, #1
 800034c:	2d00      	cmp	r5, #0
 800034e:	d1f1      	bne.n	8000334 <__eqsf2+0x24>
 8000350:	e7eb      	b.n	800032a <__eqsf2+0x1a>
 8000352:	2001      	movs	r0, #1
 8000354:	2e00      	cmp	r6, #0
 8000356:	d1ed      	bne.n	8000334 <__eqsf2+0x24>
 8000358:	e7e9      	b.n	800032e <__eqsf2+0x1e>
 800035a:	2000      	movs	r0, #0
 800035c:	e7ea      	b.n	8000334 <__eqsf2+0x24>
 800035e:	46c0      	nop			; (mov r8, r8)

08000360 <__gesf2>:
 8000360:	b570      	push	{r4, r5, r6, lr}
 8000362:	004a      	lsls	r2, r1, #1
 8000364:	024e      	lsls	r6, r1, #9
 8000366:	0245      	lsls	r5, r0, #9
 8000368:	0044      	lsls	r4, r0, #1
 800036a:	0a6d      	lsrs	r5, r5, #9
 800036c:	0e24      	lsrs	r4, r4, #24
 800036e:	0fc3      	lsrs	r3, r0, #31
 8000370:	0a76      	lsrs	r6, r6, #9
 8000372:	0e12      	lsrs	r2, r2, #24
 8000374:	0fc9      	lsrs	r1, r1, #31
 8000376:	2cff      	cmp	r4, #255	; 0xff
 8000378:	d015      	beq.n	80003a6 <__gesf2+0x46>
 800037a:	2aff      	cmp	r2, #255	; 0xff
 800037c:	d00e      	beq.n	800039c <__gesf2+0x3c>
 800037e:	2c00      	cmp	r4, #0
 8000380:	d115      	bne.n	80003ae <__gesf2+0x4e>
 8000382:	2a00      	cmp	r2, #0
 8000384:	d101      	bne.n	800038a <__gesf2+0x2a>
 8000386:	2e00      	cmp	r6, #0
 8000388:	d01c      	beq.n	80003c4 <__gesf2+0x64>
 800038a:	2d00      	cmp	r5, #0
 800038c:	d014      	beq.n	80003b8 <__gesf2+0x58>
 800038e:	428b      	cmp	r3, r1
 8000390:	d027      	beq.n	80003e2 <__gesf2+0x82>
 8000392:	2002      	movs	r0, #2
 8000394:	3b01      	subs	r3, #1
 8000396:	4018      	ands	r0, r3
 8000398:	3801      	subs	r0, #1
 800039a:	bd70      	pop	{r4, r5, r6, pc}
 800039c:	2e00      	cmp	r6, #0
 800039e:	d0ee      	beq.n	800037e <__gesf2+0x1e>
 80003a0:	2002      	movs	r0, #2
 80003a2:	4240      	negs	r0, r0
 80003a4:	e7f9      	b.n	800039a <__gesf2+0x3a>
 80003a6:	2d00      	cmp	r5, #0
 80003a8:	d1fa      	bne.n	80003a0 <__gesf2+0x40>
 80003aa:	2aff      	cmp	r2, #255	; 0xff
 80003ac:	d00e      	beq.n	80003cc <__gesf2+0x6c>
 80003ae:	2a00      	cmp	r2, #0
 80003b0:	d10e      	bne.n	80003d0 <__gesf2+0x70>
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	d0ed      	beq.n	8000392 <__gesf2+0x32>
 80003b6:	e00b      	b.n	80003d0 <__gesf2+0x70>
 80003b8:	2301      	movs	r3, #1
 80003ba:	3901      	subs	r1, #1
 80003bc:	4399      	bics	r1, r3
 80003be:	0008      	movs	r0, r1
 80003c0:	3001      	adds	r0, #1
 80003c2:	e7ea      	b.n	800039a <__gesf2+0x3a>
 80003c4:	2000      	movs	r0, #0
 80003c6:	2d00      	cmp	r5, #0
 80003c8:	d0e7      	beq.n	800039a <__gesf2+0x3a>
 80003ca:	e7e2      	b.n	8000392 <__gesf2+0x32>
 80003cc:	2e00      	cmp	r6, #0
 80003ce:	d1e7      	bne.n	80003a0 <__gesf2+0x40>
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d1de      	bne.n	8000392 <__gesf2+0x32>
 80003d4:	4294      	cmp	r4, r2
 80003d6:	dd05      	ble.n	80003e4 <__gesf2+0x84>
 80003d8:	2102      	movs	r1, #2
 80003da:	1e58      	subs	r0, r3, #1
 80003dc:	4008      	ands	r0, r1
 80003de:	3801      	subs	r0, #1
 80003e0:	e7db      	b.n	800039a <__gesf2+0x3a>
 80003e2:	2400      	movs	r4, #0
 80003e4:	42a2      	cmp	r2, r4
 80003e6:	dc04      	bgt.n	80003f2 <__gesf2+0x92>
 80003e8:	42b5      	cmp	r5, r6
 80003ea:	d8d2      	bhi.n	8000392 <__gesf2+0x32>
 80003ec:	2000      	movs	r0, #0
 80003ee:	42b5      	cmp	r5, r6
 80003f0:	d2d3      	bcs.n	800039a <__gesf2+0x3a>
 80003f2:	1e58      	subs	r0, r3, #1
 80003f4:	2301      	movs	r3, #1
 80003f6:	4398      	bics	r0, r3
 80003f8:	3001      	adds	r0, #1
 80003fa:	e7ce      	b.n	800039a <__gesf2+0x3a>

080003fc <__lesf2>:
 80003fc:	b530      	push	{r4, r5, lr}
 80003fe:	0042      	lsls	r2, r0, #1
 8000400:	0244      	lsls	r4, r0, #9
 8000402:	024d      	lsls	r5, r1, #9
 8000404:	0fc3      	lsrs	r3, r0, #31
 8000406:	0048      	lsls	r0, r1, #1
 8000408:	0a64      	lsrs	r4, r4, #9
 800040a:	0e12      	lsrs	r2, r2, #24
 800040c:	0a6d      	lsrs	r5, r5, #9
 800040e:	0e00      	lsrs	r0, r0, #24
 8000410:	0fc9      	lsrs	r1, r1, #31
 8000412:	2aff      	cmp	r2, #255	; 0xff
 8000414:	d012      	beq.n	800043c <__lesf2+0x40>
 8000416:	28ff      	cmp	r0, #255	; 0xff
 8000418:	d00c      	beq.n	8000434 <__lesf2+0x38>
 800041a:	2a00      	cmp	r2, #0
 800041c:	d112      	bne.n	8000444 <__lesf2+0x48>
 800041e:	2800      	cmp	r0, #0
 8000420:	d119      	bne.n	8000456 <__lesf2+0x5a>
 8000422:	2d00      	cmp	r5, #0
 8000424:	d117      	bne.n	8000456 <__lesf2+0x5a>
 8000426:	2c00      	cmp	r4, #0
 8000428:	d02b      	beq.n	8000482 <__lesf2+0x86>
 800042a:	2002      	movs	r0, #2
 800042c:	3b01      	subs	r3, #1
 800042e:	4018      	ands	r0, r3
 8000430:	3801      	subs	r0, #1
 8000432:	e026      	b.n	8000482 <__lesf2+0x86>
 8000434:	2d00      	cmp	r5, #0
 8000436:	d0f0      	beq.n	800041a <__lesf2+0x1e>
 8000438:	2002      	movs	r0, #2
 800043a:	e022      	b.n	8000482 <__lesf2+0x86>
 800043c:	2c00      	cmp	r4, #0
 800043e:	d1fb      	bne.n	8000438 <__lesf2+0x3c>
 8000440:	28ff      	cmp	r0, #255	; 0xff
 8000442:	d01f      	beq.n	8000484 <__lesf2+0x88>
 8000444:	2800      	cmp	r0, #0
 8000446:	d11f      	bne.n	8000488 <__lesf2+0x8c>
 8000448:	2d00      	cmp	r5, #0
 800044a:	d11d      	bne.n	8000488 <__lesf2+0x8c>
 800044c:	2002      	movs	r0, #2
 800044e:	3b01      	subs	r3, #1
 8000450:	4018      	ands	r0, r3
 8000452:	3801      	subs	r0, #1
 8000454:	e015      	b.n	8000482 <__lesf2+0x86>
 8000456:	2c00      	cmp	r4, #0
 8000458:	d00e      	beq.n	8000478 <__lesf2+0x7c>
 800045a:	428b      	cmp	r3, r1
 800045c:	d1e5      	bne.n	800042a <__lesf2+0x2e>
 800045e:	2200      	movs	r2, #0
 8000460:	4290      	cmp	r0, r2
 8000462:	dc04      	bgt.n	800046e <__lesf2+0x72>
 8000464:	42ac      	cmp	r4, r5
 8000466:	d8e0      	bhi.n	800042a <__lesf2+0x2e>
 8000468:	2000      	movs	r0, #0
 800046a:	42ac      	cmp	r4, r5
 800046c:	d209      	bcs.n	8000482 <__lesf2+0x86>
 800046e:	1e58      	subs	r0, r3, #1
 8000470:	2301      	movs	r3, #1
 8000472:	4398      	bics	r0, r3
 8000474:	3001      	adds	r0, #1
 8000476:	e004      	b.n	8000482 <__lesf2+0x86>
 8000478:	2301      	movs	r3, #1
 800047a:	3901      	subs	r1, #1
 800047c:	4399      	bics	r1, r3
 800047e:	0008      	movs	r0, r1
 8000480:	3001      	adds	r0, #1
 8000482:	bd30      	pop	{r4, r5, pc}
 8000484:	2d00      	cmp	r5, #0
 8000486:	d1d7      	bne.n	8000438 <__lesf2+0x3c>
 8000488:	428b      	cmp	r3, r1
 800048a:	d1ce      	bne.n	800042a <__lesf2+0x2e>
 800048c:	4282      	cmp	r2, r0
 800048e:	dde7      	ble.n	8000460 <__lesf2+0x64>
 8000490:	2102      	movs	r1, #2
 8000492:	1e58      	subs	r0, r3, #1
 8000494:	4008      	ands	r0, r1
 8000496:	3801      	subs	r0, #1
 8000498:	e7f3      	b.n	8000482 <__lesf2+0x86>
 800049a:	46c0      	nop			; (mov r8, r8)

0800049c <__aeabi_fmul>:
 800049c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800049e:	464e      	mov	r6, r9
 80004a0:	4657      	mov	r7, sl
 80004a2:	4645      	mov	r5, r8
 80004a4:	46de      	mov	lr, fp
 80004a6:	b5e0      	push	{r5, r6, r7, lr}
 80004a8:	0243      	lsls	r3, r0, #9
 80004aa:	0a5b      	lsrs	r3, r3, #9
 80004ac:	0045      	lsls	r5, r0, #1
 80004ae:	b083      	sub	sp, #12
 80004b0:	1c0f      	adds	r7, r1, #0
 80004b2:	4699      	mov	r9, r3
 80004b4:	0e2d      	lsrs	r5, r5, #24
 80004b6:	0fc6      	lsrs	r6, r0, #31
 80004b8:	2d00      	cmp	r5, #0
 80004ba:	d057      	beq.n	800056c <__aeabi_fmul+0xd0>
 80004bc:	2dff      	cmp	r5, #255	; 0xff
 80004be:	d024      	beq.n	800050a <__aeabi_fmul+0x6e>
 80004c0:	2080      	movs	r0, #128	; 0x80
 80004c2:	00db      	lsls	r3, r3, #3
 80004c4:	04c0      	lsls	r0, r0, #19
 80004c6:	4318      	orrs	r0, r3
 80004c8:	2300      	movs	r3, #0
 80004ca:	4681      	mov	r9, r0
 80004cc:	469a      	mov	sl, r3
 80004ce:	469b      	mov	fp, r3
 80004d0:	3d7f      	subs	r5, #127	; 0x7f
 80004d2:	027c      	lsls	r4, r7, #9
 80004d4:	007a      	lsls	r2, r7, #1
 80004d6:	0ffb      	lsrs	r3, r7, #31
 80004d8:	0a64      	lsrs	r4, r4, #9
 80004da:	0e12      	lsrs	r2, r2, #24
 80004dc:	4698      	mov	r8, r3
 80004de:	d023      	beq.n	8000528 <__aeabi_fmul+0x8c>
 80004e0:	2aff      	cmp	r2, #255	; 0xff
 80004e2:	d04b      	beq.n	800057c <__aeabi_fmul+0xe0>
 80004e4:	00e3      	lsls	r3, r4, #3
 80004e6:	2480      	movs	r4, #128	; 0x80
 80004e8:	2000      	movs	r0, #0
 80004ea:	04e4      	lsls	r4, r4, #19
 80004ec:	3a7f      	subs	r2, #127	; 0x7f
 80004ee:	431c      	orrs	r4, r3
 80004f0:	18ad      	adds	r5, r5, r2
 80004f2:	1c6b      	adds	r3, r5, #1
 80004f4:	4647      	mov	r7, r8
 80004f6:	9301      	str	r3, [sp, #4]
 80004f8:	4653      	mov	r3, sl
 80004fa:	4077      	eors	r7, r6
 80004fc:	003a      	movs	r2, r7
 80004fe:	2b0f      	cmp	r3, #15
 8000500:	d848      	bhi.n	8000594 <__aeabi_fmul+0xf8>
 8000502:	497d      	ldr	r1, [pc, #500]	; (80006f8 <__aeabi_fmul+0x25c>)
 8000504:	009b      	lsls	r3, r3, #2
 8000506:	58cb      	ldr	r3, [r1, r3]
 8000508:	469f      	mov	pc, r3
 800050a:	2b00      	cmp	r3, #0
 800050c:	d000      	beq.n	8000510 <__aeabi_fmul+0x74>
 800050e:	e085      	b.n	800061c <__aeabi_fmul+0x180>
 8000510:	3308      	adds	r3, #8
 8000512:	469a      	mov	sl, r3
 8000514:	3b06      	subs	r3, #6
 8000516:	469b      	mov	fp, r3
 8000518:	027c      	lsls	r4, r7, #9
 800051a:	007a      	lsls	r2, r7, #1
 800051c:	0ffb      	lsrs	r3, r7, #31
 800051e:	25ff      	movs	r5, #255	; 0xff
 8000520:	0a64      	lsrs	r4, r4, #9
 8000522:	0e12      	lsrs	r2, r2, #24
 8000524:	4698      	mov	r8, r3
 8000526:	d1db      	bne.n	80004e0 <__aeabi_fmul+0x44>
 8000528:	2c00      	cmp	r4, #0
 800052a:	d000      	beq.n	800052e <__aeabi_fmul+0x92>
 800052c:	e090      	b.n	8000650 <__aeabi_fmul+0x1b4>
 800052e:	4652      	mov	r2, sl
 8000530:	2301      	movs	r3, #1
 8000532:	431a      	orrs	r2, r3
 8000534:	4692      	mov	sl, r2
 8000536:	2001      	movs	r0, #1
 8000538:	e7db      	b.n	80004f2 <__aeabi_fmul+0x56>
 800053a:	464c      	mov	r4, r9
 800053c:	4658      	mov	r0, fp
 800053e:	0017      	movs	r7, r2
 8000540:	2802      	cmp	r0, #2
 8000542:	d024      	beq.n	800058e <__aeabi_fmul+0xf2>
 8000544:	2803      	cmp	r0, #3
 8000546:	d100      	bne.n	800054a <__aeabi_fmul+0xae>
 8000548:	e0cf      	b.n	80006ea <__aeabi_fmul+0x24e>
 800054a:	2200      	movs	r2, #0
 800054c:	2300      	movs	r3, #0
 800054e:	2801      	cmp	r0, #1
 8000550:	d14d      	bne.n	80005ee <__aeabi_fmul+0x152>
 8000552:	0258      	lsls	r0, r3, #9
 8000554:	05d2      	lsls	r2, r2, #23
 8000556:	0a40      	lsrs	r0, r0, #9
 8000558:	07ff      	lsls	r7, r7, #31
 800055a:	4310      	orrs	r0, r2
 800055c:	4338      	orrs	r0, r7
 800055e:	b003      	add	sp, #12
 8000560:	bc3c      	pop	{r2, r3, r4, r5}
 8000562:	4690      	mov	r8, r2
 8000564:	4699      	mov	r9, r3
 8000566:	46a2      	mov	sl, r4
 8000568:	46ab      	mov	fp, r5
 800056a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800056c:	2b00      	cmp	r3, #0
 800056e:	d15b      	bne.n	8000628 <__aeabi_fmul+0x18c>
 8000570:	2304      	movs	r3, #4
 8000572:	469a      	mov	sl, r3
 8000574:	3b03      	subs	r3, #3
 8000576:	2500      	movs	r5, #0
 8000578:	469b      	mov	fp, r3
 800057a:	e7aa      	b.n	80004d2 <__aeabi_fmul+0x36>
 800057c:	35ff      	adds	r5, #255	; 0xff
 800057e:	2c00      	cmp	r4, #0
 8000580:	d160      	bne.n	8000644 <__aeabi_fmul+0x1a8>
 8000582:	4652      	mov	r2, sl
 8000584:	2302      	movs	r3, #2
 8000586:	431a      	orrs	r2, r3
 8000588:	4692      	mov	sl, r2
 800058a:	2002      	movs	r0, #2
 800058c:	e7b1      	b.n	80004f2 <__aeabi_fmul+0x56>
 800058e:	22ff      	movs	r2, #255	; 0xff
 8000590:	2300      	movs	r3, #0
 8000592:	e7de      	b.n	8000552 <__aeabi_fmul+0xb6>
 8000594:	464b      	mov	r3, r9
 8000596:	0c1b      	lsrs	r3, r3, #16
 8000598:	469c      	mov	ip, r3
 800059a:	464b      	mov	r3, r9
 800059c:	0426      	lsls	r6, r4, #16
 800059e:	0c36      	lsrs	r6, r6, #16
 80005a0:	0418      	lsls	r0, r3, #16
 80005a2:	4661      	mov	r1, ip
 80005a4:	0033      	movs	r3, r6
 80005a6:	0c22      	lsrs	r2, r4, #16
 80005a8:	4664      	mov	r4, ip
 80005aa:	0c00      	lsrs	r0, r0, #16
 80005ac:	4343      	muls	r3, r0
 80005ae:	434e      	muls	r6, r1
 80005b0:	4350      	muls	r0, r2
 80005b2:	4354      	muls	r4, r2
 80005b4:	1980      	adds	r0, r0, r6
 80005b6:	0c1a      	lsrs	r2, r3, #16
 80005b8:	1812      	adds	r2, r2, r0
 80005ba:	4296      	cmp	r6, r2
 80005bc:	d903      	bls.n	80005c6 <__aeabi_fmul+0x12a>
 80005be:	2180      	movs	r1, #128	; 0x80
 80005c0:	0249      	lsls	r1, r1, #9
 80005c2:	468c      	mov	ip, r1
 80005c4:	4464      	add	r4, ip
 80005c6:	041b      	lsls	r3, r3, #16
 80005c8:	0c1b      	lsrs	r3, r3, #16
 80005ca:	0410      	lsls	r0, r2, #16
 80005cc:	18c0      	adds	r0, r0, r3
 80005ce:	0183      	lsls	r3, r0, #6
 80005d0:	1e5e      	subs	r6, r3, #1
 80005d2:	41b3      	sbcs	r3, r6
 80005d4:	0e80      	lsrs	r0, r0, #26
 80005d6:	4318      	orrs	r0, r3
 80005d8:	0c13      	lsrs	r3, r2, #16
 80005da:	191b      	adds	r3, r3, r4
 80005dc:	019b      	lsls	r3, r3, #6
 80005de:	4303      	orrs	r3, r0
 80005e0:	001c      	movs	r4, r3
 80005e2:	0123      	lsls	r3, r4, #4
 80005e4:	d579      	bpl.n	80006da <__aeabi_fmul+0x23e>
 80005e6:	2301      	movs	r3, #1
 80005e8:	0862      	lsrs	r2, r4, #1
 80005ea:	401c      	ands	r4, r3
 80005ec:	4314      	orrs	r4, r2
 80005ee:	9a01      	ldr	r2, [sp, #4]
 80005f0:	327f      	adds	r2, #127	; 0x7f
 80005f2:	2a00      	cmp	r2, #0
 80005f4:	dd4d      	ble.n	8000692 <__aeabi_fmul+0x1f6>
 80005f6:	0763      	lsls	r3, r4, #29
 80005f8:	d004      	beq.n	8000604 <__aeabi_fmul+0x168>
 80005fa:	230f      	movs	r3, #15
 80005fc:	4023      	ands	r3, r4
 80005fe:	2b04      	cmp	r3, #4
 8000600:	d000      	beq.n	8000604 <__aeabi_fmul+0x168>
 8000602:	3404      	adds	r4, #4
 8000604:	0123      	lsls	r3, r4, #4
 8000606:	d503      	bpl.n	8000610 <__aeabi_fmul+0x174>
 8000608:	4b3c      	ldr	r3, [pc, #240]	; (80006fc <__aeabi_fmul+0x260>)
 800060a:	9a01      	ldr	r2, [sp, #4]
 800060c:	401c      	ands	r4, r3
 800060e:	3280      	adds	r2, #128	; 0x80
 8000610:	2afe      	cmp	r2, #254	; 0xfe
 8000612:	dcbc      	bgt.n	800058e <__aeabi_fmul+0xf2>
 8000614:	01a3      	lsls	r3, r4, #6
 8000616:	0a5b      	lsrs	r3, r3, #9
 8000618:	b2d2      	uxtb	r2, r2
 800061a:	e79a      	b.n	8000552 <__aeabi_fmul+0xb6>
 800061c:	230c      	movs	r3, #12
 800061e:	469a      	mov	sl, r3
 8000620:	3b09      	subs	r3, #9
 8000622:	25ff      	movs	r5, #255	; 0xff
 8000624:	469b      	mov	fp, r3
 8000626:	e754      	b.n	80004d2 <__aeabi_fmul+0x36>
 8000628:	0018      	movs	r0, r3
 800062a:	f000 fa0d 	bl	8000a48 <__clzsi2>
 800062e:	464a      	mov	r2, r9
 8000630:	1f43      	subs	r3, r0, #5
 8000632:	2576      	movs	r5, #118	; 0x76
 8000634:	409a      	lsls	r2, r3
 8000636:	2300      	movs	r3, #0
 8000638:	426d      	negs	r5, r5
 800063a:	4691      	mov	r9, r2
 800063c:	1a2d      	subs	r5, r5, r0
 800063e:	469a      	mov	sl, r3
 8000640:	469b      	mov	fp, r3
 8000642:	e746      	b.n	80004d2 <__aeabi_fmul+0x36>
 8000644:	4652      	mov	r2, sl
 8000646:	2303      	movs	r3, #3
 8000648:	431a      	orrs	r2, r3
 800064a:	4692      	mov	sl, r2
 800064c:	2003      	movs	r0, #3
 800064e:	e750      	b.n	80004f2 <__aeabi_fmul+0x56>
 8000650:	0020      	movs	r0, r4
 8000652:	f000 f9f9 	bl	8000a48 <__clzsi2>
 8000656:	1f43      	subs	r3, r0, #5
 8000658:	1a2d      	subs	r5, r5, r0
 800065a:	409c      	lsls	r4, r3
 800065c:	3d76      	subs	r5, #118	; 0x76
 800065e:	2000      	movs	r0, #0
 8000660:	e747      	b.n	80004f2 <__aeabi_fmul+0x56>
 8000662:	2380      	movs	r3, #128	; 0x80
 8000664:	2700      	movs	r7, #0
 8000666:	03db      	lsls	r3, r3, #15
 8000668:	22ff      	movs	r2, #255	; 0xff
 800066a:	e772      	b.n	8000552 <__aeabi_fmul+0xb6>
 800066c:	4642      	mov	r2, r8
 800066e:	e766      	b.n	800053e <__aeabi_fmul+0xa2>
 8000670:	464c      	mov	r4, r9
 8000672:	0032      	movs	r2, r6
 8000674:	4658      	mov	r0, fp
 8000676:	e762      	b.n	800053e <__aeabi_fmul+0xa2>
 8000678:	2380      	movs	r3, #128	; 0x80
 800067a:	464a      	mov	r2, r9
 800067c:	03db      	lsls	r3, r3, #15
 800067e:	421a      	tst	r2, r3
 8000680:	d022      	beq.n	80006c8 <__aeabi_fmul+0x22c>
 8000682:	421c      	tst	r4, r3
 8000684:	d120      	bne.n	80006c8 <__aeabi_fmul+0x22c>
 8000686:	4323      	orrs	r3, r4
 8000688:	025b      	lsls	r3, r3, #9
 800068a:	0a5b      	lsrs	r3, r3, #9
 800068c:	4647      	mov	r7, r8
 800068e:	22ff      	movs	r2, #255	; 0xff
 8000690:	e75f      	b.n	8000552 <__aeabi_fmul+0xb6>
 8000692:	2301      	movs	r3, #1
 8000694:	1a9a      	subs	r2, r3, r2
 8000696:	2a1b      	cmp	r2, #27
 8000698:	dc21      	bgt.n	80006de <__aeabi_fmul+0x242>
 800069a:	0023      	movs	r3, r4
 800069c:	9901      	ldr	r1, [sp, #4]
 800069e:	40d3      	lsrs	r3, r2
 80006a0:	319e      	adds	r1, #158	; 0x9e
 80006a2:	408c      	lsls	r4, r1
 80006a4:	001a      	movs	r2, r3
 80006a6:	0023      	movs	r3, r4
 80006a8:	1e5c      	subs	r4, r3, #1
 80006aa:	41a3      	sbcs	r3, r4
 80006ac:	4313      	orrs	r3, r2
 80006ae:	075a      	lsls	r2, r3, #29
 80006b0:	d004      	beq.n	80006bc <__aeabi_fmul+0x220>
 80006b2:	220f      	movs	r2, #15
 80006b4:	401a      	ands	r2, r3
 80006b6:	2a04      	cmp	r2, #4
 80006b8:	d000      	beq.n	80006bc <__aeabi_fmul+0x220>
 80006ba:	3304      	adds	r3, #4
 80006bc:	015a      	lsls	r2, r3, #5
 80006be:	d411      	bmi.n	80006e4 <__aeabi_fmul+0x248>
 80006c0:	019b      	lsls	r3, r3, #6
 80006c2:	0a5b      	lsrs	r3, r3, #9
 80006c4:	2200      	movs	r2, #0
 80006c6:	e744      	b.n	8000552 <__aeabi_fmul+0xb6>
 80006c8:	2380      	movs	r3, #128	; 0x80
 80006ca:	464a      	mov	r2, r9
 80006cc:	03db      	lsls	r3, r3, #15
 80006ce:	4313      	orrs	r3, r2
 80006d0:	025b      	lsls	r3, r3, #9
 80006d2:	0a5b      	lsrs	r3, r3, #9
 80006d4:	0037      	movs	r7, r6
 80006d6:	22ff      	movs	r2, #255	; 0xff
 80006d8:	e73b      	b.n	8000552 <__aeabi_fmul+0xb6>
 80006da:	9501      	str	r5, [sp, #4]
 80006dc:	e787      	b.n	80005ee <__aeabi_fmul+0x152>
 80006de:	2200      	movs	r2, #0
 80006e0:	2300      	movs	r3, #0
 80006e2:	e736      	b.n	8000552 <__aeabi_fmul+0xb6>
 80006e4:	2201      	movs	r2, #1
 80006e6:	2300      	movs	r3, #0
 80006e8:	e733      	b.n	8000552 <__aeabi_fmul+0xb6>
 80006ea:	2380      	movs	r3, #128	; 0x80
 80006ec:	03db      	lsls	r3, r3, #15
 80006ee:	4323      	orrs	r3, r4
 80006f0:	025b      	lsls	r3, r3, #9
 80006f2:	0a5b      	lsrs	r3, r3, #9
 80006f4:	22ff      	movs	r2, #255	; 0xff
 80006f6:	e72c      	b.n	8000552 <__aeabi_fmul+0xb6>
 80006f8:	08003440 	.word	0x08003440
 80006fc:	f7ffffff 	.word	0xf7ffffff

08000700 <__aeabi_i2f>:
 8000700:	b570      	push	{r4, r5, r6, lr}
 8000702:	2800      	cmp	r0, #0
 8000704:	d03d      	beq.n	8000782 <__aeabi_i2f+0x82>
 8000706:	17c3      	asrs	r3, r0, #31
 8000708:	18c5      	adds	r5, r0, r3
 800070a:	405d      	eors	r5, r3
 800070c:	0fc4      	lsrs	r4, r0, #31
 800070e:	0028      	movs	r0, r5
 8000710:	f000 f99a 	bl	8000a48 <__clzsi2>
 8000714:	229e      	movs	r2, #158	; 0x9e
 8000716:	1a12      	subs	r2, r2, r0
 8000718:	2a96      	cmp	r2, #150	; 0x96
 800071a:	dc07      	bgt.n	800072c <__aeabi_i2f+0x2c>
 800071c:	b2d2      	uxtb	r2, r2
 800071e:	2808      	cmp	r0, #8
 8000720:	dd33      	ble.n	800078a <__aeabi_i2f+0x8a>
 8000722:	3808      	subs	r0, #8
 8000724:	4085      	lsls	r5, r0
 8000726:	0268      	lsls	r0, r5, #9
 8000728:	0a40      	lsrs	r0, r0, #9
 800072a:	e023      	b.n	8000774 <__aeabi_i2f+0x74>
 800072c:	2a99      	cmp	r2, #153	; 0x99
 800072e:	dd0b      	ble.n	8000748 <__aeabi_i2f+0x48>
 8000730:	2305      	movs	r3, #5
 8000732:	0029      	movs	r1, r5
 8000734:	1a1b      	subs	r3, r3, r0
 8000736:	40d9      	lsrs	r1, r3
 8000738:	0003      	movs	r3, r0
 800073a:	331b      	adds	r3, #27
 800073c:	409d      	lsls	r5, r3
 800073e:	002b      	movs	r3, r5
 8000740:	1e5d      	subs	r5, r3, #1
 8000742:	41ab      	sbcs	r3, r5
 8000744:	4319      	orrs	r1, r3
 8000746:	000d      	movs	r5, r1
 8000748:	2805      	cmp	r0, #5
 800074a:	dd01      	ble.n	8000750 <__aeabi_i2f+0x50>
 800074c:	1f43      	subs	r3, r0, #5
 800074e:	409d      	lsls	r5, r3
 8000750:	002b      	movs	r3, r5
 8000752:	490f      	ldr	r1, [pc, #60]	; (8000790 <__aeabi_i2f+0x90>)
 8000754:	400b      	ands	r3, r1
 8000756:	076e      	lsls	r6, r5, #29
 8000758:	d009      	beq.n	800076e <__aeabi_i2f+0x6e>
 800075a:	260f      	movs	r6, #15
 800075c:	4035      	ands	r5, r6
 800075e:	2d04      	cmp	r5, #4
 8000760:	d005      	beq.n	800076e <__aeabi_i2f+0x6e>
 8000762:	3304      	adds	r3, #4
 8000764:	015d      	lsls	r5, r3, #5
 8000766:	d502      	bpl.n	800076e <__aeabi_i2f+0x6e>
 8000768:	229f      	movs	r2, #159	; 0x9f
 800076a:	400b      	ands	r3, r1
 800076c:	1a12      	subs	r2, r2, r0
 800076e:	019b      	lsls	r3, r3, #6
 8000770:	0a58      	lsrs	r0, r3, #9
 8000772:	b2d2      	uxtb	r2, r2
 8000774:	0240      	lsls	r0, r0, #9
 8000776:	05d2      	lsls	r2, r2, #23
 8000778:	0a40      	lsrs	r0, r0, #9
 800077a:	07e4      	lsls	r4, r4, #31
 800077c:	4310      	orrs	r0, r2
 800077e:	4320      	orrs	r0, r4
 8000780:	bd70      	pop	{r4, r5, r6, pc}
 8000782:	2400      	movs	r4, #0
 8000784:	2200      	movs	r2, #0
 8000786:	2000      	movs	r0, #0
 8000788:	e7f4      	b.n	8000774 <__aeabi_i2f+0x74>
 800078a:	0268      	lsls	r0, r5, #9
 800078c:	0a40      	lsrs	r0, r0, #9
 800078e:	e7f1      	b.n	8000774 <__aeabi_i2f+0x74>
 8000790:	fbffffff 	.word	0xfbffffff

08000794 <__eqdf2>:
 8000794:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000796:	464f      	mov	r7, r9
 8000798:	4646      	mov	r6, r8
 800079a:	46d6      	mov	lr, sl
 800079c:	4684      	mov	ip, r0
 800079e:	b5c0      	push	{r6, r7, lr}
 80007a0:	4680      	mov	r8, r0
 80007a2:	4e19      	ldr	r6, [pc, #100]	; (8000808 <__eqdf2+0x74>)
 80007a4:	0318      	lsls	r0, r3, #12
 80007a6:	030f      	lsls	r7, r1, #12
 80007a8:	004d      	lsls	r5, r1, #1
 80007aa:	0b00      	lsrs	r0, r0, #12
 80007ac:	005c      	lsls	r4, r3, #1
 80007ae:	4682      	mov	sl, r0
 80007b0:	0b3f      	lsrs	r7, r7, #12
 80007b2:	0d6d      	lsrs	r5, r5, #21
 80007b4:	0fc9      	lsrs	r1, r1, #31
 80007b6:	4691      	mov	r9, r2
 80007b8:	0d64      	lsrs	r4, r4, #21
 80007ba:	0fdb      	lsrs	r3, r3, #31
 80007bc:	2001      	movs	r0, #1
 80007be:	42b5      	cmp	r5, r6
 80007c0:	d00a      	beq.n	80007d8 <__eqdf2+0x44>
 80007c2:	42b4      	cmp	r4, r6
 80007c4:	d003      	beq.n	80007ce <__eqdf2+0x3a>
 80007c6:	42a5      	cmp	r5, r4
 80007c8:	d101      	bne.n	80007ce <__eqdf2+0x3a>
 80007ca:	4557      	cmp	r7, sl
 80007cc:	d00c      	beq.n	80007e8 <__eqdf2+0x54>
 80007ce:	bc1c      	pop	{r2, r3, r4}
 80007d0:	4690      	mov	r8, r2
 80007d2:	4699      	mov	r9, r3
 80007d4:	46a2      	mov	sl, r4
 80007d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007d8:	4666      	mov	r6, ip
 80007da:	433e      	orrs	r6, r7
 80007dc:	d1f7      	bne.n	80007ce <__eqdf2+0x3a>
 80007de:	42ac      	cmp	r4, r5
 80007e0:	d1f5      	bne.n	80007ce <__eqdf2+0x3a>
 80007e2:	4654      	mov	r4, sl
 80007e4:	4314      	orrs	r4, r2
 80007e6:	d1f2      	bne.n	80007ce <__eqdf2+0x3a>
 80007e8:	2001      	movs	r0, #1
 80007ea:	45c8      	cmp	r8, r9
 80007ec:	d1ef      	bne.n	80007ce <__eqdf2+0x3a>
 80007ee:	4299      	cmp	r1, r3
 80007f0:	d007      	beq.n	8000802 <__eqdf2+0x6e>
 80007f2:	2d00      	cmp	r5, #0
 80007f4:	d1eb      	bne.n	80007ce <__eqdf2+0x3a>
 80007f6:	4663      	mov	r3, ip
 80007f8:	431f      	orrs	r7, r3
 80007fa:	0038      	movs	r0, r7
 80007fc:	1e47      	subs	r7, r0, #1
 80007fe:	41b8      	sbcs	r0, r7
 8000800:	e7e5      	b.n	80007ce <__eqdf2+0x3a>
 8000802:	2000      	movs	r0, #0
 8000804:	e7e3      	b.n	80007ce <__eqdf2+0x3a>
 8000806:	46c0      	nop			; (mov r8, r8)
 8000808:	000007ff 	.word	0x000007ff

0800080c <__gedf2>:
 800080c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800080e:	464f      	mov	r7, r9
 8000810:	4646      	mov	r6, r8
 8000812:	46d6      	mov	lr, sl
 8000814:	004d      	lsls	r5, r1, #1
 8000816:	b5c0      	push	{r6, r7, lr}
 8000818:	030e      	lsls	r6, r1, #12
 800081a:	0fc9      	lsrs	r1, r1, #31
 800081c:	468a      	mov	sl, r1
 800081e:	492c      	ldr	r1, [pc, #176]	; (80008d0 <__gedf2+0xc4>)
 8000820:	031f      	lsls	r7, r3, #12
 8000822:	005c      	lsls	r4, r3, #1
 8000824:	4680      	mov	r8, r0
 8000826:	0b36      	lsrs	r6, r6, #12
 8000828:	0d6d      	lsrs	r5, r5, #21
 800082a:	4691      	mov	r9, r2
 800082c:	0b3f      	lsrs	r7, r7, #12
 800082e:	0d64      	lsrs	r4, r4, #21
 8000830:	0fdb      	lsrs	r3, r3, #31
 8000832:	428d      	cmp	r5, r1
 8000834:	d01e      	beq.n	8000874 <__gedf2+0x68>
 8000836:	428c      	cmp	r4, r1
 8000838:	d016      	beq.n	8000868 <__gedf2+0x5c>
 800083a:	2d00      	cmp	r5, #0
 800083c:	d11e      	bne.n	800087c <__gedf2+0x70>
 800083e:	4330      	orrs	r0, r6
 8000840:	4684      	mov	ip, r0
 8000842:	2c00      	cmp	r4, #0
 8000844:	d101      	bne.n	800084a <__gedf2+0x3e>
 8000846:	433a      	orrs	r2, r7
 8000848:	d023      	beq.n	8000892 <__gedf2+0x86>
 800084a:	4662      	mov	r2, ip
 800084c:	2a00      	cmp	r2, #0
 800084e:	d01a      	beq.n	8000886 <__gedf2+0x7a>
 8000850:	459a      	cmp	sl, r3
 8000852:	d029      	beq.n	80008a8 <__gedf2+0x9c>
 8000854:	4651      	mov	r1, sl
 8000856:	2002      	movs	r0, #2
 8000858:	3901      	subs	r1, #1
 800085a:	4008      	ands	r0, r1
 800085c:	3801      	subs	r0, #1
 800085e:	bc1c      	pop	{r2, r3, r4}
 8000860:	4690      	mov	r8, r2
 8000862:	4699      	mov	r9, r3
 8000864:	46a2      	mov	sl, r4
 8000866:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000868:	0039      	movs	r1, r7
 800086a:	4311      	orrs	r1, r2
 800086c:	d0e5      	beq.n	800083a <__gedf2+0x2e>
 800086e:	2002      	movs	r0, #2
 8000870:	4240      	negs	r0, r0
 8000872:	e7f4      	b.n	800085e <__gedf2+0x52>
 8000874:	4330      	orrs	r0, r6
 8000876:	d1fa      	bne.n	800086e <__gedf2+0x62>
 8000878:	42ac      	cmp	r4, r5
 800087a:	d00f      	beq.n	800089c <__gedf2+0x90>
 800087c:	2c00      	cmp	r4, #0
 800087e:	d10f      	bne.n	80008a0 <__gedf2+0x94>
 8000880:	433a      	orrs	r2, r7
 8000882:	d0e7      	beq.n	8000854 <__gedf2+0x48>
 8000884:	e00c      	b.n	80008a0 <__gedf2+0x94>
 8000886:	2201      	movs	r2, #1
 8000888:	3b01      	subs	r3, #1
 800088a:	4393      	bics	r3, r2
 800088c:	0018      	movs	r0, r3
 800088e:	3001      	adds	r0, #1
 8000890:	e7e5      	b.n	800085e <__gedf2+0x52>
 8000892:	4663      	mov	r3, ip
 8000894:	2000      	movs	r0, #0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d0e1      	beq.n	800085e <__gedf2+0x52>
 800089a:	e7db      	b.n	8000854 <__gedf2+0x48>
 800089c:	433a      	orrs	r2, r7
 800089e:	d1e6      	bne.n	800086e <__gedf2+0x62>
 80008a0:	459a      	cmp	sl, r3
 80008a2:	d1d7      	bne.n	8000854 <__gedf2+0x48>
 80008a4:	42a5      	cmp	r5, r4
 80008a6:	dcd5      	bgt.n	8000854 <__gedf2+0x48>
 80008a8:	42a5      	cmp	r5, r4
 80008aa:	db05      	blt.n	80008b8 <__gedf2+0xac>
 80008ac:	42be      	cmp	r6, r7
 80008ae:	d8d1      	bhi.n	8000854 <__gedf2+0x48>
 80008b0:	d008      	beq.n	80008c4 <__gedf2+0xb8>
 80008b2:	2000      	movs	r0, #0
 80008b4:	42be      	cmp	r6, r7
 80008b6:	d2d2      	bcs.n	800085e <__gedf2+0x52>
 80008b8:	4650      	mov	r0, sl
 80008ba:	2301      	movs	r3, #1
 80008bc:	3801      	subs	r0, #1
 80008be:	4398      	bics	r0, r3
 80008c0:	3001      	adds	r0, #1
 80008c2:	e7cc      	b.n	800085e <__gedf2+0x52>
 80008c4:	45c8      	cmp	r8, r9
 80008c6:	d8c5      	bhi.n	8000854 <__gedf2+0x48>
 80008c8:	2000      	movs	r0, #0
 80008ca:	45c8      	cmp	r8, r9
 80008cc:	d3f4      	bcc.n	80008b8 <__gedf2+0xac>
 80008ce:	e7c6      	b.n	800085e <__gedf2+0x52>
 80008d0:	000007ff 	.word	0x000007ff

080008d4 <__ledf2>:
 80008d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008d6:	464f      	mov	r7, r9
 80008d8:	4646      	mov	r6, r8
 80008da:	46d6      	mov	lr, sl
 80008dc:	004d      	lsls	r5, r1, #1
 80008de:	b5c0      	push	{r6, r7, lr}
 80008e0:	030e      	lsls	r6, r1, #12
 80008e2:	0fc9      	lsrs	r1, r1, #31
 80008e4:	468a      	mov	sl, r1
 80008e6:	492e      	ldr	r1, [pc, #184]	; (80009a0 <__ledf2+0xcc>)
 80008e8:	031f      	lsls	r7, r3, #12
 80008ea:	005c      	lsls	r4, r3, #1
 80008ec:	4680      	mov	r8, r0
 80008ee:	0b36      	lsrs	r6, r6, #12
 80008f0:	0d6d      	lsrs	r5, r5, #21
 80008f2:	4691      	mov	r9, r2
 80008f4:	0b3f      	lsrs	r7, r7, #12
 80008f6:	0d64      	lsrs	r4, r4, #21
 80008f8:	0fdb      	lsrs	r3, r3, #31
 80008fa:	428d      	cmp	r5, r1
 80008fc:	d018      	beq.n	8000930 <__ledf2+0x5c>
 80008fe:	428c      	cmp	r4, r1
 8000900:	d011      	beq.n	8000926 <__ledf2+0x52>
 8000902:	2d00      	cmp	r5, #0
 8000904:	d118      	bne.n	8000938 <__ledf2+0x64>
 8000906:	4330      	orrs	r0, r6
 8000908:	4684      	mov	ip, r0
 800090a:	2c00      	cmp	r4, #0
 800090c:	d11e      	bne.n	800094c <__ledf2+0x78>
 800090e:	433a      	orrs	r2, r7
 8000910:	d11c      	bne.n	800094c <__ledf2+0x78>
 8000912:	4663      	mov	r3, ip
 8000914:	2000      	movs	r0, #0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d030      	beq.n	800097c <__ledf2+0xa8>
 800091a:	4651      	mov	r1, sl
 800091c:	2002      	movs	r0, #2
 800091e:	3901      	subs	r1, #1
 8000920:	4008      	ands	r0, r1
 8000922:	3801      	subs	r0, #1
 8000924:	e02a      	b.n	800097c <__ledf2+0xa8>
 8000926:	0039      	movs	r1, r7
 8000928:	4311      	orrs	r1, r2
 800092a:	d0ea      	beq.n	8000902 <__ledf2+0x2e>
 800092c:	2002      	movs	r0, #2
 800092e:	e025      	b.n	800097c <__ledf2+0xa8>
 8000930:	4330      	orrs	r0, r6
 8000932:	d1fb      	bne.n	800092c <__ledf2+0x58>
 8000934:	42ac      	cmp	r4, r5
 8000936:	d026      	beq.n	8000986 <__ledf2+0xb2>
 8000938:	2c00      	cmp	r4, #0
 800093a:	d126      	bne.n	800098a <__ledf2+0xb6>
 800093c:	433a      	orrs	r2, r7
 800093e:	d124      	bne.n	800098a <__ledf2+0xb6>
 8000940:	4651      	mov	r1, sl
 8000942:	2002      	movs	r0, #2
 8000944:	3901      	subs	r1, #1
 8000946:	4008      	ands	r0, r1
 8000948:	3801      	subs	r0, #1
 800094a:	e017      	b.n	800097c <__ledf2+0xa8>
 800094c:	4662      	mov	r2, ip
 800094e:	2a00      	cmp	r2, #0
 8000950:	d00f      	beq.n	8000972 <__ledf2+0x9e>
 8000952:	459a      	cmp	sl, r3
 8000954:	d1e1      	bne.n	800091a <__ledf2+0x46>
 8000956:	42a5      	cmp	r5, r4
 8000958:	db05      	blt.n	8000966 <__ledf2+0x92>
 800095a:	42be      	cmp	r6, r7
 800095c:	d8dd      	bhi.n	800091a <__ledf2+0x46>
 800095e:	d019      	beq.n	8000994 <__ledf2+0xc0>
 8000960:	2000      	movs	r0, #0
 8000962:	42be      	cmp	r6, r7
 8000964:	d20a      	bcs.n	800097c <__ledf2+0xa8>
 8000966:	4650      	mov	r0, sl
 8000968:	2301      	movs	r3, #1
 800096a:	3801      	subs	r0, #1
 800096c:	4398      	bics	r0, r3
 800096e:	3001      	adds	r0, #1
 8000970:	e004      	b.n	800097c <__ledf2+0xa8>
 8000972:	2201      	movs	r2, #1
 8000974:	3b01      	subs	r3, #1
 8000976:	4393      	bics	r3, r2
 8000978:	0018      	movs	r0, r3
 800097a:	3001      	adds	r0, #1
 800097c:	bc1c      	pop	{r2, r3, r4}
 800097e:	4690      	mov	r8, r2
 8000980:	4699      	mov	r9, r3
 8000982:	46a2      	mov	sl, r4
 8000984:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000986:	433a      	orrs	r2, r7
 8000988:	d1d0      	bne.n	800092c <__ledf2+0x58>
 800098a:	459a      	cmp	sl, r3
 800098c:	d1c5      	bne.n	800091a <__ledf2+0x46>
 800098e:	42a5      	cmp	r5, r4
 8000990:	dcc3      	bgt.n	800091a <__ledf2+0x46>
 8000992:	e7e0      	b.n	8000956 <__ledf2+0x82>
 8000994:	45c8      	cmp	r8, r9
 8000996:	d8c0      	bhi.n	800091a <__ledf2+0x46>
 8000998:	2000      	movs	r0, #0
 800099a:	45c8      	cmp	r8, r9
 800099c:	d3e3      	bcc.n	8000966 <__ledf2+0x92>
 800099e:	e7ed      	b.n	800097c <__ledf2+0xa8>
 80009a0:	000007ff 	.word	0x000007ff

080009a4 <__aeabi_f2d>:
 80009a4:	0041      	lsls	r1, r0, #1
 80009a6:	0e09      	lsrs	r1, r1, #24
 80009a8:	1c4b      	adds	r3, r1, #1
 80009aa:	b570      	push	{r4, r5, r6, lr}
 80009ac:	b2db      	uxtb	r3, r3
 80009ae:	0246      	lsls	r6, r0, #9
 80009b0:	0a75      	lsrs	r5, r6, #9
 80009b2:	0fc4      	lsrs	r4, r0, #31
 80009b4:	2b01      	cmp	r3, #1
 80009b6:	dd14      	ble.n	80009e2 <__aeabi_f2d+0x3e>
 80009b8:	23e0      	movs	r3, #224	; 0xe0
 80009ba:	009b      	lsls	r3, r3, #2
 80009bc:	076d      	lsls	r5, r5, #29
 80009be:	0b36      	lsrs	r6, r6, #12
 80009c0:	18cb      	adds	r3, r1, r3
 80009c2:	2100      	movs	r1, #0
 80009c4:	0d0a      	lsrs	r2, r1, #20
 80009c6:	0028      	movs	r0, r5
 80009c8:	0512      	lsls	r2, r2, #20
 80009ca:	4d1c      	ldr	r5, [pc, #112]	; (8000a3c <__aeabi_f2d+0x98>)
 80009cc:	4332      	orrs	r2, r6
 80009ce:	055b      	lsls	r3, r3, #21
 80009d0:	402a      	ands	r2, r5
 80009d2:	085b      	lsrs	r3, r3, #1
 80009d4:	4313      	orrs	r3, r2
 80009d6:	005b      	lsls	r3, r3, #1
 80009d8:	07e4      	lsls	r4, r4, #31
 80009da:	085b      	lsrs	r3, r3, #1
 80009dc:	4323      	orrs	r3, r4
 80009de:	0019      	movs	r1, r3
 80009e0:	bd70      	pop	{r4, r5, r6, pc}
 80009e2:	2900      	cmp	r1, #0
 80009e4:	d114      	bne.n	8000a10 <__aeabi_f2d+0x6c>
 80009e6:	2d00      	cmp	r5, #0
 80009e8:	d01e      	beq.n	8000a28 <__aeabi_f2d+0x84>
 80009ea:	0028      	movs	r0, r5
 80009ec:	f000 f82c 	bl	8000a48 <__clzsi2>
 80009f0:	280a      	cmp	r0, #10
 80009f2:	dc1c      	bgt.n	8000a2e <__aeabi_f2d+0x8a>
 80009f4:	230b      	movs	r3, #11
 80009f6:	002a      	movs	r2, r5
 80009f8:	1a1b      	subs	r3, r3, r0
 80009fa:	40da      	lsrs	r2, r3
 80009fc:	0003      	movs	r3, r0
 80009fe:	3315      	adds	r3, #21
 8000a00:	409d      	lsls	r5, r3
 8000a02:	4b0f      	ldr	r3, [pc, #60]	; (8000a40 <__aeabi_f2d+0x9c>)
 8000a04:	0312      	lsls	r2, r2, #12
 8000a06:	1a1b      	subs	r3, r3, r0
 8000a08:	055b      	lsls	r3, r3, #21
 8000a0a:	0b16      	lsrs	r6, r2, #12
 8000a0c:	0d5b      	lsrs	r3, r3, #21
 8000a0e:	e7d8      	b.n	80009c2 <__aeabi_f2d+0x1e>
 8000a10:	2d00      	cmp	r5, #0
 8000a12:	d006      	beq.n	8000a22 <__aeabi_f2d+0x7e>
 8000a14:	0b32      	lsrs	r2, r6, #12
 8000a16:	2680      	movs	r6, #128	; 0x80
 8000a18:	0336      	lsls	r6, r6, #12
 8000a1a:	076d      	lsls	r5, r5, #29
 8000a1c:	4316      	orrs	r6, r2
 8000a1e:	4b09      	ldr	r3, [pc, #36]	; (8000a44 <__aeabi_f2d+0xa0>)
 8000a20:	e7cf      	b.n	80009c2 <__aeabi_f2d+0x1e>
 8000a22:	4b08      	ldr	r3, [pc, #32]	; (8000a44 <__aeabi_f2d+0xa0>)
 8000a24:	2600      	movs	r6, #0
 8000a26:	e7cc      	b.n	80009c2 <__aeabi_f2d+0x1e>
 8000a28:	2300      	movs	r3, #0
 8000a2a:	2600      	movs	r6, #0
 8000a2c:	e7c9      	b.n	80009c2 <__aeabi_f2d+0x1e>
 8000a2e:	0003      	movs	r3, r0
 8000a30:	002a      	movs	r2, r5
 8000a32:	3b0b      	subs	r3, #11
 8000a34:	409a      	lsls	r2, r3
 8000a36:	2500      	movs	r5, #0
 8000a38:	e7e3      	b.n	8000a02 <__aeabi_f2d+0x5e>
 8000a3a:	46c0      	nop			; (mov r8, r8)
 8000a3c:	800fffff 	.word	0x800fffff
 8000a40:	00000389 	.word	0x00000389
 8000a44:	000007ff 	.word	0x000007ff

08000a48 <__clzsi2>:
 8000a48:	211c      	movs	r1, #28
 8000a4a:	2301      	movs	r3, #1
 8000a4c:	041b      	lsls	r3, r3, #16
 8000a4e:	4298      	cmp	r0, r3
 8000a50:	d301      	bcc.n	8000a56 <__clzsi2+0xe>
 8000a52:	0c00      	lsrs	r0, r0, #16
 8000a54:	3910      	subs	r1, #16
 8000a56:	0a1b      	lsrs	r3, r3, #8
 8000a58:	4298      	cmp	r0, r3
 8000a5a:	d301      	bcc.n	8000a60 <__clzsi2+0x18>
 8000a5c:	0a00      	lsrs	r0, r0, #8
 8000a5e:	3908      	subs	r1, #8
 8000a60:	091b      	lsrs	r3, r3, #4
 8000a62:	4298      	cmp	r0, r3
 8000a64:	d301      	bcc.n	8000a6a <__clzsi2+0x22>
 8000a66:	0900      	lsrs	r0, r0, #4
 8000a68:	3904      	subs	r1, #4
 8000a6a:	a202      	add	r2, pc, #8	; (adr r2, 8000a74 <__clzsi2+0x2c>)
 8000a6c:	5c10      	ldrb	r0, [r2, r0]
 8000a6e:	1840      	adds	r0, r0, r1
 8000a70:	4770      	bx	lr
 8000a72:	46c0      	nop			; (mov r8, r8)
 8000a74:	02020304 	.word	0x02020304
 8000a78:	01010101 	.word	0x01010101
	...

08000a84 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_71CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_239CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTime)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b082      	sub	sp, #8
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
 8000a8c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR, ADC_SMPR_SMP, SamplingTime);
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	695b      	ldr	r3, [r3, #20]
 8000a92:	2207      	movs	r2, #7
 8000a94:	4393      	bics	r3, r2
 8000a96:	001a      	movs	r2, r3
 8000a98:	683b      	ldr	r3, [r7, #0]
 8000a9a:	431a      	orrs	r2, r3
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	615a      	str	r2, [r3, #20]
}
 8000aa0:	46c0      	nop			; (mov r8, r8)
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	b002      	add	sp, #8
 8000aa6:	bd80      	pop	{r7, pc}

08000aa8 <LL_ADC_REG_SetSequencerScanDirection>:
  *         @arg @ref LL_ADC_REG_SEQ_SCAN_DIR_FORWARD
  *         @arg @ref LL_ADC_REG_SEQ_SCAN_DIR_BACKWARD
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerScanDirection(ADC_TypeDef *ADCx, uint32_t ScanDirection)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b082      	sub	sp, #8
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
 8000ab0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_SCANDIR, ScanDirection);
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	68db      	ldr	r3, [r3, #12]
 8000ab6:	2204      	movs	r2, #4
 8000ab8:	4393      	bics	r3, r2
 8000aba:	001a      	movs	r2, r3
 8000abc:	683b      	ldr	r3, [r7, #0]
 8000abe:	431a      	orrs	r2, r3
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	60da      	str	r2, [r3, #12]
}
 8000ac4:	46c0      	nop			; (mov r8, r8)
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	b002      	add	sp, #8
 8000aca:	bd80      	pop	{r7, pc}

08000acc <LL_ADC_REG_SetSequencerChAdd>:
  *         
  *         (1) On STM32F0, parameter not available on all devices: all devices except STM32F030x6, STM32F030x8, STM32F030xC, STM32F070x6, STM32F070xB.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b082      	sub	sp, #8
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
 8000ad4:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	035b      	lsls	r3, r3, #13
 8000ade:	0b5b      	lsrs	r3, r3, #13
 8000ae0:	431a      	orrs	r2, r3
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000ae6:	46c0      	nop			; (mov r8, r8)
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	b002      	add	sp, #8
 8000aec:	bd80      	pop	{r7, pc}
	...

08000af0 <LL_DMA_SetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Direction)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b084      	sub	sp, #16
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	60f8      	str	r0, [r7, #12]
 8000af8:	60b9      	str	r1, [r7, #8]
 8000afa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8000afc:	68bb      	ldr	r3, [r7, #8]
 8000afe:	3b01      	subs	r3, #1
 8000b00:	4a0b      	ldr	r2, [pc, #44]	; (8000b30 <LL_DMA_SetDataTransferDirection+0x40>)
 8000b02:	5cd3      	ldrb	r3, [r2, r3]
 8000b04:	001a      	movs	r2, r3
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	18d3      	adds	r3, r2, r3
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	4a09      	ldr	r2, [pc, #36]	; (8000b34 <LL_DMA_SetDataTransferDirection+0x44>)
 8000b0e:	4013      	ands	r3, r2
 8000b10:	0019      	movs	r1, r3
 8000b12:	68bb      	ldr	r3, [r7, #8]
 8000b14:	3b01      	subs	r3, #1
 8000b16:	4a06      	ldr	r2, [pc, #24]	; (8000b30 <LL_DMA_SetDataTransferDirection+0x40>)
 8000b18:	5cd3      	ldrb	r3, [r2, r3]
 8000b1a:	001a      	movs	r2, r3
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	18d3      	adds	r3, r2, r3
 8000b20:	687a      	ldr	r2, [r7, #4]
 8000b22:	430a      	orrs	r2, r1
 8000b24:	601a      	str	r2, [r3, #0]
             DMA_CCR_DIR | DMA_CCR_MEM2MEM, Direction);
}
 8000b26:	46c0      	nop			; (mov r8, r8)
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	b004      	add	sp, #16
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	46c0      	nop			; (mov r8, r8)
 8000b30:	08003480 	.word	0x08003480
 8000b34:	ffffbfef 	.word	0xffffbfef

08000b38 <LL_DMA_SetMode>:
  *         @arg @ref LL_DMA_MODE_NORMAL
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Mode)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b084      	sub	sp, #16
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	60f8      	str	r0, [r7, #12]
 8000b40:	60b9      	str	r1, [r7, #8]
 8000b42:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 8000b44:	68bb      	ldr	r3, [r7, #8]
 8000b46:	3b01      	subs	r3, #1
 8000b48:	4a0b      	ldr	r2, [pc, #44]	; (8000b78 <LL_DMA_SetMode+0x40>)
 8000b4a:	5cd3      	ldrb	r3, [r2, r3]
 8000b4c:	001a      	movs	r2, r3
 8000b4e:	68fb      	ldr	r3, [r7, #12]
 8000b50:	18d3      	adds	r3, r2, r3
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	2220      	movs	r2, #32
 8000b56:	4393      	bics	r3, r2
 8000b58:	0019      	movs	r1, r3
 8000b5a:	68bb      	ldr	r3, [r7, #8]
 8000b5c:	3b01      	subs	r3, #1
 8000b5e:	4a06      	ldr	r2, [pc, #24]	; (8000b78 <LL_DMA_SetMode+0x40>)
 8000b60:	5cd3      	ldrb	r3, [r2, r3]
 8000b62:	001a      	movs	r2, r3
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	18d3      	adds	r3, r2, r3
 8000b68:	687a      	ldr	r2, [r7, #4]
 8000b6a:	430a      	orrs	r2, r1
 8000b6c:	601a      	str	r2, [r3, #0]
             Mode);
}
 8000b6e:	46c0      	nop			; (mov r8, r8)
 8000b70:	46bd      	mov	sp, r7
 8000b72:	b004      	add	sp, #16
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	46c0      	nop			; (mov r8, r8)
 8000b78:	08003480 	.word	0x08003480

08000b7c <LL_DMA_SetPeriphIncMode>:
  *         @arg @ref LL_DMA_PERIPH_INCREMENT
  *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcIncMode)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b084      	sub	sp, #16
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	60f8      	str	r0, [r7, #12]
 8000b84:	60b9      	str	r1, [r7, #8]
 8000b86:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 8000b88:	68bb      	ldr	r3, [r7, #8]
 8000b8a:	3b01      	subs	r3, #1
 8000b8c:	4a0b      	ldr	r2, [pc, #44]	; (8000bbc <LL_DMA_SetPeriphIncMode+0x40>)
 8000b8e:	5cd3      	ldrb	r3, [r2, r3]
 8000b90:	001a      	movs	r2, r3
 8000b92:	68fb      	ldr	r3, [r7, #12]
 8000b94:	18d3      	adds	r3, r2, r3
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	2240      	movs	r2, #64	; 0x40
 8000b9a:	4393      	bics	r3, r2
 8000b9c:	0019      	movs	r1, r3
 8000b9e:	68bb      	ldr	r3, [r7, #8]
 8000ba0:	3b01      	subs	r3, #1
 8000ba2:	4a06      	ldr	r2, [pc, #24]	; (8000bbc <LL_DMA_SetPeriphIncMode+0x40>)
 8000ba4:	5cd3      	ldrb	r3, [r2, r3]
 8000ba6:	001a      	movs	r2, r3
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	18d3      	adds	r3, r2, r3
 8000bac:	687a      	ldr	r2, [r7, #4]
 8000bae:	430a      	orrs	r2, r1
 8000bb0:	601a      	str	r2, [r3, #0]
             PeriphOrM2MSrcIncMode);
}
 8000bb2:	46c0      	nop			; (mov r8, r8)
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	b004      	add	sp, #16
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	46c0      	nop			; (mov r8, r8)
 8000bbc:	08003480 	.word	0x08003480

08000bc0 <LL_DMA_SetMemoryIncMode>:
  *         @arg @ref LL_DMA_MEMORY_INCREMENT
  *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstIncMode)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b084      	sub	sp, #16
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	60f8      	str	r0, [r7, #12]
 8000bc8:	60b9      	str	r1, [r7, #8]
 8000bca:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 8000bcc:	68bb      	ldr	r3, [r7, #8]
 8000bce:	3b01      	subs	r3, #1
 8000bd0:	4a0b      	ldr	r2, [pc, #44]	; (8000c00 <LL_DMA_SetMemoryIncMode+0x40>)
 8000bd2:	5cd3      	ldrb	r3, [r2, r3]
 8000bd4:	001a      	movs	r2, r3
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	18d3      	adds	r3, r2, r3
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	2280      	movs	r2, #128	; 0x80
 8000bde:	4393      	bics	r3, r2
 8000be0:	0019      	movs	r1, r3
 8000be2:	68bb      	ldr	r3, [r7, #8]
 8000be4:	3b01      	subs	r3, #1
 8000be6:	4a06      	ldr	r2, [pc, #24]	; (8000c00 <LL_DMA_SetMemoryIncMode+0x40>)
 8000be8:	5cd3      	ldrb	r3, [r2, r3]
 8000bea:	001a      	movs	r2, r3
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	18d3      	adds	r3, r2, r3
 8000bf0:	687a      	ldr	r2, [r7, #4]
 8000bf2:	430a      	orrs	r2, r1
 8000bf4:	601a      	str	r2, [r3, #0]
             MemoryOrM2MDstIncMode);
}
 8000bf6:	46c0      	nop			; (mov r8, r8)
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	b004      	add	sp, #16
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	46c0      	nop			; (mov r8, r8)
 8000c00:	08003480 	.word	0x08003480

08000c04 <LL_DMA_SetPeriphSize>:
  *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_PDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphSize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcDataSize)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b084      	sub	sp, #16
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	60f8      	str	r0, [r7, #12]
 8000c0c:	60b9      	str	r1, [r7, #8]
 8000c0e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 8000c10:	68bb      	ldr	r3, [r7, #8]
 8000c12:	3b01      	subs	r3, #1
 8000c14:	4a0b      	ldr	r2, [pc, #44]	; (8000c44 <LL_DMA_SetPeriphSize+0x40>)
 8000c16:	5cd3      	ldrb	r3, [r2, r3]
 8000c18:	001a      	movs	r2, r3
 8000c1a:	68fb      	ldr	r3, [r7, #12]
 8000c1c:	18d3      	adds	r3, r2, r3
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	4a09      	ldr	r2, [pc, #36]	; (8000c48 <LL_DMA_SetPeriphSize+0x44>)
 8000c22:	4013      	ands	r3, r2
 8000c24:	0019      	movs	r1, r3
 8000c26:	68bb      	ldr	r3, [r7, #8]
 8000c28:	3b01      	subs	r3, #1
 8000c2a:	4a06      	ldr	r2, [pc, #24]	; (8000c44 <LL_DMA_SetPeriphSize+0x40>)
 8000c2c:	5cd3      	ldrb	r3, [r2, r3]
 8000c2e:	001a      	movs	r2, r3
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	18d3      	adds	r3, r2, r3
 8000c34:	687a      	ldr	r2, [r7, #4]
 8000c36:	430a      	orrs	r2, r1
 8000c38:	601a      	str	r2, [r3, #0]
             PeriphOrM2MSrcDataSize);
}
 8000c3a:	46c0      	nop			; (mov r8, r8)
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	b004      	add	sp, #16
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	46c0      	nop			; (mov r8, r8)
 8000c44:	08003480 	.word	0x08003480
 8000c48:	fffffcff 	.word	0xfffffcff

08000c4c <LL_DMA_SetMemorySize>:
  *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_MDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemorySize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstDataSize)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b084      	sub	sp, #16
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	60f8      	str	r0, [r7, #12]
 8000c54:	60b9      	str	r1, [r7, #8]
 8000c56:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 8000c58:	68bb      	ldr	r3, [r7, #8]
 8000c5a:	3b01      	subs	r3, #1
 8000c5c:	4a0b      	ldr	r2, [pc, #44]	; (8000c8c <LL_DMA_SetMemorySize+0x40>)
 8000c5e:	5cd3      	ldrb	r3, [r2, r3]
 8000c60:	001a      	movs	r2, r3
 8000c62:	68fb      	ldr	r3, [r7, #12]
 8000c64:	18d3      	adds	r3, r2, r3
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	4a09      	ldr	r2, [pc, #36]	; (8000c90 <LL_DMA_SetMemorySize+0x44>)
 8000c6a:	4013      	ands	r3, r2
 8000c6c:	0019      	movs	r1, r3
 8000c6e:	68bb      	ldr	r3, [r7, #8]
 8000c70:	3b01      	subs	r3, #1
 8000c72:	4a06      	ldr	r2, [pc, #24]	; (8000c8c <LL_DMA_SetMemorySize+0x40>)
 8000c74:	5cd3      	ldrb	r3, [r2, r3]
 8000c76:	001a      	movs	r2, r3
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	18d3      	adds	r3, r2, r3
 8000c7c:	687a      	ldr	r2, [r7, #4]
 8000c7e:	430a      	orrs	r2, r1
 8000c80:	601a      	str	r2, [r3, #0]
             MemoryOrM2MDstDataSize);
}
 8000c82:	46c0      	nop			; (mov r8, r8)
 8000c84:	46bd      	mov	sp, r7
 8000c86:	b004      	add	sp, #16
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	46c0      	nop			; (mov r8, r8)
 8000c8c:	08003480 	.word	0x08003480
 8000c90:	fffff3ff 	.word	0xfffff3ff

08000c94 <LL_DMA_SetChannelPriorityLevel>:
  *         @arg @ref LL_DMA_PRIORITY_HIGH
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelPriorityLevel(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Priority)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b084      	sub	sp, #16
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	60f8      	str	r0, [r7, #12]
 8000c9c:	60b9      	str	r1, [r7, #8]
 8000c9e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 8000ca0:	68bb      	ldr	r3, [r7, #8]
 8000ca2:	3b01      	subs	r3, #1
 8000ca4:	4a0b      	ldr	r2, [pc, #44]	; (8000cd4 <LL_DMA_SetChannelPriorityLevel+0x40>)
 8000ca6:	5cd3      	ldrb	r3, [r2, r3]
 8000ca8:	001a      	movs	r2, r3
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	18d3      	adds	r3, r2, r3
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	4a09      	ldr	r2, [pc, #36]	; (8000cd8 <LL_DMA_SetChannelPriorityLevel+0x44>)
 8000cb2:	4013      	ands	r3, r2
 8000cb4:	0019      	movs	r1, r3
 8000cb6:	68bb      	ldr	r3, [r7, #8]
 8000cb8:	3b01      	subs	r3, #1
 8000cba:	4a06      	ldr	r2, [pc, #24]	; (8000cd4 <LL_DMA_SetChannelPriorityLevel+0x40>)
 8000cbc:	5cd3      	ldrb	r3, [r2, r3]
 8000cbe:	001a      	movs	r2, r3
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	18d3      	adds	r3, r2, r3
 8000cc4:	687a      	ldr	r2, [r7, #4]
 8000cc6:	430a      	orrs	r2, r1
 8000cc8:	601a      	str	r2, [r3, #0]
             Priority);
}
 8000cca:	46c0      	nop			; (mov r8, r8)
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	b004      	add	sp, #16
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	46c0      	nop			; (mov r8, r8)
 8000cd4:	08003480 	.word	0x08003480
 8000cd8:	ffffcfff 	.word	0xffffcfff

08000cdc <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b084      	sub	sp, #16
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8000ce4:	4b07      	ldr	r3, [pc, #28]	; (8000d04 <LL_AHB1_GRP1_EnableClock+0x28>)
 8000ce6:	6959      	ldr	r1, [r3, #20]
 8000ce8:	4b06      	ldr	r3, [pc, #24]	; (8000d04 <LL_AHB1_GRP1_EnableClock+0x28>)
 8000cea:	687a      	ldr	r2, [r7, #4]
 8000cec:	430a      	orrs	r2, r1
 8000cee:	615a      	str	r2, [r3, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000cf0:	4b04      	ldr	r3, [pc, #16]	; (8000d04 <LL_AHB1_GRP1_EnableClock+0x28>)
 8000cf2:	695b      	ldr	r3, [r3, #20]
 8000cf4:	687a      	ldr	r2, [r7, #4]
 8000cf6:	4013      	ands	r3, r2
 8000cf8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000cfa:	68fb      	ldr	r3, [r7, #12]
}
 8000cfc:	46c0      	nop			; (mov r8, r8)
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	b004      	add	sp, #16
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	40021000 	.word	0x40021000

08000d08 <LL_APB1_GRP2_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b084      	sub	sp, #16
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <LL_APB1_GRP2_EnableClock+0x28>)
 8000d12:	6999      	ldr	r1, [r3, #24]
 8000d14:	4b06      	ldr	r3, [pc, #24]	; (8000d30 <LL_APB1_GRP2_EnableClock+0x28>)
 8000d16:	687a      	ldr	r2, [r7, #4]
 8000d18:	430a      	orrs	r2, r1
 8000d1a:	619a      	str	r2, [r3, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000d1c:	4b04      	ldr	r3, [pc, #16]	; (8000d30 <LL_APB1_GRP2_EnableClock+0x28>)
 8000d1e:	699b      	ldr	r3, [r3, #24]
 8000d20:	687a      	ldr	r2, [r7, #4]
 8000d22:	4013      	ands	r3, r2
 8000d24:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000d26:	68fb      	ldr	r3, [r7, #12]
}
 8000d28:	46c0      	nop			; (mov r8, r8)
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	b004      	add	sp, #16
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	40021000 	.word	0x40021000

08000d34 <MX_ADC_Init>:
/* USER CODE BEGIN 0 */
/* USER CODE END 0 */

/* ADC init function */
void MX_ADC_Init(void)
{
 8000d34:	b5b0      	push	{r4, r5, r7, lr}
 8000d36:	b090      	sub	sp, #64	; 0x40
 8000d38:	af00      	add	r7, sp, #0
  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 8000d3a:	2530      	movs	r5, #48	; 0x30
 8000d3c:	197b      	adds	r3, r7, r5
 8000d3e:	0018      	movs	r0, r3
 8000d40:	2310      	movs	r3, #16
 8000d42:	001a      	movs	r2, r3
 8000d44:	2100      	movs	r1, #0
 8000d46:	f002 fb67 	bl	8003418 <memset>
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8000d4a:	241c      	movs	r4, #28
 8000d4c:	193b      	adds	r3, r7, r4
 8000d4e:	0018      	movs	r0, r3
 8000d50:	2314      	movs	r3, #20
 8000d52:	001a      	movs	r2, r3
 8000d54:	2100      	movs	r1, #0
 8000d56:	f002 fb5f 	bl	8003418 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d5a:	1d3b      	adds	r3, r7, #4
 8000d5c:	0018      	movs	r0, r3
 8000d5e:	2318      	movs	r3, #24
 8000d60:	001a      	movs	r2, r3
 8000d62:	2100      	movs	r1, #0
 8000d64:	f002 fb58 	bl	8003418 <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_ADC1);
 8000d68:	2380      	movs	r3, #128	; 0x80
 8000d6a:	009b      	lsls	r3, r3, #2
 8000d6c:	0018      	movs	r0, r3
 8000d6e:	f7ff ffcb 	bl	8000d08 <LL_APB1_GRP2_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000d72:	2380      	movs	r3, #128	; 0x80
 8000d74:	029b      	lsls	r3, r3, #10
 8000d76:	0018      	movs	r0, r3
 8000d78:	f7ff ffb0 	bl	8000cdc <LL_AHB1_GRP1_EnableClock>
  /**ADC GPIO Configuration
  PA2   ------> ADC_IN2
  PA3   ------> ADC_IN3
  PA4   ------> ADC_IN4
  */
  GPIO_InitStruct.Pin = ac_sample_Pin;
 8000d7c:	1d3b      	adds	r3, r7, #4
 8000d7e:	2204      	movs	r2, #4
 8000d80:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000d82:	1d3b      	adds	r3, r7, #4
 8000d84:	2203      	movs	r2, #3
 8000d86:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000d88:	1d3b      	adds	r3, r7, #4
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(ac_sample_GPIO_Port, &GPIO_InitStruct);
 8000d8e:	1d3a      	adds	r2, r7, #4
 8000d90:	2390      	movs	r3, #144	; 0x90
 8000d92:	05db      	lsls	r3, r3, #23
 8000d94:	0011      	movs	r1, r2
 8000d96:	0018      	movs	r0, r3
 8000d98:	f001 ff9d 	bl	8002cd6 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 8000d9c:	1d3b      	adds	r3, r7, #4
 8000d9e:	2208      	movs	r2, #8
 8000da0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000da2:	1d3b      	adds	r3, r7, #4
 8000da4:	2203      	movs	r2, #3
 8000da6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000da8:	1d3b      	adds	r3, r7, #4
 8000daa:	2200      	movs	r2, #0
 8000dac:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dae:	1d3a      	adds	r2, r7, #4
 8000db0:	2390      	movs	r3, #144	; 0x90
 8000db2:	05db      	lsls	r3, r3, #23
 8000db4:	0011      	movs	r1, r2
 8000db6:	0018      	movs	r0, r3
 8000db8:	f001 ff8d 	bl	8002cd6 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = bat_adc_Pin;
 8000dbc:	1d3b      	adds	r3, r7, #4
 8000dbe:	2210      	movs	r2, #16
 8000dc0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000dc2:	1d3b      	adds	r3, r7, #4
 8000dc4:	2203      	movs	r2, #3
 8000dc6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000dc8:	1d3b      	adds	r3, r7, #4
 8000dca:	2200      	movs	r2, #0
 8000dcc:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(bat_adc_GPIO_Port, &GPIO_InitStruct);
 8000dce:	1d3a      	adds	r2, r7, #4
 8000dd0:	2390      	movs	r3, #144	; 0x90
 8000dd2:	05db      	lsls	r3, r3, #23
 8000dd4:	0011      	movs	r1, r2
 8000dd6:	0018      	movs	r0, r3
 8000dd8:	f001 ff7d 	bl	8002cd6 <LL_GPIO_Init>

  /* ADC DMA Init */

  /* ADC Init */
  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_1, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8000ddc:	4b3a      	ldr	r3, [pc, #232]	; (8000ec8 <MX_ADC_Init+0x194>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	2101      	movs	r1, #1
 8000de2:	0018      	movs	r0, r3
 8000de4:	f7ff fe84 	bl	8000af0 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PRIORITY_HIGH);
 8000de8:	2380      	movs	r3, #128	; 0x80
 8000dea:	019b      	lsls	r3, r3, #6
 8000dec:	4836      	ldr	r0, [pc, #216]	; (8000ec8 <MX_ADC_Init+0x194>)
 8000dee:	001a      	movs	r2, r3
 8000df0:	2101      	movs	r1, #1
 8000df2:	f7ff ff4f 	bl	8000c94 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MODE_CIRCULAR);
 8000df6:	4b34      	ldr	r3, [pc, #208]	; (8000ec8 <MX_ADC_Init+0x194>)
 8000df8:	2220      	movs	r2, #32
 8000dfa:	2101      	movs	r1, #1
 8000dfc:	0018      	movs	r0, r3
 8000dfe:	f7ff fe9b 	bl	8000b38 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PERIPH_NOINCREMENT);
 8000e02:	4b31      	ldr	r3, [pc, #196]	; (8000ec8 <MX_ADC_Init+0x194>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	2101      	movs	r1, #1
 8000e08:	0018      	movs	r0, r3
 8000e0a:	f7ff feb7 	bl	8000b7c <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MEMORY_INCREMENT);
 8000e0e:	4b2e      	ldr	r3, [pc, #184]	; (8000ec8 <MX_ADC_Init+0x194>)
 8000e10:	2280      	movs	r2, #128	; 0x80
 8000e12:	2101      	movs	r1, #1
 8000e14:	0018      	movs	r0, r3
 8000e16:	f7ff fed3 	bl	8000bc0 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PDATAALIGN_HALFWORD);
 8000e1a:	2380      	movs	r3, #128	; 0x80
 8000e1c:	005b      	lsls	r3, r3, #1
 8000e1e:	482a      	ldr	r0, [pc, #168]	; (8000ec8 <MX_ADC_Init+0x194>)
 8000e20:	001a      	movs	r2, r3
 8000e22:	2101      	movs	r1, #1
 8000e24:	f7ff feee 	bl	8000c04 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MDATAALIGN_HALFWORD);
 8000e28:	2380      	movs	r3, #128	; 0x80
 8000e2a:	00db      	lsls	r3, r3, #3
 8000e2c:	4826      	ldr	r0, [pc, #152]	; (8000ec8 <MX_ADC_Init+0x194>)
 8000e2e:	001a      	movs	r2, r3
 8000e30:	2101      	movs	r1, #1
 8000e32:	f7ff ff0b 	bl	8000c4c <LL_DMA_SetMemorySize>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerChAdd(ADC1, LL_ADC_CHANNEL_2);
 8000e36:	4a25      	ldr	r2, [pc, #148]	; (8000ecc <MX_ADC_Init+0x198>)
 8000e38:	4b25      	ldr	r3, [pc, #148]	; (8000ed0 <MX_ADC_Init+0x19c>)
 8000e3a:	0011      	movs	r1, r2
 8000e3c:	0018      	movs	r0, r3
 8000e3e:	f7ff fe45 	bl	8000acc <LL_ADC_REG_SetSequencerChAdd>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerChAdd(ADC1, LL_ADC_CHANNEL_3);
 8000e42:	4a24      	ldr	r2, [pc, #144]	; (8000ed4 <MX_ADC_Init+0x1a0>)
 8000e44:	4b22      	ldr	r3, [pc, #136]	; (8000ed0 <MX_ADC_Init+0x19c>)
 8000e46:	0011      	movs	r1, r2
 8000e48:	0018      	movs	r0, r3
 8000e4a:	f7ff fe3f 	bl	8000acc <LL_ADC_REG_SetSequencerChAdd>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerChAdd(ADC1, LL_ADC_CHANNEL_4);
 8000e4e:	4a22      	ldr	r2, [pc, #136]	; (8000ed8 <MX_ADC_Init+0x1a4>)
 8000e50:	4b1f      	ldr	r3, [pc, #124]	; (8000ed0 <MX_ADC_Init+0x19c>)
 8000e52:	0011      	movs	r1, r2
 8000e54:	0018      	movs	r0, r3
 8000e56:	f7ff fe39 	bl	8000acc <LL_ADC_REG_SetSequencerChAdd>
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  ADC_InitStruct.Clock = LL_ADC_CLOCK_ASYNC;
 8000e5a:	0029      	movs	r1, r5
 8000e5c:	187b      	adds	r3, r7, r1
 8000e5e:	2200      	movs	r2, #0
 8000e60:	601a      	str	r2, [r3, #0]
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 8000e62:	187b      	adds	r3, r7, r1
 8000e64:	2200      	movs	r2, #0
 8000e66:	605a      	str	r2, [r3, #4]
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8000e68:	187b      	adds	r3, r7, r1
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	609a      	str	r2, [r3, #8]
  ADC_InitStruct.LowPowerMode = LL_ADC_LP_MODE_NONE;
 8000e6e:	187b      	adds	r3, r7, r1
 8000e70:	2200      	movs	r2, #0
 8000e72:	60da      	str	r2, [r3, #12]
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 8000e74:	187b      	adds	r3, r7, r1
 8000e76:	4a16      	ldr	r2, [pc, #88]	; (8000ed0 <MX_ADC_Init+0x19c>)
 8000e78:	0019      	movs	r1, r3
 8000e7a:	0010      	movs	r0, r2
 8000e7c:	f001 fcf8 	bl	8002870 <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 8000e80:	193b      	adds	r3, r7, r4
 8000e82:	2200      	movs	r2, #0
 8000e84:	601a      	str	r2, [r3, #0]
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 8000e86:	193b      	adds	r3, r7, r4
 8000e88:	2200      	movs	r2, #0
 8000e8a:	605a      	str	r2, [r3, #4]
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_CONTINUOUS;
 8000e8c:	193b      	adds	r3, r7, r4
 8000e8e:	2280      	movs	r2, #128	; 0x80
 8000e90:	0192      	lsls	r2, r2, #6
 8000e92:	609a      	str	r2, [r3, #8]
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_UNLIMITED;
 8000e94:	193b      	adds	r3, r7, r4
 8000e96:	2203      	movs	r2, #3
 8000e98:	60da      	str	r2, [r3, #12]
  ADC_REG_InitStruct.Overrun = LL_ADC_REG_OVR_DATA_PRESERVED;
 8000e9a:	193b      	adds	r3, r7, r4
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	611a      	str	r2, [r3, #16]
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 8000ea0:	193b      	adds	r3, r7, r4
 8000ea2:	4a0b      	ldr	r2, [pc, #44]	; (8000ed0 <MX_ADC_Init+0x19c>)
 8000ea4:	0019      	movs	r1, r3
 8000ea6:	0010      	movs	r0, r2
 8000ea8:	f001 fd18 	bl	80028dc <LL_ADC_REG_Init>
  LL_ADC_REG_SetSequencerScanDirection(ADC1, LL_ADC_REG_SEQ_SCAN_DIR_BACKWARD);
 8000eac:	4b08      	ldr	r3, [pc, #32]	; (8000ed0 <MX_ADC_Init+0x19c>)
 8000eae:	2104      	movs	r1, #4
 8000eb0:	0018      	movs	r0, r3
 8000eb2:	f7ff fdf9 	bl	8000aa8 <LL_ADC_REG_SetSequencerScanDirection>
  LL_ADC_SetSamplingTimeCommonChannels(ADC1, LL_ADC_SAMPLINGTIME_239CYCLES_5);
 8000eb6:	4b06      	ldr	r3, [pc, #24]	; (8000ed0 <MX_ADC_Init+0x19c>)
 8000eb8:	2107      	movs	r1, #7
 8000eba:	0018      	movs	r0, r3
 8000ebc:	f7ff fde2 	bl	8000a84 <LL_ADC_SetSamplingTimeCommonChannels>

}
 8000ec0:	46c0      	nop			; (mov r8, r8)
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	b010      	add	sp, #64	; 0x40
 8000ec6:	bdb0      	pop	{r4, r5, r7, pc}
 8000ec8:	40020000 	.word	0x40020000
 8000ecc:	08000004 	.word	0x08000004
 8000ed0:	40012400 	.word	0x40012400
 8000ed4:	0c000008 	.word	0x0c000008
 8000ed8:	10000010 	.word	0x10000010

08000edc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	0002      	movs	r2, r0
 8000ee4:	1dfb      	adds	r3, r7, #7
 8000ee6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000ee8:	1dfb      	adds	r3, r7, #7
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	2b7f      	cmp	r3, #127	; 0x7f
 8000eee:	d809      	bhi.n	8000f04 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ef0:	1dfb      	adds	r3, r7, #7
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	001a      	movs	r2, r3
 8000ef6:	231f      	movs	r3, #31
 8000ef8:	401a      	ands	r2, r3
 8000efa:	4b04      	ldr	r3, [pc, #16]	; (8000f0c <__NVIC_EnableIRQ+0x30>)
 8000efc:	2101      	movs	r1, #1
 8000efe:	4091      	lsls	r1, r2
 8000f00:	000a      	movs	r2, r1
 8000f02:	601a      	str	r2, [r3, #0]
  }
}
 8000f04:	46c0      	nop			; (mov r8, r8)
 8000f06:	46bd      	mov	sp, r7
 8000f08:	b002      	add	sp, #8
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	e000e100 	.word	0xe000e100

08000f10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f10:	b590      	push	{r4, r7, lr}
 8000f12:	b083      	sub	sp, #12
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	0002      	movs	r2, r0
 8000f18:	6039      	str	r1, [r7, #0]
 8000f1a:	1dfb      	adds	r3, r7, #7
 8000f1c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000f1e:	1dfb      	adds	r3, r7, #7
 8000f20:	781b      	ldrb	r3, [r3, #0]
 8000f22:	2b7f      	cmp	r3, #127	; 0x7f
 8000f24:	d828      	bhi.n	8000f78 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f26:	4a2f      	ldr	r2, [pc, #188]	; (8000fe4 <__NVIC_SetPriority+0xd4>)
 8000f28:	1dfb      	adds	r3, r7, #7
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	b25b      	sxtb	r3, r3
 8000f2e:	089b      	lsrs	r3, r3, #2
 8000f30:	33c0      	adds	r3, #192	; 0xc0
 8000f32:	009b      	lsls	r3, r3, #2
 8000f34:	589b      	ldr	r3, [r3, r2]
 8000f36:	1dfa      	adds	r2, r7, #7
 8000f38:	7812      	ldrb	r2, [r2, #0]
 8000f3a:	0011      	movs	r1, r2
 8000f3c:	2203      	movs	r2, #3
 8000f3e:	400a      	ands	r2, r1
 8000f40:	00d2      	lsls	r2, r2, #3
 8000f42:	21ff      	movs	r1, #255	; 0xff
 8000f44:	4091      	lsls	r1, r2
 8000f46:	000a      	movs	r2, r1
 8000f48:	43d2      	mvns	r2, r2
 8000f4a:	401a      	ands	r2, r3
 8000f4c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	019b      	lsls	r3, r3, #6
 8000f52:	22ff      	movs	r2, #255	; 0xff
 8000f54:	401a      	ands	r2, r3
 8000f56:	1dfb      	adds	r3, r7, #7
 8000f58:	781b      	ldrb	r3, [r3, #0]
 8000f5a:	0018      	movs	r0, r3
 8000f5c:	2303      	movs	r3, #3
 8000f5e:	4003      	ands	r3, r0
 8000f60:	00db      	lsls	r3, r3, #3
 8000f62:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f64:	481f      	ldr	r0, [pc, #124]	; (8000fe4 <__NVIC_SetPriority+0xd4>)
 8000f66:	1dfb      	adds	r3, r7, #7
 8000f68:	781b      	ldrb	r3, [r3, #0]
 8000f6a:	b25b      	sxtb	r3, r3
 8000f6c:	089b      	lsrs	r3, r3, #2
 8000f6e:	430a      	orrs	r2, r1
 8000f70:	33c0      	adds	r3, #192	; 0xc0
 8000f72:	009b      	lsls	r3, r3, #2
 8000f74:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000f76:	e031      	b.n	8000fdc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f78:	4a1b      	ldr	r2, [pc, #108]	; (8000fe8 <__NVIC_SetPriority+0xd8>)
 8000f7a:	1dfb      	adds	r3, r7, #7
 8000f7c:	781b      	ldrb	r3, [r3, #0]
 8000f7e:	0019      	movs	r1, r3
 8000f80:	230f      	movs	r3, #15
 8000f82:	400b      	ands	r3, r1
 8000f84:	3b08      	subs	r3, #8
 8000f86:	089b      	lsrs	r3, r3, #2
 8000f88:	3306      	adds	r3, #6
 8000f8a:	009b      	lsls	r3, r3, #2
 8000f8c:	18d3      	adds	r3, r2, r3
 8000f8e:	3304      	adds	r3, #4
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	1dfa      	adds	r2, r7, #7
 8000f94:	7812      	ldrb	r2, [r2, #0]
 8000f96:	0011      	movs	r1, r2
 8000f98:	2203      	movs	r2, #3
 8000f9a:	400a      	ands	r2, r1
 8000f9c:	00d2      	lsls	r2, r2, #3
 8000f9e:	21ff      	movs	r1, #255	; 0xff
 8000fa0:	4091      	lsls	r1, r2
 8000fa2:	000a      	movs	r2, r1
 8000fa4:	43d2      	mvns	r2, r2
 8000fa6:	401a      	ands	r2, r3
 8000fa8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	019b      	lsls	r3, r3, #6
 8000fae:	22ff      	movs	r2, #255	; 0xff
 8000fb0:	401a      	ands	r2, r3
 8000fb2:	1dfb      	adds	r3, r7, #7
 8000fb4:	781b      	ldrb	r3, [r3, #0]
 8000fb6:	0018      	movs	r0, r3
 8000fb8:	2303      	movs	r3, #3
 8000fba:	4003      	ands	r3, r0
 8000fbc:	00db      	lsls	r3, r3, #3
 8000fbe:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000fc0:	4809      	ldr	r0, [pc, #36]	; (8000fe8 <__NVIC_SetPriority+0xd8>)
 8000fc2:	1dfb      	adds	r3, r7, #7
 8000fc4:	781b      	ldrb	r3, [r3, #0]
 8000fc6:	001c      	movs	r4, r3
 8000fc8:	230f      	movs	r3, #15
 8000fca:	4023      	ands	r3, r4
 8000fcc:	3b08      	subs	r3, #8
 8000fce:	089b      	lsrs	r3, r3, #2
 8000fd0:	430a      	orrs	r2, r1
 8000fd2:	3306      	adds	r3, #6
 8000fd4:	009b      	lsls	r3, r3, #2
 8000fd6:	18c3      	adds	r3, r0, r3
 8000fd8:	3304      	adds	r3, #4
 8000fda:	601a      	str	r2, [r3, #0]
}
 8000fdc:	46c0      	nop			; (mov r8, r8)
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	b003      	add	sp, #12
 8000fe2:	bd90      	pop	{r4, r7, pc}
 8000fe4:	e000e100 	.word	0xe000e100
 8000fe8:	e000ed00 	.word	0xe000ed00

08000fec <LL_AHB1_GRP1_EnableClock>:
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b084      	sub	sp, #16
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8000ff4:	4b07      	ldr	r3, [pc, #28]	; (8001014 <LL_AHB1_GRP1_EnableClock+0x28>)
 8000ff6:	6959      	ldr	r1, [r3, #20]
 8000ff8:	4b06      	ldr	r3, [pc, #24]	; (8001014 <LL_AHB1_GRP1_EnableClock+0x28>)
 8000ffa:	687a      	ldr	r2, [r7, #4]
 8000ffc:	430a      	orrs	r2, r1
 8000ffe:	615a      	str	r2, [r3, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8001000:	4b04      	ldr	r3, [pc, #16]	; (8001014 <LL_AHB1_GRP1_EnableClock+0x28>)
 8001002:	695b      	ldr	r3, [r3, #20]
 8001004:	687a      	ldr	r2, [r7, #4]
 8001006:	4013      	ands	r3, r2
 8001008:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800100a:	68fb      	ldr	r3, [r7, #12]
}
 800100c:	46c0      	nop			; (mov r8, r8)
 800100e:	46bd      	mov	sp, r7
 8001010:	b004      	add	sp, #16
 8001012:	bd80      	pop	{r7, pc}
 8001014:	40021000 	.word	0x40021000

08001018 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0

  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 800101c:	2001      	movs	r0, #1
 800101e:	f7ff ffe5 	bl	8000fec <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel1_IRQn, 0);
 8001022:	2100      	movs	r1, #0
 8001024:	2009      	movs	r0, #9
 8001026:	f7ff ff73 	bl	8000f10 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800102a:	2009      	movs	r0, #9
 800102c:	f7ff ff56 	bl	8000edc <__NVIC_EnableIRQ>

}
 8001030:	46c0      	nop			; (mov r8, r8)
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
	...

08001038 <LL_AHB1_GRP1_EnableClock>:
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b084      	sub	sp, #16
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8001040:	4b07      	ldr	r3, [pc, #28]	; (8001060 <LL_AHB1_GRP1_EnableClock+0x28>)
 8001042:	6959      	ldr	r1, [r3, #20]
 8001044:	4b06      	ldr	r3, [pc, #24]	; (8001060 <LL_AHB1_GRP1_EnableClock+0x28>)
 8001046:	687a      	ldr	r2, [r7, #4]
 8001048:	430a      	orrs	r2, r1
 800104a:	615a      	str	r2, [r3, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 800104c:	4b04      	ldr	r3, [pc, #16]	; (8001060 <LL_AHB1_GRP1_EnableClock+0x28>)
 800104e:	695b      	ldr	r3, [r3, #20]
 8001050:	687a      	ldr	r2, [r7, #4]
 8001052:	4013      	ands	r3, r2
 8001054:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001056:	68fb      	ldr	r3, [r7, #12]
}
 8001058:	46c0      	nop			; (mov r8, r8)
 800105a:	46bd      	mov	sp, r7
 800105c:	b004      	add	sp, #16
 800105e:	bd80      	pop	{r7, pc}
 8001060:	40021000 	.word	0x40021000

08001064 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8001064:	b590      	push	{r4, r7, lr}
 8001066:	b083      	sub	sp, #12
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
 800106c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], SYSCFG_EXTICR1_EXTI0 << (Line >> 16), Port << (Line >> 16));
 800106e:	4a0f      	ldr	r2, [pc, #60]	; (80010ac <LL_SYSCFG_SetEXTISource+0x48>)
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	21ff      	movs	r1, #255	; 0xff
 8001074:	400b      	ands	r3, r1
 8001076:	3302      	adds	r3, #2
 8001078:	009b      	lsls	r3, r3, #2
 800107a:	589b      	ldr	r3, [r3, r2]
 800107c:	683a      	ldr	r2, [r7, #0]
 800107e:	0c12      	lsrs	r2, r2, #16
 8001080:	210f      	movs	r1, #15
 8001082:	4091      	lsls	r1, r2
 8001084:	000a      	movs	r2, r1
 8001086:	43d2      	mvns	r2, r2
 8001088:	401a      	ands	r2, r3
 800108a:	0011      	movs	r1, r2
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	0c1b      	lsrs	r3, r3, #16
 8001090:	687a      	ldr	r2, [r7, #4]
 8001092:	409a      	lsls	r2, r3
 8001094:	4805      	ldr	r0, [pc, #20]	; (80010ac <LL_SYSCFG_SetEXTISource+0x48>)
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	24ff      	movs	r4, #255	; 0xff
 800109a:	4023      	ands	r3, r4
 800109c:	430a      	orrs	r2, r1
 800109e:	3302      	adds	r3, #2
 80010a0:	009b      	lsls	r3, r3, #2
 80010a2:	501a      	str	r2, [r3, r0]
}
 80010a4:	46c0      	nop			; (mov r8, r8)
 80010a6:	46bd      	mov	sp, r7
 80010a8:	b003      	add	sp, #12
 80010aa:	bd90      	pop	{r4, r7, pc}
 80010ac:	40010000 	.word	0x40010000

080010b0 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b084      	sub	sp, #16
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	60f8      	str	r0, [r7, #12]
 80010b8:	60b9      	str	r1, [r7, #8]
 80010ba:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODER0), ((Pin * Pin) * Mode));
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	6819      	ldr	r1, [r3, #0]
 80010c0:	68bb      	ldr	r3, [r7, #8]
 80010c2:	68ba      	ldr	r2, [r7, #8]
 80010c4:	435a      	muls	r2, r3
 80010c6:	0013      	movs	r3, r2
 80010c8:	005b      	lsls	r3, r3, #1
 80010ca:	189b      	adds	r3, r3, r2
 80010cc:	43db      	mvns	r3, r3
 80010ce:	400b      	ands	r3, r1
 80010d0:	001a      	movs	r2, r3
 80010d2:	68bb      	ldr	r3, [r7, #8]
 80010d4:	68b9      	ldr	r1, [r7, #8]
 80010d6:	434b      	muls	r3, r1
 80010d8:	6879      	ldr	r1, [r7, #4]
 80010da:	434b      	muls	r3, r1
 80010dc:	431a      	orrs	r2, r3
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	601a      	str	r2, [r3, #0]
}
 80010e2:	46c0      	nop			; (mov r8, r8)
 80010e4:	46bd      	mov	sp, r7
 80010e6:	b004      	add	sp, #16
 80010e8:	bd80      	pop	{r7, pc}

080010ea <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 80010ea:	b580      	push	{r7, lr}
 80010ec:	b084      	sub	sp, #16
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	60f8      	str	r0, [r7, #12]
 80010f2:	60b9      	str	r1, [r7, #8]
 80010f4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPDR0), ((Pin * Pin) * Pull));
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	68d9      	ldr	r1, [r3, #12]
 80010fa:	68bb      	ldr	r3, [r7, #8]
 80010fc:	68ba      	ldr	r2, [r7, #8]
 80010fe:	435a      	muls	r2, r3
 8001100:	0013      	movs	r3, r2
 8001102:	005b      	lsls	r3, r3, #1
 8001104:	189b      	adds	r3, r3, r2
 8001106:	43db      	mvns	r3, r3
 8001108:	400b      	ands	r3, r1
 800110a:	001a      	movs	r2, r3
 800110c:	68bb      	ldr	r3, [r7, #8]
 800110e:	68b9      	ldr	r1, [r7, #8]
 8001110:	434b      	muls	r3, r1
 8001112:	6879      	ldr	r1, [r7, #4]
 8001114:	434b      	muls	r3, r1
 8001116:	431a      	orrs	r2, r3
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	60da      	str	r2, [r3, #12]
}
 800111c:	46c0      	nop			; (mov r8, r8)
 800111e:	46bd      	mov	sp, r7
 8001120:	b004      	add	sp, #16
 8001122:	bd80      	pop	{r7, pc}

08001124 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
 800112c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	683a      	ldr	r2, [r7, #0]
 8001132:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001134:	46c0      	nop			; (mov r8, r8)
 8001136:	46bd      	mov	sp, r7
 8001138:	b002      	add	sp, #8
 800113a:	bd80      	pop	{r7, pc}

0800113c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800113c:	b590      	push	{r4, r7, lr}
 800113e:	b089      	sub	sp, #36	; 0x24
 8001140:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8001142:	2418      	movs	r4, #24
 8001144:	193b      	adds	r3, r7, r4
 8001146:	0018      	movs	r0, r3
 8001148:	2308      	movs	r3, #8
 800114a:	001a      	movs	r2, r3
 800114c:	2100      	movs	r1, #0
 800114e:	f002 f963 	bl	8003418 <memset>
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001152:	003b      	movs	r3, r7
 8001154:	0018      	movs	r0, r3
 8001156:	2318      	movs	r3, #24
 8001158:	001a      	movs	r2, r3
 800115a:	2100      	movs	r1, #0
 800115c:	f002 f95c 	bl	8003418 <memset>

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8001160:	2380      	movs	r3, #128	; 0x80
 8001162:	031b      	lsls	r3, r3, #12
 8001164:	0018      	movs	r0, r3
 8001166:	f7ff ff67 	bl	8001038 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800116a:	2380      	movs	r3, #128	; 0x80
 800116c:	029b      	lsls	r3, r3, #10
 800116e:	0018      	movs	r0, r3
 8001170:	f7ff ff62 	bl	8001038 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001174:	2380      	movs	r3, #128	; 0x80
 8001176:	02db      	lsls	r3, r3, #11
 8001178:	0018      	movs	r0, r3
 800117a:	f7ff ff5d 	bl	8001038 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(er_GPIO_Port, er_Pin);
 800117e:	2380      	movs	r3, #128	; 0x80
 8001180:	019b      	lsls	r3, r3, #6
 8001182:	4afe      	ldr	r2, [pc, #1016]	; (800157c <MX_GPIO_Init+0x440>)
 8001184:	0019      	movs	r1, r3
 8001186:	0010      	movs	r0, r2
 8001188:	f7ff ffcc 	bl	8001124 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(pwr_GPIO_Port, pwr_Pin);
 800118c:	2380      	movs	r3, #128	; 0x80
 800118e:	01db      	lsls	r3, r3, #7
 8001190:	4afa      	ldr	r2, [pc, #1000]	; (800157c <MX_GPIO_Init+0x440>)
 8001192:	0019      	movs	r1, r3
 8001194:	0010      	movs	r0, r2
 8001196:	f7ff ffc5 	bl	8001124 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(bat_l_GPIO_Port, bat_l_Pin);
 800119a:	2380      	movs	r3, #128	; 0x80
 800119c:	021b      	lsls	r3, r3, #8
 800119e:	4af7      	ldr	r2, [pc, #988]	; (800157c <MX_GPIO_Init+0x440>)
 80011a0:	0019      	movs	r1, r3
 80011a2:	0010      	movs	r0, r2
 80011a4:	f7ff ffbe 	bl	8001124 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(oil_l_GPIO_Port, oil_l_Pin);
 80011a8:	4bf5      	ldr	r3, [pc, #980]	; (8001580 <MX_GPIO_Init+0x444>)
 80011aa:	2104      	movs	r1, #4
 80011ac:	0018      	movs	r0, r3
 80011ae:	f7ff ffb9 	bl	8001124 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(water_l_GPIO_Port, water_l_Pin);
 80011b2:	2380      	movs	r3, #128	; 0x80
 80011b4:	00db      	lsls	r3, r3, #3
 80011b6:	4af2      	ldr	r2, [pc, #968]	; (8001580 <MX_GPIO_Init+0x444>)
 80011b8:	0019      	movs	r1, r3
 80011ba:	0010      	movs	r0, r2
 80011bc:	f7ff ffb2 	bl	8001124 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(ol_l_GPIO_Port, ol_l_Pin);
 80011c0:	2380      	movs	r3, #128	; 0x80
 80011c2:	011b      	lsls	r3, r3, #4
 80011c4:	4aee      	ldr	r2, [pc, #952]	; (8001580 <MX_GPIO_Init+0x444>)
 80011c6:	0019      	movs	r1, r3
 80011c8:	0010      	movs	r0, r2
 80011ca:	f7ff ffab 	bl	8001124 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(emr_l_GPIO_Port, emr_l_Pin);
 80011ce:	2380      	movs	r3, #128	; 0x80
 80011d0:	015b      	lsls	r3, r3, #5
 80011d2:	4aeb      	ldr	r2, [pc, #940]	; (8001580 <MX_GPIO_Init+0x444>)
 80011d4:	0019      	movs	r1, r3
 80011d6:	0010      	movs	r0, r2
 80011d8:	f7ff ffa4 	bl	8001124 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(feul_l_GPIO_Port, feul_l_Pin);
 80011dc:	2380      	movs	r3, #128	; 0x80
 80011de:	019b      	lsls	r3, r3, #6
 80011e0:	4ae7      	ldr	r2, [pc, #924]	; (8001580 <MX_GPIO_Init+0x444>)
 80011e2:	0019      	movs	r1, r3
 80011e4:	0010      	movs	r0, r2
 80011e6:	f7ff ff9d 	bl	8001124 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(start_GPIO_Port, start_Pin);
 80011ea:	4be5      	ldr	r3, [pc, #916]	; (8001580 <MX_GPIO_Init+0x444>)
 80011ec:	2110      	movs	r1, #16
 80011ee:	0018      	movs	r0, r3
 80011f0:	f7ff ff98 	bl	8001124 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(gov_GPIO_Port, gov_Pin);
 80011f4:	4be2      	ldr	r3, [pc, #904]	; (8001580 <MX_GPIO_Init+0x444>)
 80011f6:	2120      	movs	r1, #32
 80011f8:	0018      	movs	r0, r3
 80011fa:	f7ff ff93 	bl	8001124 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(sir_GPIO_Port, sir_Pin);
 80011fe:	4be0      	ldr	r3, [pc, #896]	; (8001580 <MX_GPIO_Init+0x444>)
 8001200:	2140      	movs	r1, #64	; 0x40
 8001202:	0018      	movs	r0, r3
 8001204:	f7ff ff8e 	bl	8001124 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(freq_l_GPIO_Port, freq_l_Pin);
 8001208:	4bdd      	ldr	r3, [pc, #884]	; (8001580 <MX_GPIO_Init+0x444>)
 800120a:	2180      	movs	r1, #128	; 0x80
 800120c:	0018      	movs	r0, r3
 800120e:	f7ff ff89 	bl	8001124 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(vac_l_GPIO_Port, vac_l_Pin);
 8001212:	2380      	movs	r3, #128	; 0x80
 8001214:	005b      	lsls	r3, r3, #1
 8001216:	4ada      	ldr	r2, [pc, #872]	; (8001580 <MX_GPIO_Init+0x444>)
 8001218:	0019      	movs	r1, r3
 800121a:	0010      	movs	r0, r2
 800121c:	f7ff ff82 	bl	8001124 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = er_Pin;
 8001220:	003b      	movs	r3, r7
 8001222:	2280      	movs	r2, #128	; 0x80
 8001224:	0192      	lsls	r2, r2, #6
 8001226:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001228:	003b      	movs	r3, r7
 800122a:	2201      	movs	r2, #1
 800122c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800122e:	003b      	movs	r3, r7
 8001230:	2200      	movs	r2, #0
 8001232:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001234:	003b      	movs	r3, r7
 8001236:	2200      	movs	r2, #0
 8001238:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800123a:	003b      	movs	r3, r7
 800123c:	2200      	movs	r2, #0
 800123e:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(er_GPIO_Port, &GPIO_InitStruct);
 8001240:	003b      	movs	r3, r7
 8001242:	4ace      	ldr	r2, [pc, #824]	; (800157c <MX_GPIO_Init+0x440>)
 8001244:	0019      	movs	r1, r3
 8001246:	0010      	movs	r0, r2
 8001248:	f001 fd45 	bl	8002cd6 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = pwr_Pin;
 800124c:	003b      	movs	r3, r7
 800124e:	2280      	movs	r2, #128	; 0x80
 8001250:	01d2      	lsls	r2, r2, #7
 8001252:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001254:	003b      	movs	r3, r7
 8001256:	2201      	movs	r2, #1
 8001258:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800125a:	003b      	movs	r3, r7
 800125c:	2200      	movs	r2, #0
 800125e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001260:	003b      	movs	r3, r7
 8001262:	2200      	movs	r2, #0
 8001264:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001266:	003b      	movs	r3, r7
 8001268:	2200      	movs	r2, #0
 800126a:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(pwr_GPIO_Port, &GPIO_InitStruct);
 800126c:	003b      	movs	r3, r7
 800126e:	4ac3      	ldr	r2, [pc, #780]	; (800157c <MX_GPIO_Init+0x440>)
 8001270:	0019      	movs	r1, r3
 8001272:	0010      	movs	r0, r2
 8001274:	f001 fd2f 	bl	8002cd6 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = bat_l_Pin;
 8001278:	003b      	movs	r3, r7
 800127a:	2280      	movs	r2, #128	; 0x80
 800127c:	0212      	lsls	r2, r2, #8
 800127e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001280:	003b      	movs	r3, r7
 8001282:	2201      	movs	r2, #1
 8001284:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001286:	003b      	movs	r3, r7
 8001288:	2200      	movs	r2, #0
 800128a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800128c:	003b      	movs	r3, r7
 800128e:	2200      	movs	r2, #0
 8001290:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001292:	003b      	movs	r3, r7
 8001294:	2200      	movs	r2, #0
 8001296:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(bat_l_GPIO_Port, &GPIO_InitStruct);
 8001298:	003b      	movs	r3, r7
 800129a:	4ab8      	ldr	r2, [pc, #736]	; (800157c <MX_GPIO_Init+0x440>)
 800129c:	0019      	movs	r1, r3
 800129e:	0010      	movs	r0, r2
 80012a0:	f001 fd19 	bl	8002cd6 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = water_Pin;
 80012a4:	003b      	movs	r3, r7
 80012a6:	2280      	movs	r2, #128	; 0x80
 80012a8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80012aa:	003b      	movs	r3, r7
 80012ac:	2200      	movs	r2, #0
 80012ae:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80012b0:	003b      	movs	r3, r7
 80012b2:	2200      	movs	r2, #0
 80012b4:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(water_GPIO_Port, &GPIO_InitStruct);
 80012b6:	003a      	movs	r2, r7
 80012b8:	2390      	movs	r3, #144	; 0x90
 80012ba:	05db      	lsls	r3, r3, #23
 80012bc:	0011      	movs	r1, r2
 80012be:	0018      	movs	r0, r3
 80012c0:	f001 fd09 	bl	8002cd6 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = oil_Pin;
 80012c4:	003b      	movs	r3, r7
 80012c6:	2201      	movs	r2, #1
 80012c8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80012ca:	003b      	movs	r3, r7
 80012cc:	2200      	movs	r2, #0
 80012ce:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80012d0:	003b      	movs	r3, r7
 80012d2:	2200      	movs	r2, #0
 80012d4:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(oil_GPIO_Port, &GPIO_InitStruct);
 80012d6:	003b      	movs	r3, r7
 80012d8:	4aa9      	ldr	r2, [pc, #676]	; (8001580 <MX_GPIO_Init+0x444>)
 80012da:	0019      	movs	r1, r3
 80012dc:	0010      	movs	r0, r2
 80012de:	f001 fcfa 	bl	8002cd6 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = ol_Pin;
 80012e2:	003b      	movs	r3, r7
 80012e4:	2202      	movs	r2, #2
 80012e6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80012e8:	003b      	movs	r3, r7
 80012ea:	2200      	movs	r2, #0
 80012ec:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80012ee:	003b      	movs	r3, r7
 80012f0:	2200      	movs	r2, #0
 80012f2:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(ol_GPIO_Port, &GPIO_InitStruct);
 80012f4:	003b      	movs	r3, r7
 80012f6:	4aa2      	ldr	r2, [pc, #648]	; (8001580 <MX_GPIO_Init+0x444>)
 80012f8:	0019      	movs	r1, r3
 80012fa:	0010      	movs	r0, r2
 80012fc:	f001 fceb 	bl	8002cd6 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = oil_l_Pin;
 8001300:	003b      	movs	r3, r7
 8001302:	2204      	movs	r2, #4
 8001304:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001306:	003b      	movs	r3, r7
 8001308:	2201      	movs	r2, #1
 800130a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800130c:	003b      	movs	r3, r7
 800130e:	2200      	movs	r2, #0
 8001310:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001312:	003b      	movs	r3, r7
 8001314:	2200      	movs	r2, #0
 8001316:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001318:	003b      	movs	r3, r7
 800131a:	2200      	movs	r2, #0
 800131c:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(oil_l_GPIO_Port, &GPIO_InitStruct);
 800131e:	003b      	movs	r3, r7
 8001320:	4a97      	ldr	r2, [pc, #604]	; (8001580 <MX_GPIO_Init+0x444>)
 8001322:	0019      	movs	r1, r3
 8001324:	0010      	movs	r0, r2
 8001326:	f001 fcd6 	bl	8002cd6 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = water_l_Pin;
 800132a:	003b      	movs	r3, r7
 800132c:	2280      	movs	r2, #128	; 0x80
 800132e:	00d2      	lsls	r2, r2, #3
 8001330:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001332:	003b      	movs	r3, r7
 8001334:	2201      	movs	r2, #1
 8001336:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001338:	003b      	movs	r3, r7
 800133a:	2200      	movs	r2, #0
 800133c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800133e:	003b      	movs	r3, r7
 8001340:	2200      	movs	r2, #0
 8001342:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001344:	003b      	movs	r3, r7
 8001346:	2200      	movs	r2, #0
 8001348:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(water_l_GPIO_Port, &GPIO_InitStruct);
 800134a:	003b      	movs	r3, r7
 800134c:	4a8c      	ldr	r2, [pc, #560]	; (8001580 <MX_GPIO_Init+0x444>)
 800134e:	0019      	movs	r1, r3
 8001350:	0010      	movs	r0, r2
 8001352:	f001 fcc0 	bl	8002cd6 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = ol_l_Pin;
 8001356:	003b      	movs	r3, r7
 8001358:	2280      	movs	r2, #128	; 0x80
 800135a:	0112      	lsls	r2, r2, #4
 800135c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800135e:	003b      	movs	r3, r7
 8001360:	2201      	movs	r2, #1
 8001362:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001364:	003b      	movs	r3, r7
 8001366:	2200      	movs	r2, #0
 8001368:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800136a:	003b      	movs	r3, r7
 800136c:	2200      	movs	r2, #0
 800136e:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001370:	003b      	movs	r3, r7
 8001372:	2200      	movs	r2, #0
 8001374:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(ol_l_GPIO_Port, &GPIO_InitStruct);
 8001376:	003b      	movs	r3, r7
 8001378:	4a81      	ldr	r2, [pc, #516]	; (8001580 <MX_GPIO_Init+0x444>)
 800137a:	0019      	movs	r1, r3
 800137c:	0010      	movs	r0, r2
 800137e:	f001 fcaa 	bl	8002cd6 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = emr_l_Pin;
 8001382:	003b      	movs	r3, r7
 8001384:	2280      	movs	r2, #128	; 0x80
 8001386:	0152      	lsls	r2, r2, #5
 8001388:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800138a:	003b      	movs	r3, r7
 800138c:	2201      	movs	r2, #1
 800138e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001390:	003b      	movs	r3, r7
 8001392:	2200      	movs	r2, #0
 8001394:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001396:	003b      	movs	r3, r7
 8001398:	2200      	movs	r2, #0
 800139a:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800139c:	003b      	movs	r3, r7
 800139e:	2200      	movs	r2, #0
 80013a0:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(emr_l_GPIO_Port, &GPIO_InitStruct);
 80013a2:	003b      	movs	r3, r7
 80013a4:	4a76      	ldr	r2, [pc, #472]	; (8001580 <MX_GPIO_Init+0x444>)
 80013a6:	0019      	movs	r1, r3
 80013a8:	0010      	movs	r0, r2
 80013aa:	f001 fc94 	bl	8002cd6 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = feul_l_Pin;
 80013ae:	003b      	movs	r3, r7
 80013b0:	2280      	movs	r2, #128	; 0x80
 80013b2:	0192      	lsls	r2, r2, #6
 80013b4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80013b6:	003b      	movs	r3, r7
 80013b8:	2201      	movs	r2, #1
 80013ba:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80013bc:	003b      	movs	r3, r7
 80013be:	2200      	movs	r2, #0
 80013c0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80013c2:	003b      	movs	r3, r7
 80013c4:	2200      	movs	r2, #0
 80013c6:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80013c8:	003b      	movs	r3, r7
 80013ca:	2200      	movs	r2, #0
 80013cc:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(feul_l_GPIO_Port, &GPIO_InitStruct);
 80013ce:	003b      	movs	r3, r7
 80013d0:	4a6b      	ldr	r2, [pc, #428]	; (8001580 <MX_GPIO_Init+0x444>)
 80013d2:	0019      	movs	r1, r3
 80013d4:	0010      	movs	r0, r2
 80013d6:	f001 fc7e 	bl	8002cd6 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = gen_Pin;
 80013da:	003b      	movs	r3, r7
 80013dc:	2280      	movs	r2, #128	; 0x80
 80013de:	01d2      	lsls	r2, r2, #7
 80013e0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80013e2:	003b      	movs	r3, r7
 80013e4:	2200      	movs	r2, #0
 80013e6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80013e8:	003b      	movs	r3, r7
 80013ea:	2200      	movs	r2, #0
 80013ec:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(gen_GPIO_Port, &GPIO_InitStruct);
 80013ee:	003b      	movs	r3, r7
 80013f0:	4a63      	ldr	r2, [pc, #396]	; (8001580 <MX_GPIO_Init+0x444>)
 80013f2:	0019      	movs	r1, r3
 80013f4:	0010      	movs	r0, r2
 80013f6:	f001 fc6e 	bl	8002cd6 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = feul_Pin;
 80013fa:	003b      	movs	r3, r7
 80013fc:	2280      	movs	r2, #128	; 0x80
 80013fe:	0212      	lsls	r2, r2, #8
 8001400:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001402:	003b      	movs	r3, r7
 8001404:	2200      	movs	r2, #0
 8001406:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001408:	003b      	movs	r3, r7
 800140a:	2200      	movs	r2, #0
 800140c:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(feul_GPIO_Port, &GPIO_InitStruct);
 800140e:	003b      	movs	r3, r7
 8001410:	4a5b      	ldr	r2, [pc, #364]	; (8001580 <MX_GPIO_Init+0x444>)
 8001412:	0019      	movs	r1, r3
 8001414:	0010      	movs	r0, r2
 8001416:	f001 fc5e 	bl	8002cd6 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = emr_Pin;
 800141a:	003b      	movs	r3, r7
 800141c:	2280      	movs	r2, #128	; 0x80
 800141e:	0052      	lsls	r2, r2, #1
 8001420:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001422:	003b      	movs	r3, r7
 8001424:	2200      	movs	r2, #0
 8001426:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001428:	003b      	movs	r3, r7
 800142a:	2200      	movs	r2, #0
 800142c:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(emr_GPIO_Port, &GPIO_InitStruct);
 800142e:	003a      	movs	r2, r7
 8001430:	2390      	movs	r3, #144	; 0x90
 8001432:	05db      	lsls	r3, r3, #23
 8001434:	0011      	movs	r1, r2
 8001436:	0018      	movs	r0, r3
 8001438:	f001 fc4d 	bl	8002cd6 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = mute_Pin;
 800143c:	003b      	movs	r3, r7
 800143e:	2280      	movs	r2, #128	; 0x80
 8001440:	0212      	lsls	r2, r2, #8
 8001442:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001444:	003b      	movs	r3, r7
 8001446:	2200      	movs	r2, #0
 8001448:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800144a:	003b      	movs	r3, r7
 800144c:	2200      	movs	r2, #0
 800144e:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(mute_GPIO_Port, &GPIO_InitStruct);
 8001450:	003a      	movs	r2, r7
 8001452:	2390      	movs	r3, #144	; 0x90
 8001454:	05db      	lsls	r3, r3, #23
 8001456:	0011      	movs	r1, r2
 8001458:	0018      	movs	r0, r3
 800145a:	f001 fc3c 	bl	8002cd6 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = btn_start_Pin;
 800145e:	003b      	movs	r3, r7
 8001460:	2208      	movs	r2, #8
 8001462:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001464:	003b      	movs	r3, r7
 8001466:	2200      	movs	r2, #0
 8001468:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800146a:	003b      	movs	r3, r7
 800146c:	2200      	movs	r2, #0
 800146e:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(btn_start_GPIO_Port, &GPIO_InitStruct);
 8001470:	003b      	movs	r3, r7
 8001472:	4a43      	ldr	r2, [pc, #268]	; (8001580 <MX_GPIO_Init+0x444>)
 8001474:	0019      	movs	r1, r3
 8001476:	0010      	movs	r0, r2
 8001478:	f001 fc2d 	bl	8002cd6 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = start_Pin;
 800147c:	003b      	movs	r3, r7
 800147e:	2210      	movs	r2, #16
 8001480:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001482:	003b      	movs	r3, r7
 8001484:	2201      	movs	r2, #1
 8001486:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001488:	003b      	movs	r3, r7
 800148a:	2200      	movs	r2, #0
 800148c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800148e:	003b      	movs	r3, r7
 8001490:	2200      	movs	r2, #0
 8001492:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001494:	003b      	movs	r3, r7
 8001496:	2200      	movs	r2, #0
 8001498:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(start_GPIO_Port, &GPIO_InitStruct);
 800149a:	003b      	movs	r3, r7
 800149c:	4a38      	ldr	r2, [pc, #224]	; (8001580 <MX_GPIO_Init+0x444>)
 800149e:	0019      	movs	r1, r3
 80014a0:	0010      	movs	r0, r2
 80014a2:	f001 fc18 	bl	8002cd6 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = gov_Pin;
 80014a6:	003b      	movs	r3, r7
 80014a8:	2220      	movs	r2, #32
 80014aa:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80014ac:	003b      	movs	r3, r7
 80014ae:	2201      	movs	r2, #1
 80014b0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80014b2:	003b      	movs	r3, r7
 80014b4:	2200      	movs	r2, #0
 80014b6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80014b8:	003b      	movs	r3, r7
 80014ba:	2200      	movs	r2, #0
 80014bc:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80014be:	003b      	movs	r3, r7
 80014c0:	2200      	movs	r2, #0
 80014c2:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(gov_GPIO_Port, &GPIO_InitStruct);
 80014c4:	003b      	movs	r3, r7
 80014c6:	4a2e      	ldr	r2, [pc, #184]	; (8001580 <MX_GPIO_Init+0x444>)
 80014c8:	0019      	movs	r1, r3
 80014ca:	0010      	movs	r0, r2
 80014cc:	f001 fc03 	bl	8002cd6 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = sir_Pin;
 80014d0:	003b      	movs	r3, r7
 80014d2:	2240      	movs	r2, #64	; 0x40
 80014d4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80014d6:	003b      	movs	r3, r7
 80014d8:	2201      	movs	r2, #1
 80014da:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80014dc:	003b      	movs	r3, r7
 80014de:	2200      	movs	r2, #0
 80014e0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80014e2:	003b      	movs	r3, r7
 80014e4:	2200      	movs	r2, #0
 80014e6:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80014e8:	003b      	movs	r3, r7
 80014ea:	2200      	movs	r2, #0
 80014ec:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(sir_GPIO_Port, &GPIO_InitStruct);
 80014ee:	003b      	movs	r3, r7
 80014f0:	4a23      	ldr	r2, [pc, #140]	; (8001580 <MX_GPIO_Init+0x444>)
 80014f2:	0019      	movs	r1, r3
 80014f4:	0010      	movs	r0, r2
 80014f6:	f001 fbee 	bl	8002cd6 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = freq_l_Pin;
 80014fa:	003b      	movs	r3, r7
 80014fc:	2280      	movs	r2, #128	; 0x80
 80014fe:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001500:	003b      	movs	r3, r7
 8001502:	2201      	movs	r2, #1
 8001504:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001506:	003b      	movs	r3, r7
 8001508:	2200      	movs	r2, #0
 800150a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800150c:	003b      	movs	r3, r7
 800150e:	2200      	movs	r2, #0
 8001510:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001512:	003b      	movs	r3, r7
 8001514:	2200      	movs	r2, #0
 8001516:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(freq_l_GPIO_Port, &GPIO_InitStruct);
 8001518:	003b      	movs	r3, r7
 800151a:	4a19      	ldr	r2, [pc, #100]	; (8001580 <MX_GPIO_Init+0x444>)
 800151c:	0019      	movs	r1, r3
 800151e:	0010      	movs	r0, r2
 8001520:	f001 fbd9 	bl	8002cd6 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = vac_l_Pin;
 8001524:	003b      	movs	r3, r7
 8001526:	2280      	movs	r2, #128	; 0x80
 8001528:	0052      	lsls	r2, r2, #1
 800152a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800152c:	003b      	movs	r3, r7
 800152e:	2201      	movs	r2, #1
 8001530:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001532:	003b      	movs	r3, r7
 8001534:	2200      	movs	r2, #0
 8001536:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001538:	003b      	movs	r3, r7
 800153a:	2200      	movs	r2, #0
 800153c:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800153e:	003b      	movs	r3, r7
 8001540:	2200      	movs	r2, #0
 8001542:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(vac_l_GPIO_Port, &GPIO_InitStruct);
 8001544:	003b      	movs	r3, r7
 8001546:	4a0e      	ldr	r2, [pc, #56]	; (8001580 <MX_GPIO_Init+0x444>)
 8001548:	0019      	movs	r1, r3
 800154a:	0010      	movs	r0, r2
 800154c:	f001 fbc3 	bl	8002cd6 <LL_GPIO_Init>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTA, LL_SYSCFG_EXTI_LINE1);
 8001550:	2380      	movs	r3, #128	; 0x80
 8001552:	02db      	lsls	r3, r3, #11
 8001554:	0019      	movs	r1, r3
 8001556:	2000      	movs	r0, #0
 8001558:	f7ff fd84 	bl	8001064 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_GPIO_SetPinPull(fr_GPIO_Port, fr_Pin, LL_GPIO_PULL_NO);
 800155c:	2390      	movs	r3, #144	; 0x90
 800155e:	05db      	lsls	r3, r3, #23
 8001560:	2200      	movs	r2, #0
 8001562:	2102      	movs	r1, #2
 8001564:	0018      	movs	r0, r3
 8001566:	f7ff fdc0 	bl	80010ea <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(fr_GPIO_Port, fr_Pin, LL_GPIO_MODE_INPUT);
 800156a:	2390      	movs	r3, #144	; 0x90
 800156c:	05db      	lsls	r3, r3, #23
 800156e:	2200      	movs	r2, #0
 8001570:	2102      	movs	r1, #2
 8001572:	0018      	movs	r0, r3
 8001574:	f7ff fd9c 	bl	80010b0 <LL_GPIO_SetPinMode>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_1;
 8001578:	0021      	movs	r1, r4
 800157a:	e003      	b.n	8001584 <MX_GPIO_Init+0x448>
 800157c:	48000800 	.word	0x48000800
 8001580:	48000400 	.word	0x48000400
 8001584:	187b      	adds	r3, r7, r1
 8001586:	2202      	movs	r2, #2
 8001588:	601a      	str	r2, [r3, #0]
  EXTI_InitStruct.LineCommand = ENABLE;
 800158a:	187b      	adds	r3, r7, r1
 800158c:	2201      	movs	r2, #1
 800158e:	711a      	strb	r2, [r3, #4]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8001590:	187b      	adds	r3, r7, r1
 8001592:	2200      	movs	r2, #0
 8001594:	715a      	strb	r2, [r3, #5]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8001596:	187b      	adds	r3, r7, r1
 8001598:	2201      	movs	r2, #1
 800159a:	719a      	strb	r2, [r3, #6]
  LL_EXTI_Init(&EXTI_InitStruct);
 800159c:	187b      	adds	r3, r7, r1
 800159e:	0018      	movs	r0, r3
 80015a0:	f001 fa56 	bl	8002a50 <LL_EXTI_Init>

}
 80015a4:	46c0      	nop			; (mov r8, r8)
 80015a6:	46bd      	mov	sp, r7
 80015a8:	b009      	add	sp, #36	; 0x24
 80015aa:	bd90      	pop	{r4, r7, pc}

080015ac <LL_ADC_DMA_GetRegAddr>:
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b082      	sub	sp, #8
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
 80015b4:	6039      	str	r1, [r7, #0]
  return (uint32_t)&(ADCx->DR);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	3340      	adds	r3, #64	; 0x40
}
 80015ba:	0018      	movs	r0, r3
 80015bc:	46bd      	mov	sp, r7
 80015be:	b002      	add	sp, #8
 80015c0:	bd80      	pop	{r7, pc}
	...

080015c4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b082      	sub	sp, #8
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	689b      	ldr	r3, [r3, #8]
 80015d0:	4a04      	ldr	r2, [pc, #16]	; (80015e4 <LL_ADC_Enable+0x20>)
 80015d2:	4013      	ands	r3, r2
 80015d4:	2201      	movs	r2, #1
 80015d6:	431a      	orrs	r2, r3
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80015dc:	46c0      	nop			; (mov r8, r8)
 80015de:	46bd      	mov	sp, r7
 80015e0:	b002      	add	sp, #8
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	7fffffe8 	.word	0x7fffffe8

080015e8 <LL_ADC_StartCalibration>:
  * @rmtoll CR       ADCAL          LL_ADC_StartCalibration
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_StartCalibration(ADC_TypeDef *ADCx)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b082      	sub	sp, #8
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	689b      	ldr	r3, [r3, #8]
 80015f4:	4a05      	ldr	r2, [pc, #20]	; (800160c <LL_ADC_StartCalibration+0x24>)
 80015f6:	4013      	ands	r3, r2
 80015f8:	2280      	movs	r2, #128	; 0x80
 80015fa:	0612      	lsls	r2, r2, #24
 80015fc:	431a      	orrs	r2, r3
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADCAL);
}
 8001602:	46c0      	nop			; (mov r8, r8)
 8001604:	46bd      	mov	sp, r7
 8001606:	b002      	add	sp, #8
 8001608:	bd80      	pop	{r7, pc}
 800160a:	46c0      	nop			; (mov r8, r8)
 800160c:	7fffffe8 	.word	0x7fffffe8

08001610 <LL_ADC_IsCalibrationOnGoing>:
  * @rmtoll CR       ADCAL          LL_ADC_IsCalibrationOnGoing
  * @param  ADCx ADC instance
  * @retval 0: calibration complete, 1: calibration in progress.
  */
__STATIC_INLINE uint32_t LL_ADC_IsCalibrationOnGoing(ADC_TypeDef *ADCx)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL));
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	689b      	ldr	r3, [r3, #8]
 800161c:	0fdb      	lsrs	r3, r3, #31
 800161e:	07db      	lsls	r3, r3, #31
 8001620:	2280      	movs	r2, #128	; 0x80
 8001622:	0612      	lsls	r2, r2, #24
 8001624:	4694      	mov	ip, r2
 8001626:	4463      	add	r3, ip
 8001628:	425a      	negs	r2, r3
 800162a:	4153      	adcs	r3, r2
 800162c:	b2db      	uxtb	r3, r3
}
 800162e:	0018      	movs	r0, r3
 8001630:	46bd      	mov	sp, r7
 8001632:	b002      	add	sp, #8
 8001634:	bd80      	pop	{r7, pc}
	...

08001638 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b082      	sub	sp, #8
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	689b      	ldr	r3, [r3, #8]
 8001644:	4a04      	ldr	r2, [pc, #16]	; (8001658 <LL_ADC_REG_StartConversion+0x20>)
 8001646:	4013      	ands	r3, r2
 8001648:	2204      	movs	r2, #4
 800164a:	431a      	orrs	r2, r3
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001650:	46c0      	nop			; (mov r8, r8)
 8001652:	46bd      	mov	sp, r7
 8001654:	b002      	add	sp, #8
 8001656:	bd80      	pop	{r7, pc}
 8001658:	7fffffe8 	.word	0x7fffffe8

0800165c <LL_DMA_EnableChannel>:
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b082      	sub	sp, #8
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
 8001664:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	3b01      	subs	r3, #1
 800166a:	4a0a      	ldr	r2, [pc, #40]	; (8001694 <LL_DMA_EnableChannel+0x38>)
 800166c:	5cd3      	ldrb	r3, [r2, r3]
 800166e:	001a      	movs	r2, r3
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	18d3      	adds	r3, r2, r3
 8001674:	681a      	ldr	r2, [r3, #0]
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	3b01      	subs	r3, #1
 800167a:	4906      	ldr	r1, [pc, #24]	; (8001694 <LL_DMA_EnableChannel+0x38>)
 800167c:	5ccb      	ldrb	r3, [r1, r3]
 800167e:	0019      	movs	r1, r3
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	18cb      	adds	r3, r1, r3
 8001684:	2101      	movs	r1, #1
 8001686:	430a      	orrs	r2, r1
 8001688:	601a      	str	r2, [r3, #0]
}
 800168a:	46c0      	nop			; (mov r8, r8)
 800168c:	46bd      	mov	sp, r7
 800168e:	b002      	add	sp, #8
 8001690:	bd80      	pop	{r7, pc}
 8001692:	46c0      	nop			; (mov r8, r8)
 8001694:	08003488 	.word	0x08003488

08001698 <LL_DMA_SetDataLength>:
  *         @arg @ref LL_DMA_CHANNEL_7
  * @param  NbData Between Min_Data = 0 and Max_Data = 0x0000FFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataLength(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t NbData)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b084      	sub	sp, #16
 800169c:	af00      	add	r7, sp, #0
 800169e:	60f8      	str	r0, [r7, #12]
 80016a0:	60b9      	str	r1, [r7, #8]
 80016a2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 80016a4:	68bb      	ldr	r3, [r7, #8]
 80016a6:	3b01      	subs	r3, #1
 80016a8:	4a0a      	ldr	r2, [pc, #40]	; (80016d4 <LL_DMA_SetDataLength+0x3c>)
 80016aa:	5cd3      	ldrb	r3, [r2, r3]
 80016ac:	001a      	movs	r2, r3
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	18d3      	adds	r3, r2, r3
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	0c1b      	lsrs	r3, r3, #16
 80016b6:	0419      	lsls	r1, r3, #16
 80016b8:	68bb      	ldr	r3, [r7, #8]
 80016ba:	3b01      	subs	r3, #1
 80016bc:	4a05      	ldr	r2, [pc, #20]	; (80016d4 <LL_DMA_SetDataLength+0x3c>)
 80016be:	5cd3      	ldrb	r3, [r2, r3]
 80016c0:	001a      	movs	r2, r3
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	18d3      	adds	r3, r2, r3
 80016c6:	687a      	ldr	r2, [r7, #4]
 80016c8:	430a      	orrs	r2, r1
 80016ca:	605a      	str	r2, [r3, #4]
             DMA_CNDTR_NDT, NbData);
}
 80016cc:	46c0      	nop			; (mov r8, r8)
 80016ce:	46bd      	mov	sp, r7
 80016d0:	b004      	add	sp, #16
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	08003488 	.word	0x08003488

080016d8 <LL_DMA_SetMemoryAddress>:
  *         @arg @ref LL_DMA_CHANNEL_7
  * @param  MemoryAddress Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryAddress(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryAddress)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b084      	sub	sp, #16
 80016dc:	af00      	add	r7, sp, #0
 80016de:	60f8      	str	r0, [r7, #12]
 80016e0:	60b9      	str	r1, [r7, #8]
 80016e2:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, MemoryAddress);
 80016e4:	68bb      	ldr	r3, [r7, #8]
 80016e6:	3b01      	subs	r3, #1
 80016e8:	4a05      	ldr	r2, [pc, #20]	; (8001700 <LL_DMA_SetMemoryAddress+0x28>)
 80016ea:	5cd3      	ldrb	r3, [r2, r3]
 80016ec:	001a      	movs	r2, r3
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	18d3      	adds	r3, r2, r3
 80016f2:	687a      	ldr	r2, [r7, #4]
 80016f4:	60da      	str	r2, [r3, #12]
}
 80016f6:	46c0      	nop			; (mov r8, r8)
 80016f8:	46bd      	mov	sp, r7
 80016fa:	b004      	add	sp, #16
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	46c0      	nop			; (mov r8, r8)
 8001700:	08003488 	.word	0x08003488

08001704 <LL_DMA_SetPeriphAddress>:
  *         @arg @ref LL_DMA_CHANNEL_7
  * @param  PeriphAddress Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphAddress(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphAddress)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b084      	sub	sp, #16
 8001708:	af00      	add	r7, sp, #0
 800170a:	60f8      	str	r0, [r7, #12]
 800170c:	60b9      	str	r1, [r7, #8]
 800170e:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, PeriphAddress);
 8001710:	68bb      	ldr	r3, [r7, #8]
 8001712:	3b01      	subs	r3, #1
 8001714:	4a05      	ldr	r2, [pc, #20]	; (800172c <LL_DMA_SetPeriphAddress+0x28>)
 8001716:	5cd3      	ldrb	r3, [r2, r3]
 8001718:	001a      	movs	r2, r3
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	18d3      	adds	r3, r2, r3
 800171e:	687a      	ldr	r2, [r7, #4]
 8001720:	609a      	str	r2, [r3, #8]
}
 8001722:	46c0      	nop			; (mov r8, r8)
 8001724:	46bd      	mov	sp, r7
 8001726:	b004      	add	sp, #16
 8001728:	bd80      	pop	{r7, pc}
 800172a:	46c0      	nop			; (mov r8, r8)
 800172c:	08003488 	.word	0x08003488

08001730 <LL_DMA_EnableIT_TC>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
 8001738:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TCIE);
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	3b01      	subs	r3, #1
 800173e:	4a0a      	ldr	r2, [pc, #40]	; (8001768 <LL_DMA_EnableIT_TC+0x38>)
 8001740:	5cd3      	ldrb	r3, [r2, r3]
 8001742:	001a      	movs	r2, r3
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	18d3      	adds	r3, r2, r3
 8001748:	681a      	ldr	r2, [r3, #0]
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	3b01      	subs	r3, #1
 800174e:	4906      	ldr	r1, [pc, #24]	; (8001768 <LL_DMA_EnableIT_TC+0x38>)
 8001750:	5ccb      	ldrb	r3, [r1, r3]
 8001752:	0019      	movs	r1, r3
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	18cb      	adds	r3, r1, r3
 8001758:	2102      	movs	r1, #2
 800175a:	430a      	orrs	r2, r1
 800175c:	601a      	str	r2, [r3, #0]
}
 800175e:	46c0      	nop			; (mov r8, r8)
 8001760:	46bd      	mov	sp, r7
 8001762:	b002      	add	sp, #8
 8001764:	bd80      	pop	{r7, pc}
 8001766:	46c0      	nop			; (mov r8, r8)
 8001768:	08003488 	.word	0x08003488

0800176c <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001770:	4b04      	ldr	r3, [pc, #16]	; (8001784 <LL_RCC_HSI_Enable+0x18>)
 8001772:	681a      	ldr	r2, [r3, #0]
 8001774:	4b03      	ldr	r3, [pc, #12]	; (8001784 <LL_RCC_HSI_Enable+0x18>)
 8001776:	2101      	movs	r1, #1
 8001778:	430a      	orrs	r2, r1
 800177a:	601a      	str	r2, [r3, #0]
}
 800177c:	46c0      	nop			; (mov r8, r8)
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
 8001782:	46c0      	nop			; (mov r8, r8)
 8001784:	40021000 	.word	0x40021000

08001788 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 800178c:	4b05      	ldr	r3, [pc, #20]	; (80017a4 <LL_RCC_HSI_IsReady+0x1c>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	2202      	movs	r2, #2
 8001792:	4013      	ands	r3, r2
 8001794:	3b02      	subs	r3, #2
 8001796:	425a      	negs	r2, r3
 8001798:	4153      	adcs	r3, r2
 800179a:	b2db      	uxtb	r3, r3
}
 800179c:	0018      	movs	r0, r3
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	46c0      	nop			; (mov r8, r8)
 80017a4:	40021000 	.word	0x40021000

080017a8 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b082      	sub	sp, #8
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 80017b0:	4b06      	ldr	r3, [pc, #24]	; (80017cc <LL_RCC_HSI_SetCalibTrimming+0x24>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	22f8      	movs	r2, #248	; 0xf8
 80017b6:	4393      	bics	r3, r2
 80017b8:	0019      	movs	r1, r3
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	00da      	lsls	r2, r3, #3
 80017be:	4b03      	ldr	r3, [pc, #12]	; (80017cc <LL_RCC_HSI_SetCalibTrimming+0x24>)
 80017c0:	430a      	orrs	r2, r1
 80017c2:	601a      	str	r2, [r3, #0]
}
 80017c4:	46c0      	nop			; (mov r8, r8)
 80017c6:	46bd      	mov	sp, r7
 80017c8:	b002      	add	sp, #8
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	40021000 	.word	0x40021000

080017d0 <LL_RCC_HSI14_Enable>:
  * @brief  Enable HSI14
  * @rmtoll CR2          HSI14ON       LL_RCC_HSI14_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI14_Enable(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR2, RCC_CR2_HSI14ON);
 80017d4:	4b04      	ldr	r3, [pc, #16]	; (80017e8 <LL_RCC_HSI14_Enable+0x18>)
 80017d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80017d8:	4b03      	ldr	r3, [pc, #12]	; (80017e8 <LL_RCC_HSI14_Enable+0x18>)
 80017da:	2101      	movs	r1, #1
 80017dc:	430a      	orrs	r2, r1
 80017de:	635a      	str	r2, [r3, #52]	; 0x34
}
 80017e0:	46c0      	nop			; (mov r8, r8)
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	46c0      	nop			; (mov r8, r8)
 80017e8:	40021000 	.word	0x40021000

080017ec <LL_RCC_HSI14_IsReady>:
  * @brief  Check if HSI14 oscillator Ready
  * @rmtoll CR2          HSI14RDY      LL_RCC_HSI14_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI14_IsReady(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR2, RCC_CR2_HSI14RDY) == (RCC_CR2_HSI14RDY));
 80017f0:	4b05      	ldr	r3, [pc, #20]	; (8001808 <LL_RCC_HSI14_IsReady+0x1c>)
 80017f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017f4:	2202      	movs	r2, #2
 80017f6:	4013      	ands	r3, r2
 80017f8:	3b02      	subs	r3, #2
 80017fa:	425a      	negs	r2, r3
 80017fc:	4153      	adcs	r3, r2
 80017fe:	b2db      	uxtb	r3, r3
}
 8001800:	0018      	movs	r0, r3
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
 8001806:	46c0      	nop			; (mov r8, r8)
 8001808:	40021000 	.word	0x40021000

0800180c <LL_RCC_HSI14_EnableADCControl>:
  * @brief  ADC interface can turn on the HSI14 oscillator
  * @rmtoll CR2          HSI14DIS      LL_RCC_HSI14_EnableADCControl
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI14_EnableADCControl(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR2, RCC_CR2_HSI14DIS);
 8001810:	4b04      	ldr	r3, [pc, #16]	; (8001824 <LL_RCC_HSI14_EnableADCControl+0x18>)
 8001812:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001814:	4b03      	ldr	r3, [pc, #12]	; (8001824 <LL_RCC_HSI14_EnableADCControl+0x18>)
 8001816:	2104      	movs	r1, #4
 8001818:	438a      	bics	r2, r1
 800181a:	635a      	str	r2, [r3, #52]	; 0x34
}
 800181c:	46c0      	nop			; (mov r8, r8)
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
 8001822:	46c0      	nop			; (mov r8, r8)
 8001824:	40021000 	.word	0x40021000

08001828 <LL_RCC_HSI14_SetCalibTrimming>:
  * @rmtoll CR2          HSI14TRIM     LL_RCC_HSI14_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0xFF
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI14_SetCalibTrimming(uint32_t Value)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b082      	sub	sp, #8
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR2, RCC_CR2_HSI14TRIM, Value << RCC_POSITION_HSI14TRIM);
 8001830:	4b06      	ldr	r3, [pc, #24]	; (800184c <LL_RCC_HSI14_SetCalibTrimming+0x24>)
 8001832:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001834:	22f8      	movs	r2, #248	; 0xf8
 8001836:	4393      	bics	r3, r2
 8001838:	0019      	movs	r1, r3
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	00da      	lsls	r2, r3, #3
 800183e:	4b03      	ldr	r3, [pc, #12]	; (800184c <LL_RCC_HSI14_SetCalibTrimming+0x24>)
 8001840:	430a      	orrs	r2, r1
 8001842:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001844:	46c0      	nop			; (mov r8, r8)
 8001846:	46bd      	mov	sp, r7
 8001848:	b002      	add	sp, #8
 800184a:	bd80      	pop	{r7, pc}
 800184c:	40021000 	.word	0x40021000

08001850 <LL_RCC_SetSysClkSource>:
  *
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b082      	sub	sp, #8
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001858:	4b06      	ldr	r3, [pc, #24]	; (8001874 <LL_RCC_SetSysClkSource+0x24>)
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	2203      	movs	r2, #3
 800185e:	4393      	bics	r3, r2
 8001860:	0019      	movs	r1, r3
 8001862:	4b04      	ldr	r3, [pc, #16]	; (8001874 <LL_RCC_SetSysClkSource+0x24>)
 8001864:	687a      	ldr	r2, [r7, #4]
 8001866:	430a      	orrs	r2, r1
 8001868:	605a      	str	r2, [r3, #4]
}
 800186a:	46c0      	nop			; (mov r8, r8)
 800186c:	46bd      	mov	sp, r7
 800186e:	b002      	add	sp, #8
 8001870:	bd80      	pop	{r7, pc}
 8001872:	46c0      	nop			; (mov r8, r8)
 8001874:	40021000 	.word	0x40021000

08001878 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI48 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800187c:	4b03      	ldr	r3, [pc, #12]	; (800188c <LL_RCC_GetSysClkSource+0x14>)
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	220c      	movs	r2, #12
 8001882:	4013      	ands	r3, r2
}
 8001884:	0018      	movs	r0, r3
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
 800188a:	46c0      	nop			; (mov r8, r8)
 800188c:	40021000 	.word	0x40021000

08001890 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b082      	sub	sp, #8
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001898:	4b06      	ldr	r3, [pc, #24]	; (80018b4 <LL_RCC_SetAHBPrescaler+0x24>)
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	22f0      	movs	r2, #240	; 0xf0
 800189e:	4393      	bics	r3, r2
 80018a0:	0019      	movs	r1, r3
 80018a2:	4b04      	ldr	r3, [pc, #16]	; (80018b4 <LL_RCC_SetAHBPrescaler+0x24>)
 80018a4:	687a      	ldr	r2, [r7, #4]
 80018a6:	430a      	orrs	r2, r1
 80018a8:	605a      	str	r2, [r3, #4]
}
 80018aa:	46c0      	nop			; (mov r8, r8)
 80018ac:	46bd      	mov	sp, r7
 80018ae:	b002      	add	sp, #8
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	46c0      	nop			; (mov r8, r8)
 80018b4:	40021000 	.word	0x40021000

080018b8 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b082      	sub	sp, #8
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, Prescaler);
 80018c0:	4b06      	ldr	r3, [pc, #24]	; (80018dc <LL_RCC_SetAPB1Prescaler+0x24>)
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	4a06      	ldr	r2, [pc, #24]	; (80018e0 <LL_RCC_SetAPB1Prescaler+0x28>)
 80018c6:	4013      	ands	r3, r2
 80018c8:	0019      	movs	r1, r3
 80018ca:	4b04      	ldr	r3, [pc, #16]	; (80018dc <LL_RCC_SetAPB1Prescaler+0x24>)
 80018cc:	687a      	ldr	r2, [r7, #4]
 80018ce:	430a      	orrs	r2, r1
 80018d0:	605a      	str	r2, [r3, #4]
}
 80018d2:	46c0      	nop			; (mov r8, r8)
 80018d4:	46bd      	mov	sp, r7
 80018d6:	b002      	add	sp, #8
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	46c0      	nop			; (mov r8, r8)
 80018dc:	40021000 	.word	0x40021000
 80018e0:	fffff8ff 	.word	0xfffff8ff

080018e4 <LL_RCC_SetUSARTClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetUSARTClockSource(uint32_t USARTxSource)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b082      	sub	sp, #8
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR3, (RCC_CFGR3_USART1SW << ((USARTxSource  & 0xFF000000U) >> 24U)), (USARTxSource & 0x00FFFFFFU));
 80018ec:	4b09      	ldr	r3, [pc, #36]	; (8001914 <LL_RCC_SetUSARTClockSource+0x30>)
 80018ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f0:	687a      	ldr	r2, [r7, #4]
 80018f2:	0e12      	lsrs	r2, r2, #24
 80018f4:	2103      	movs	r1, #3
 80018f6:	4091      	lsls	r1, r2
 80018f8:	000a      	movs	r2, r1
 80018fa:	43d2      	mvns	r2, r2
 80018fc:	401a      	ands	r2, r3
 80018fe:	0011      	movs	r1, r2
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	021b      	lsls	r3, r3, #8
 8001904:	0a1a      	lsrs	r2, r3, #8
 8001906:	4b03      	ldr	r3, [pc, #12]	; (8001914 <LL_RCC_SetUSARTClockSource+0x30>)
 8001908:	430a      	orrs	r2, r1
 800190a:	631a      	str	r2, [r3, #48]	; 0x30
}
 800190c:	46c0      	nop			; (mov r8, r8)
 800190e:	46bd      	mov	sp, r7
 8001910:	b002      	add	sp, #8
 8001912:	bd80      	pop	{r7, pc}
 8001914:	40021000 	.word	0x40021000

08001918 <LL_APB1_GRP1_EnableClock>:
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b084      	sub	sp, #16
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8001920:	4b07      	ldr	r3, [pc, #28]	; (8001940 <LL_APB1_GRP1_EnableClock+0x28>)
 8001922:	69d9      	ldr	r1, [r3, #28]
 8001924:	4b06      	ldr	r3, [pc, #24]	; (8001940 <LL_APB1_GRP1_EnableClock+0x28>)
 8001926:	687a      	ldr	r2, [r7, #4]
 8001928:	430a      	orrs	r2, r1
 800192a:	61da      	str	r2, [r3, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800192c:	4b04      	ldr	r3, [pc, #16]	; (8001940 <LL_APB1_GRP1_EnableClock+0x28>)
 800192e:	69db      	ldr	r3, [r3, #28]
 8001930:	687a      	ldr	r2, [r7, #4]
 8001932:	4013      	ands	r3, r2
 8001934:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001936:	68fb      	ldr	r3, [r7, #12]
}
 8001938:	46c0      	nop			; (mov r8, r8)
 800193a:	46bd      	mov	sp, r7
 800193c:	b004      	add	sp, #16
 800193e:	bd80      	pop	{r7, pc}
 8001940:	40021000 	.word	0x40021000

08001944 <LL_APB1_GRP2_EnableClock>:
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b084      	sub	sp, #16
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 800194c:	4b07      	ldr	r3, [pc, #28]	; (800196c <LL_APB1_GRP2_EnableClock+0x28>)
 800194e:	6999      	ldr	r1, [r3, #24]
 8001950:	4b06      	ldr	r3, [pc, #24]	; (800196c <LL_APB1_GRP2_EnableClock+0x28>)
 8001952:	687a      	ldr	r2, [r7, #4]
 8001954:	430a      	orrs	r2, r1
 8001956:	619a      	str	r2, [r3, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001958:	4b04      	ldr	r3, [pc, #16]	; (800196c <LL_APB1_GRP2_EnableClock+0x28>)
 800195a:	699b      	ldr	r3, [r3, #24]
 800195c:	687a      	ldr	r2, [r7, #4]
 800195e:	4013      	ands	r3, r2
 8001960:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001962:	68fb      	ldr	r3, [r7, #12]
}
 8001964:	46c0      	nop			; (mov r8, r8)
 8001966:	46bd      	mov	sp, r7
 8001968:	b004      	add	sp, #16
 800196a:	bd80      	pop	{r7, pc}
 800196c:	40021000 	.word	0x40021000

08001970 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b082      	sub	sp, #8
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8001978:	4b06      	ldr	r3, [pc, #24]	; (8001994 <LL_FLASH_SetLatency+0x24>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	2201      	movs	r2, #1
 800197e:	4393      	bics	r3, r2
 8001980:	0019      	movs	r1, r3
 8001982:	4b04      	ldr	r3, [pc, #16]	; (8001994 <LL_FLASH_SetLatency+0x24>)
 8001984:	687a      	ldr	r2, [r7, #4]
 8001986:	430a      	orrs	r2, r1
 8001988:	601a      	str	r2, [r3, #0]
}
 800198a:	46c0      	nop			; (mov r8, r8)
 800198c:	46bd      	mov	sp, r7
 800198e:	b002      	add	sp, #8
 8001990:	bd80      	pop	{r7, pc}
 8001992:	46c0      	nop			; (mov r8, r8)
 8001994:	40022000 	.word	0x40022000

08001998 <LL_FLASH_GetLatency>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 800199c:	4b03      	ldr	r3, [pc, #12]	; (80019ac <LL_FLASH_GetLatency+0x14>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	2201      	movs	r2, #1
 80019a2:	4013      	ands	r3, r2
}
 80019a4:	0018      	movs	r0, r3
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	46c0      	nop			; (mov r8, r8)
 80019ac:	40022000 	.word	0x40022000

080019b0 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b082      	sub	sp, #8
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	2201      	movs	r2, #1
 80019be:	431a      	orrs	r2, r3
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	601a      	str	r2, [r3, #0]
}
 80019c4:	46c0      	nop			; (mov r8, r8)
 80019c6:	46bd      	mov	sp, r7
 80019c8:	b002      	add	sp, #8
 80019ca:	bd80      	pop	{r7, pc}

080019cc <LL_TIM_EnableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_EnableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b082      	sub	sp, #8
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	68db      	ldr	r3, [r3, #12]
 80019d8:	2201      	movs	r2, #1
 80019da:	431a      	orrs	r2, r3
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	60da      	str	r2, [r3, #12]
}
 80019e0:	46c0      	nop			; (mov r8, r8)
 80019e2:	46bd      	mov	sp, r7
 80019e4:	b002      	add	sp, #8
 80019e6:	bd80      	pop	{r7, pc}

080019e8 <LL_GPIO_ReadInputPort>:
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b082      	sub	sp, #8
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(GPIOx->IDR));
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	691b      	ldr	r3, [r3, #16]
}
 80019f4:	0018      	movs	r0, r3
 80019f6:	46bd      	mov	sp, r7
 80019f8:	b002      	add	sp, #8
 80019fa:	bd80      	pop	{r7, pc}

080019fc <LL_GPIO_SetOutputPin>:
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b082      	sub	sp, #8
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
 8001a04:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	683a      	ldr	r2, [r7, #0]
 8001a0a:	619a      	str	r2, [r3, #24]
}
 8001a0c:	46c0      	nop			; (mov r8, r8)
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	b002      	add	sp, #8
 8001a12:	bd80      	pop	{r7, pc}

08001a14 <LL_GPIO_ResetOutputPin>:
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b082      	sub	sp, #8
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
 8001a1c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	683a      	ldr	r2, [r7, #0]
 8001a22:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001a24:	46c0      	nop			; (mov r8, r8)
 8001a26:	46bd      	mov	sp, r7
 8001a28:	b002      	add	sp, #8
 8001a2a:	bd80      	pop	{r7, pc}

08001a2c <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b084      	sub	sp, #16
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
 8001a34:	6039      	str	r1, [r7, #0]
  uint32_t odr = READ_REG(GPIOx->ODR);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	695b      	ldr	r3, [r3, #20]
 8001a3a:	60fb      	str	r3, [r7, #12]
  WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	683a      	ldr	r2, [r7, #0]
 8001a40:	4013      	ands	r3, r2
 8001a42:	041a      	lsls	r2, r3, #16
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	43db      	mvns	r3, r3
 8001a48:	6839      	ldr	r1, [r7, #0]
 8001a4a:	400b      	ands	r3, r1
 8001a4c:	431a      	orrs	r2, r3
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	619a      	str	r2, [r3, #24]
}
 8001a52:	46c0      	nop			; (mov r8, r8)
 8001a54:	46bd      	mov	sp, r7
 8001a56:	b004      	add	sp, #16
 8001a58:	bd80      	pop	{r7, pc}
	...

08001a5c <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	af00      	add	r7, sp, #0

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */

	LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_SYSCFG);
 8001a60:	2001      	movs	r0, #1
 8001a62:	f7ff ff6f 	bl	8001944 <LL_APB1_GRP2_EnableClock>
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8001a66:	2380      	movs	r3, #128	; 0x80
 8001a68:	055b      	lsls	r3, r3, #21
 8001a6a:	0018      	movs	r0, r3
 8001a6c:	f7ff ff54 	bl	8001918 <LL_APB1_GRP1_EnableClock>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001a70:	f000 f8e6 	bl	8001c40 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001a74:	f7ff fb62 	bl	800113c <MX_GPIO_Init>
	MX_DMA_Init();
 8001a78:	f7ff face 	bl	8001018 <MX_DMA_Init>
	MX_ADC_Init();
 8001a7c:	f7ff f95a 	bl	8000d34 <MX_ADC_Init>
	MX_USART1_UART_Init();
 8001a80:	f000 fe36 	bl	80026f0 <MX_USART1_UART_Init>
	MX_TIM3_Init();
 8001a84:	f000 fd0a 	bl	800249c <MX_TIM3_Init>
	/* USER CODE BEGIN 2 */
	//print("start\r\n");

	//leds_test();
	adc_init();
 8001a88:	f000 fb12 	bl	80020b0 <adc_init>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		if(check_err()){
 8001a8c:	f000 f93e 	bl	8001d0c <check_err>
 8001a90:	1e03      	subs	r3, r0, #0
 8001a92:	d061      	beq.n	8001b58 <main+0xfc>
			if(working){
 8001a94:	4b61      	ldr	r3, [pc, #388]	; (8001c1c <main+0x1c0>)
 8001a96:	781b      	ldrb	r3, [r3, #0]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d01f      	beq.n	8001adc <main+0x80>
				if(!mute)
 8001a9c:	4b60      	ldr	r3, [pc, #384]	; (8001c20 <main+0x1c4>)
 8001a9e:	781b      	ldrb	r3, [r3, #0]
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	4053      	eors	r3, r2
 8001aa4:	b2db      	uxtb	r3, r3
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d012      	beq.n	8001ad0 <main+0x74>
				{
					siren_on;
 8001aaa:	4b5e      	ldr	r3, [pc, #376]	; (8001c24 <main+0x1c8>)
 8001aac:	2140      	movs	r1, #64	; 0x40
 8001aae:	0018      	movs	r0, r3
 8001ab0:	f7ff ffa4 	bl	80019fc <LL_GPIO_SetOutputPin>
					if(isMutePressed){
 8001ab4:	2390      	movs	r3, #144	; 0x90
 8001ab6:	05db      	lsls	r3, r3, #23
 8001ab8:	0018      	movs	r0, r3
 8001aba:	f7ff ff95 	bl	80019e8 <LL_GPIO_ReadInputPort>
 8001abe:	0002      	movs	r2, r0
 8001ac0:	2380      	movs	r3, #128	; 0x80
 8001ac2:	021b      	lsls	r3, r3, #8
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	d130      	bne.n	8001b2a <main+0xce>
						mute=1;
 8001ac8:	4b55      	ldr	r3, [pc, #340]	; (8001c20 <main+0x1c4>)
 8001aca:	2201      	movs	r2, #1
 8001acc:	701a      	strb	r2, [r3, #0]
 8001ace:	e02c      	b.n	8001b2a <main+0xce>
					}
				}
				else
				{
					siren_off;
 8001ad0:	4b54      	ldr	r3, [pc, #336]	; (8001c24 <main+0x1c8>)
 8001ad2:	2140      	movs	r1, #64	; 0x40
 8001ad4:	0018      	movs	r0, r3
 8001ad6:	f7ff ff9d 	bl	8001a14 <LL_GPIO_ResetOutputPin>
 8001ada:	e026      	b.n	8001b2a <main+0xce>
				}
			}else{
				if(isStartPressed){
 8001adc:	4b51      	ldr	r3, [pc, #324]	; (8001c24 <main+0x1c8>)
 8001ade:	0018      	movs	r0, r3
 8001ae0:	f7ff ff82 	bl	80019e8 <LL_GPIO_ReadInputPort>
 8001ae4:	0002      	movs	r2, r0
 8001ae6:	2308      	movs	r3, #8
 8001ae8:	4013      	ands	r3, r2
 8001aea:	d11e      	bne.n	8001b2a <main+0xce>
					if(!mute)
 8001aec:	4b4c      	ldr	r3, [pc, #304]	; (8001c20 <main+0x1c4>)
 8001aee:	781b      	ldrb	r3, [r3, #0]
 8001af0:	2201      	movs	r2, #1
 8001af2:	4053      	eors	r3, r2
 8001af4:	b2db      	uxtb	r3, r3
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d012      	beq.n	8001b20 <main+0xc4>
					{
						siren_on;
 8001afa:	4b4a      	ldr	r3, [pc, #296]	; (8001c24 <main+0x1c8>)
 8001afc:	2140      	movs	r1, #64	; 0x40
 8001afe:	0018      	movs	r0, r3
 8001b00:	f7ff ff7c 	bl	80019fc <LL_GPIO_SetOutputPin>
						if(isMutePressed){
 8001b04:	2390      	movs	r3, #144	; 0x90
 8001b06:	05db      	lsls	r3, r3, #23
 8001b08:	0018      	movs	r0, r3
 8001b0a:	f7ff ff6d 	bl	80019e8 <LL_GPIO_ReadInputPort>
 8001b0e:	0002      	movs	r2, r0
 8001b10:	2380      	movs	r3, #128	; 0x80
 8001b12:	021b      	lsls	r3, r3, #8
 8001b14:	4013      	ands	r3, r2
 8001b16:	d108      	bne.n	8001b2a <main+0xce>
							mute=1;
 8001b18:	4b41      	ldr	r3, [pc, #260]	; (8001c20 <main+0x1c4>)
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	701a      	strb	r2, [r3, #0]
 8001b1e:	e004      	b.n	8001b2a <main+0xce>
						}
					}
					else
					{
						siren_off;
 8001b20:	4b40      	ldr	r3, [pc, #256]	; (8001c24 <main+0x1c8>)
 8001b22:	2140      	movs	r1, #64	; 0x40
 8001b24:	0018      	movs	r0, r3
 8001b26:	f7ff ff75 	bl	8001a14 <LL_GPIO_ResetOutputPin>
					}
				}
			}
			if(mscnt%250==0)
 8001b2a:	4b3f      	ldr	r3, [pc, #252]	; (8001c28 <main+0x1cc>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	21fa      	movs	r1, #250	; 0xfa
 8001b30:	0018      	movs	r0, r3
 8001b32:	f7fe fb6f 	bl	8000214 <__aeabi_uidivmod>
 8001b36:	1e0b      	subs	r3, r1, #0
 8001b38:	d15e      	bne.n	8001bf8 <main+0x19c>
			{
				pwr_off;
 8001b3a:	2380      	movs	r3, #128	; 0x80
 8001b3c:	01db      	lsls	r3, r3, #7
 8001b3e:	4a3b      	ldr	r2, [pc, #236]	; (8001c2c <main+0x1d0>)
 8001b40:	0019      	movs	r1, r3
 8001b42:	0010      	movs	r0, r2
 8001b44:	f7ff ff66 	bl	8001a14 <LL_GPIO_ResetOutputPin>
				er_toggle;
 8001b48:	2380      	movs	r3, #128	; 0x80
 8001b4a:	019b      	lsls	r3, r3, #6
 8001b4c:	4a37      	ldr	r2, [pc, #220]	; (8001c2c <main+0x1d0>)
 8001b4e:	0019      	movs	r1, r3
 8001b50:	0010      	movs	r0, r2
 8001b52:	f7ff ff6b 	bl	8001a2c <LL_GPIO_TogglePin>
 8001b56:	e04f      	b.n	8001bf8 <main+0x19c>
			}


		}else{
			er_off;
 8001b58:	2380      	movs	r3, #128	; 0x80
 8001b5a:	019b      	lsls	r3, r3, #6
 8001b5c:	4a33      	ldr	r2, [pc, #204]	; (8001c2c <main+0x1d0>)
 8001b5e:	0019      	movs	r1, r3
 8001b60:	0010      	movs	r0, r2
 8001b62:	f7ff ff57 	bl	8001a14 <LL_GPIO_ResetOutputPin>
			siren_off;
 8001b66:	4b2f      	ldr	r3, [pc, #188]	; (8001c24 <main+0x1c8>)
 8001b68:	2140      	movs	r1, #64	; 0x40
 8001b6a:	0018      	movs	r0, r3
 8001b6c:	f7ff ff52 	bl	8001a14 <LL_GPIO_ResetOutputPin>
			mute=0;
 8001b70:	4b2b      	ldr	r3, [pc, #172]	; (8001c20 <main+0x1c4>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	701a      	strb	r2, [r3, #0]
			if(working){
 8001b76:	4b29      	ldr	r3, [pc, #164]	; (8001c1c <main+0x1c0>)
 8001b78:	781b      	ldrb	r3, [r3, #0]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d00f      	beq.n	8001b9e <main+0x142>
				if(mscnt%250==0)
 8001b7e:	4b2a      	ldr	r3, [pc, #168]	; (8001c28 <main+0x1cc>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	21fa      	movs	r1, #250	; 0xfa
 8001b84:	0018      	movs	r0, r3
 8001b86:	f7fe fb45 	bl	8000214 <__aeabi_uidivmod>
 8001b8a:	1e0b      	subs	r3, r1, #0
 8001b8c:	d134      	bne.n	8001bf8 <main+0x19c>
				{
					pwr_toggle;
 8001b8e:	2380      	movs	r3, #128	; 0x80
 8001b90:	01db      	lsls	r3, r3, #7
 8001b92:	4a26      	ldr	r2, [pc, #152]	; (8001c2c <main+0x1d0>)
 8001b94:	0019      	movs	r1, r3
 8001b96:	0010      	movs	r0, r2
 8001b98:	f7ff ff48 	bl	8001a2c <LL_GPIO_TogglePin>
 8001b9c:	e02c      	b.n	8001bf8 <main+0x19c>
				}
			}else{
				pwr_on;
 8001b9e:	2380      	movs	r3, #128	; 0x80
 8001ba0:	01db      	lsls	r3, r3, #7
 8001ba2:	4a22      	ldr	r2, [pc, #136]	; (8001c2c <main+0x1d0>)
 8001ba4:	0019      	movs	r1, r3
 8001ba6:	0010      	movs	r0, r2
 8001ba8:	f7ff ff28 	bl	80019fc <LL_GPIO_SetOutputPin>
				if(isStartPressed){
 8001bac:	4b1d      	ldr	r3, [pc, #116]	; (8001c24 <main+0x1c8>)
 8001bae:	0018      	movs	r0, r3
 8001bb0:	f7ff ff1a 	bl	80019e8 <LL_GPIO_ReadInputPort>
 8001bb4:	0002      	movs	r2, r0
 8001bb6:	2308      	movs	r3, #8
 8001bb8:	4013      	ands	r3, r2
 8001bba:	d115      	bne.n	8001be8 <main+0x18c>
					if(start_cnt<20000){
 8001bbc:	4b1c      	ldr	r3, [pc, #112]	; (8001c30 <main+0x1d4>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a1c      	ldr	r2, [pc, #112]	; (8001c34 <main+0x1d8>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d805      	bhi.n	8001bd2 <main+0x176>
						start_on;
 8001bc6:	4b17      	ldr	r3, [pc, #92]	; (8001c24 <main+0x1c8>)
 8001bc8:	2110      	movs	r1, #16
 8001bca:	0018      	movs	r0, r3
 8001bcc:	f7ff ff16 	bl	80019fc <LL_GPIO_SetOutputPin>
 8001bd0:	e004      	b.n	8001bdc <main+0x180>
					}else{
						start_off;
 8001bd2:	4b14      	ldr	r3, [pc, #80]	; (8001c24 <main+0x1c8>)
 8001bd4:	2110      	movs	r1, #16
 8001bd6:	0018      	movs	r0, r3
 8001bd8:	f7ff ff1c 	bl	8001a14 <LL_GPIO_ResetOutputPin>
					}
					start_cnt++;
 8001bdc:	4b14      	ldr	r3, [pc, #80]	; (8001c30 <main+0x1d4>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	1c5a      	adds	r2, r3, #1
 8001be2:	4b13      	ldr	r3, [pc, #76]	; (8001c30 <main+0x1d4>)
 8001be4:	601a      	str	r2, [r3, #0]
 8001be6:	e007      	b.n	8001bf8 <main+0x19c>
				}else{
					start_off;
 8001be8:	4b0e      	ldr	r3, [pc, #56]	; (8001c24 <main+0x1c8>)
 8001bea:	2110      	movs	r1, #16
 8001bec:	0018      	movs	r0, r3
 8001bee:	f7ff ff11 	bl	8001a14 <LL_GPIO_ResetOutputPin>
					start_cnt=0;
 8001bf2:	4b0f      	ldr	r3, [pc, #60]	; (8001c30 <main+0x1d4>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	601a      	str	r2, [r3, #0]
				}
			}
		}


		while(thick==old_thick);
 8001bf8:	46c0      	nop			; (mov r8, r8)
 8001bfa:	4b0f      	ldr	r3, [pc, #60]	; (8001c38 <main+0x1dc>)
 8001bfc:	681a      	ldr	r2, [r3, #0]
 8001bfe:	4b0f      	ldr	r3, [pc, #60]	; (8001c3c <main+0x1e0>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	429a      	cmp	r2, r3
 8001c04:	d0f9      	beq.n	8001bfa <main+0x19e>
		old_thick=thick;
 8001c06:	4b0c      	ldr	r3, [pc, #48]	; (8001c38 <main+0x1dc>)
 8001c08:	681a      	ldr	r2, [r3, #0]
 8001c0a:	4b0c      	ldr	r3, [pc, #48]	; (8001c3c <main+0x1e0>)
 8001c0c:	601a      	str	r2, [r3, #0]
		mscnt++;
 8001c0e:	4b06      	ldr	r3, [pc, #24]	; (8001c28 <main+0x1cc>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	1c5a      	adds	r2, r3, #1
 8001c14:	4b04      	ldr	r3, [pc, #16]	; (8001c28 <main+0x1cc>)
 8001c16:	601a      	str	r2, [r3, #0]
		if(check_err()){
 8001c18:	e738      	b.n	8001a8c <main+0x30>
 8001c1a:	46c0      	nop			; (mov r8, r8)
 8001c1c:	2000003f 	.word	0x2000003f
 8001c20:	20000034 	.word	0x20000034
 8001c24:	48000400 	.word	0x48000400
 8001c28:	2000002c 	.word	0x2000002c
 8001c2c:	48000800 	.word	0x48000800
 8001c30:	20000030 	.word	0x20000030
 8001c34:	00004e1f 	.word	0x00004e1f
 8001c38:	20000040 	.word	0x20000040
 8001c3c:	20000028 	.word	0x20000028

08001c40 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	af00      	add	r7, sp, #0
	LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 8001c44:	2000      	movs	r0, #0
 8001c46:	f7ff fe93 	bl	8001970 <LL_FLASH_SetLatency>
	while(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_0)
 8001c4a:	46c0      	nop			; (mov r8, r8)
 8001c4c:	f7ff fea4 	bl	8001998 <LL_FLASH_GetLatency>
 8001c50:	1e03      	subs	r3, r0, #0
 8001c52:	d1fb      	bne.n	8001c4c <SystemClock_Config+0xc>
	{
	}
	LL_RCC_HSI_Enable();
 8001c54:	f7ff fd8a 	bl	800176c <LL_RCC_HSI_Enable>

	/* Wait till HSI is ready */
	while(LL_RCC_HSI_IsReady() != 1)
 8001c58:	46c0      	nop			; (mov r8, r8)
 8001c5a:	f7ff fd95 	bl	8001788 <LL_RCC_HSI_IsReady>
 8001c5e:	0003      	movs	r3, r0
 8001c60:	2b01      	cmp	r3, #1
 8001c62:	d1fa      	bne.n	8001c5a <SystemClock_Config+0x1a>
	{

	}
	LL_RCC_HSI_SetCalibTrimming(16);
 8001c64:	2010      	movs	r0, #16
 8001c66:	f7ff fd9f 	bl	80017a8 <LL_RCC_HSI_SetCalibTrimming>
	LL_RCC_HSI14_Enable();
 8001c6a:	f7ff fdb1 	bl	80017d0 <LL_RCC_HSI14_Enable>

	/* Wait till HSI14 is ready */
	while(LL_RCC_HSI14_IsReady() != 1)
 8001c6e:	46c0      	nop			; (mov r8, r8)
 8001c70:	f7ff fdbc 	bl	80017ec <LL_RCC_HSI14_IsReady>
 8001c74:	0003      	movs	r3, r0
 8001c76:	2b01      	cmp	r3, #1
 8001c78:	d1fa      	bne.n	8001c70 <SystemClock_Config+0x30>
	{

	}
	LL_RCC_HSI14_SetCalibTrimming(16);
 8001c7a:	2010      	movs	r0, #16
 8001c7c:	f7ff fdd4 	bl	8001828 <LL_RCC_HSI14_SetCalibTrimming>
	LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8001c80:	2000      	movs	r0, #0
 8001c82:	f7ff fe05 	bl	8001890 <LL_RCC_SetAHBPrescaler>
	LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8001c86:	2000      	movs	r0, #0
 8001c88:	f7ff fe16 	bl	80018b8 <LL_RCC_SetAPB1Prescaler>
	LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 8001c8c:	2000      	movs	r0, #0
 8001c8e:	f7ff fddf 	bl	8001850 <LL_RCC_SetSysClkSource>

	/* Wait till System clock is ready */
	while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 8001c92:	46c0      	nop			; (mov r8, r8)
 8001c94:	f7ff fdf0 	bl	8001878 <LL_RCC_GetSysClkSource>
 8001c98:	1e03      	subs	r3, r0, #0
 8001c9a:	d1fb      	bne.n	8001c94 <SystemClock_Config+0x54>
	{

	}
	LL_Init1msTick(8000000);
 8001c9c:	4b07      	ldr	r3, [pc, #28]	; (8001cbc <SystemClock_Config+0x7c>)
 8001c9e:	0018      	movs	r0, r3
 8001ca0:	f001 fb78 	bl	8003394 <LL_Init1msTick>
	LL_SetSystemCoreClock(8000000);
 8001ca4:	4b05      	ldr	r3, [pc, #20]	; (8001cbc <SystemClock_Config+0x7c>)
 8001ca6:	0018      	movs	r0, r3
 8001ca8:	f001 fb84 	bl	80033b4 <LL_SetSystemCoreClock>
	LL_RCC_HSI14_EnableADCControl();
 8001cac:	f7ff fdae 	bl	800180c <LL_RCC_HSI14_EnableADCControl>
	LL_RCC_SetUSARTClockSource(LL_RCC_USART1_CLKSOURCE_PCLK1);
 8001cb0:	2000      	movs	r0, #0
 8001cb2:	f7ff fe17 	bl	80018e4 <LL_RCC_SetUSARTClockSource>
}
 8001cb6:	46c0      	nop			; (mov r8, r8)
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	007a1200 	.word	0x007a1200

08001cc0 <cal_min>:
	}
}
#endif


float cal_min(float*val){
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b084      	sub	sp, #16
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
	float min=val[0];
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	60fb      	str	r3, [r7, #12]
	for(int i=0;i<80;i++){
 8001cce:	2300      	movs	r3, #0
 8001cd0:	60bb      	str	r3, [r7, #8]
 8001cd2:	e013      	b.n	8001cfc <cal_min+0x3c>
		if(min>val[i])min=val[i];
 8001cd4:	68bb      	ldr	r3, [r7, #8]
 8001cd6:	009b      	lsls	r3, r3, #2
 8001cd8:	687a      	ldr	r2, [r7, #4]
 8001cda:	18d3      	adds	r3, r2, r3
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	1c19      	adds	r1, r3, #0
 8001ce0:	68f8      	ldr	r0, [r7, #12]
 8001ce2:	f7fe fb01 	bl	80002e8 <__aeabi_fcmpgt>
 8001ce6:	1e03      	subs	r3, r0, #0
 8001ce8:	d005      	beq.n	8001cf6 <cal_min+0x36>
 8001cea:	68bb      	ldr	r3, [r7, #8]
 8001cec:	009b      	lsls	r3, r3, #2
 8001cee:	687a      	ldr	r2, [r7, #4]
 8001cf0:	18d3      	adds	r3, r2, r3
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	60fb      	str	r3, [r7, #12]
	for(int i=0;i<80;i++){
 8001cf6:	68bb      	ldr	r3, [r7, #8]
 8001cf8:	3301      	adds	r3, #1
 8001cfa:	60bb      	str	r3, [r7, #8]
 8001cfc:	68bb      	ldr	r3, [r7, #8]
 8001cfe:	2b4f      	cmp	r3, #79	; 0x4f
 8001d00:	dde8      	ble.n	8001cd4 <cal_min+0x14>
	}
	return min;
 8001d02:	68fb      	ldr	r3, [r7, #12]
}
 8001d04:	1c18      	adds	r0, r3, #0
 8001d06:	46bd      	mov	sp, r7
 8001d08:	b004      	add	sp, #16
 8001d0a:	bd80      	pop	{r7, pc}

08001d0c <check_err>:

_Bool check_err(){
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b082      	sub	sp, #8
 8001d10:	af00      	add	r7, sp, #0
	_Bool flag=0;
 8001d12:	1dfb      	adds	r3, r7, #7
 8001d14:	2200      	movs	r2, #0
 8001d16:	701a      	strb	r2, [r3, #0]
	float min_sample=0;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	603b      	str	r3, [r7, #0]
	if(adc){
 8001d1c:	4bcb      	ldr	r3, [pc, #812]	; (800204c <check_err+0x340>)
 8001d1e:	781b      	ldrb	r3, [r3, #0]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d05e      	beq.n	8001de2 <check_err+0xd6>
		new_val=1;
 8001d24:	4bca      	ldr	r3, [pc, #808]	; (8002050 <check_err+0x344>)
 8001d26:	2201      	movs	r2, #1
 8001d28:	701a      	strb	r2, [r3, #0]
		vac_sample=vac_sample_int*(float)(3.3/4096);
 8001d2a:	4bca      	ldr	r3, [pc, #808]	; (8002054 <check_err+0x348>)
 8001d2c:	881b      	ldrh	r3, [r3, #0]
 8001d2e:	0018      	movs	r0, r3
 8001d30:	f7fe fce6 	bl	8000700 <__aeabi_i2f>
 8001d34:	1c03      	adds	r3, r0, #0
 8001d36:	49c8      	ldr	r1, [pc, #800]	; (8002058 <check_err+0x34c>)
 8001d38:	1c18      	adds	r0, r3, #0
 8001d3a:	f7fe fbaf 	bl	800049c <__aeabi_fmul>
 8001d3e:	1c03      	adds	r3, r0, #0
 8001d40:	1c1a      	adds	r2, r3, #0
 8001d42:	4bc6      	ldr	r3, [pc, #792]	; (800205c <check_err+0x350>)
 8001d44:	601a      	str	r2, [r3, #0]
		if(vac_sample<2.5){
 8001d46:	4bc5      	ldr	r3, [pc, #788]	; (800205c <check_err+0x350>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	49c5      	ldr	r1, [pc, #788]	; (8002060 <check_err+0x354>)
 8001d4c:	1c18      	adds	r0, r3, #0
 8001d4e:	f7fe fab7 	bl	80002c0 <__aeabi_fcmplt>
 8001d52:	1e03      	subs	r3, r0, #0
 8001d54:	d003      	beq.n	8001d5e <check_err+0x52>
			pulse=1;
 8001d56:	4bc3      	ldr	r3, [pc, #780]	; (8002064 <check_err+0x358>)
 8001d58:	2201      	movs	r2, #1
 8001d5a:	801a      	strh	r2, [r3, #0]
 8001d5c:	e017      	b.n	8001d8e <check_err+0x82>
		}else{
			if(vac_sample>2.9 && pulse){
 8001d5e:	4bbf      	ldr	r3, [pc, #764]	; (800205c <check_err+0x350>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	1c18      	adds	r0, r3, #0
 8001d64:	f7fe fe1e 	bl	80009a4 <__aeabi_f2d>
 8001d68:	4abf      	ldr	r2, [pc, #764]	; (8002068 <check_err+0x35c>)
 8001d6a:	4bc0      	ldr	r3, [pc, #768]	; (800206c <check_err+0x360>)
 8001d6c:	f7fe fa82 	bl	8000274 <__aeabi_dcmpgt>
 8001d70:	1e03      	subs	r3, r0, #0
 8001d72:	d00c      	beq.n	8001d8e <check_err+0x82>
 8001d74:	4bbb      	ldr	r3, [pc, #748]	; (8002064 <check_err+0x358>)
 8001d76:	881b      	ldrh	r3, [r3, #0]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d008      	beq.n	8001d8e <check_err+0x82>
				fr++;
 8001d7c:	4bbc      	ldr	r3, [pc, #752]	; (8002070 <check_err+0x364>)
 8001d7e:	881b      	ldrh	r3, [r3, #0]
 8001d80:	3301      	adds	r3, #1
 8001d82:	b29a      	uxth	r2, r3
 8001d84:	4bba      	ldr	r3, [pc, #744]	; (8002070 <check_err+0x364>)
 8001d86:	801a      	strh	r2, [r3, #0]
				pulse=0;
 8001d88:	4bb6      	ldr	r3, [pc, #728]	; (8002064 <check_err+0x358>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	801a      	strh	r2, [r3, #0]
			}
		}
		samples[sample_cnt++]=vac_sample;
 8001d8e:	4bb9      	ldr	r3, [pc, #740]	; (8002074 <check_err+0x368>)
 8001d90:	781b      	ldrb	r3, [r3, #0]
 8001d92:	1c5a      	adds	r2, r3, #1
 8001d94:	b2d1      	uxtb	r1, r2
 8001d96:	4ab7      	ldr	r2, [pc, #732]	; (8002074 <check_err+0x368>)
 8001d98:	7011      	strb	r1, [r2, #0]
 8001d9a:	001a      	movs	r2, r3
 8001d9c:	4baf      	ldr	r3, [pc, #700]	; (800205c <check_err+0x350>)
 8001d9e:	6819      	ldr	r1, [r3, #0]
 8001da0:	4bb5      	ldr	r3, [pc, #724]	; (8002078 <check_err+0x36c>)
 8001da2:	0092      	lsls	r2, r2, #2
 8001da4:	50d1      	str	r1, [r2, r3]
		if(sample_cnt==80){
 8001da6:	4bb3      	ldr	r3, [pc, #716]	; (8002074 <check_err+0x368>)
 8001da8:	781b      	ldrb	r3, [r3, #0]
 8001daa:	2b50      	cmp	r3, #80	; 0x50
 8001dac:	d108      	bne.n	8001dc0 <check_err+0xb4>
			sample_cnt=0;
 8001dae:	4bb1      	ldr	r3, [pc, #708]	; (8002074 <check_err+0x368>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	701a      	strb	r2, [r3, #0]
			min_sample=cal_min(samples);
 8001db4:	4bb0      	ldr	r3, [pc, #704]	; (8002078 <check_err+0x36c>)
 8001db6:	0018      	movs	r0, r3
 8001db8:	f7ff ff82 	bl	8001cc0 <cal_min>
 8001dbc:	1c03      	adds	r3, r0, #0
 8001dbe:	603b      	str	r3, [r7, #0]
			//if(min_sample)
		}



		vadc=vadc_int*(float)(3.3/4096);
 8001dc0:	4bae      	ldr	r3, [pc, #696]	; (800207c <check_err+0x370>)
 8001dc2:	881b      	ldrh	r3, [r3, #0]
 8001dc4:	0018      	movs	r0, r3
 8001dc6:	f7fe fc9b 	bl	8000700 <__aeabi_i2f>
 8001dca:	1c03      	adds	r3, r0, #0
 8001dcc:	49a2      	ldr	r1, [pc, #648]	; (8002058 <check_err+0x34c>)
 8001dce:	1c18      	adds	r0, r3, #0
 8001dd0:	f7fe fb64 	bl	800049c <__aeabi_fmul>
 8001dd4:	1c03      	adds	r3, r0, #0
 8001dd6:	1c1a      	adds	r2, r3, #0
 8001dd8:	4ba9      	ldr	r3, [pc, #676]	; (8002080 <check_err+0x374>)
 8001dda:	601a      	str	r2, [r3, #0]
		adc=0;
 8001ddc:	4b9b      	ldr	r3, [pc, #620]	; (800204c <check_err+0x340>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	701a      	strb	r2, [r3, #0]

	}
	if(working){
 8001de2:	4ba8      	ldr	r3, [pc, #672]	; (8002084 <check_err+0x378>)
 8001de4:	781b      	ldrb	r3, [r3, #0]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d100      	bne.n	8001dec <check_err+0xe0>
 8001dea:	e08c      	b.n	8001f06 <check_err+0x1fa>
		if(oil_err){
 8001dec:	2390      	movs	r3, #144	; 0x90
 8001dee:	05db      	lsls	r3, r3, #23
 8001df0:	0018      	movs	r0, r3
 8001df2:	f7ff fdf9 	bl	80019e8 <LL_GPIO_ReadInputPort>
 8001df6:	0002      	movs	r2, r0
 8001df8:	2380      	movs	r3, #128	; 0x80
 8001dfa:	4013      	ands	r3, r2
 8001dfc:	d108      	bne.n	8001e10 <check_err+0x104>
			oil_on;
 8001dfe:	4ba2      	ldr	r3, [pc, #648]	; (8002088 <check_err+0x37c>)
 8001e00:	2104      	movs	r1, #4
 8001e02:	0018      	movs	r0, r3
 8001e04:	f7ff fdfa 	bl	80019fc <LL_GPIO_SetOutputPin>
			flag=1;
 8001e08:	1dfb      	adds	r3, r7, #7
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	701a      	strb	r2, [r3, #0]
 8001e0e:	e004      	b.n	8001e1a <check_err+0x10e>
		}else{
			oil_off;
 8001e10:	4b9d      	ldr	r3, [pc, #628]	; (8002088 <check_err+0x37c>)
 8001e12:	2104      	movs	r1, #4
 8001e14:	0018      	movs	r0, r3
 8001e16:	f7ff fdfd 	bl	8001a14 <LL_GPIO_ResetOutputPin>
		}
		if(new_val){
 8001e1a:	4b8d      	ldr	r3, [pc, #564]	; (8002050 <check_err+0x344>)
 8001e1c:	781b      	ldrb	r3, [r3, #0]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d010      	beq.n	8001e44 <check_err+0x138>
			new_val=0;
 8001e22:	4b8b      	ldr	r3, [pc, #556]	; (8002050 <check_err+0x344>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	701a      	strb	r2, [r3, #0]
			vbat=vbat_int*(float)(3.3/4096);
 8001e28:	4b98      	ldr	r3, [pc, #608]	; (800208c <check_err+0x380>)
 8001e2a:	881b      	ldrh	r3, [r3, #0]
 8001e2c:	0018      	movs	r0, r3
 8001e2e:	f7fe fc67 	bl	8000700 <__aeabi_i2f>
 8001e32:	1c03      	adds	r3, r0, #0
 8001e34:	4988      	ldr	r1, [pc, #544]	; (8002058 <check_err+0x34c>)
 8001e36:	1c18      	adds	r0, r3, #0
 8001e38:	f7fe fb30 	bl	800049c <__aeabi_fmul>
 8001e3c:	1c03      	adds	r3, r0, #0
 8001e3e:	1c1a      	adds	r2, r3, #0
 8001e40:	4b93      	ldr	r3, [pc, #588]	; (8002090 <check_err+0x384>)
 8001e42:	601a      	str	r2, [r3, #0]
//			vbat*=5.54;
//			vbat+=0.6;
		}
		if(vbat<vdyn_min || dyn_err){
 8001e44:	4b92      	ldr	r3, [pc, #584]	; (8002090 <check_err+0x384>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	1c18      	adds	r0, r3, #0
 8001e4a:	f7fe fdab 	bl	80009a4 <__aeabi_f2d>
 8001e4e:	4a91      	ldr	r2, [pc, #580]	; (8002094 <check_err+0x388>)
 8001e50:	4b91      	ldr	r3, [pc, #580]	; (8002098 <check_err+0x38c>)
 8001e52:	f7fe f9fb 	bl	800024c <__aeabi_dcmplt>
 8001e56:	1e03      	subs	r3, r0, #0
 8001e58:	d108      	bne.n	8001e6c <check_err+0x160>
 8001e5a:	4b8b      	ldr	r3, [pc, #556]	; (8002088 <check_err+0x37c>)
 8001e5c:	0018      	movs	r0, r3
 8001e5e:	f7ff fdc3 	bl	80019e8 <LL_GPIO_ReadInputPort>
 8001e62:	0002      	movs	r2, r0
 8001e64:	2380      	movs	r3, #128	; 0x80
 8001e66:	01db      	lsls	r3, r3, #7
 8001e68:	4013      	ands	r3, r2
 8001e6a:	d10a      	bne.n	8001e82 <check_err+0x176>
			bat_on;
 8001e6c:	2380      	movs	r3, #128	; 0x80
 8001e6e:	011b      	lsls	r3, r3, #4
 8001e70:	4a85      	ldr	r2, [pc, #532]	; (8002088 <check_err+0x37c>)
 8001e72:	0019      	movs	r1, r3
 8001e74:	0010      	movs	r0, r2
 8001e76:	f7ff fdc1 	bl	80019fc <LL_GPIO_SetOutputPin>
			flag=1;
 8001e7a:	1dfb      	adds	r3, r7, #7
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	701a      	strb	r2, [r3, #0]
 8001e80:	e006      	b.n	8001e90 <check_err+0x184>
		}else{
			bat_off;
 8001e82:	2380      	movs	r3, #128	; 0x80
 8001e84:	011b      	lsls	r3, r3, #4
 8001e86:	4a80      	ldr	r2, [pc, #512]	; (8002088 <check_err+0x37c>)
 8001e88:	0019      	movs	r1, r3
 8001e8a:	0010      	movs	r0, r2
 8001e8c:	f7ff fdc2 	bl	8001a14 <LL_GPIO_ResetOutputPin>
		}

		if(min_sample<vac_min || min_sample>vac_max){
 8001e90:	6838      	ldr	r0, [r7, #0]
 8001e92:	f7fe fd87 	bl	80009a4 <__aeabi_f2d>
 8001e96:	4a81      	ldr	r2, [pc, #516]	; (800209c <check_err+0x390>)
 8001e98:	4b81      	ldr	r3, [pc, #516]	; (80020a0 <check_err+0x394>)
 8001e9a:	f7fe f9d7 	bl	800024c <__aeabi_dcmplt>
 8001e9e:	1e03      	subs	r3, r0, #0
 8001ea0:	d108      	bne.n	8001eb4 <check_err+0x1a8>
 8001ea2:	6838      	ldr	r0, [r7, #0]
 8001ea4:	f7fe fd7e 	bl	80009a4 <__aeabi_f2d>
 8001ea8:	4a6f      	ldr	r2, [pc, #444]	; (8002068 <check_err+0x35c>)
 8001eaa:	4b70      	ldr	r3, [pc, #448]	; (800206c <check_err+0x360>)
 8001eac:	f7fe f9e2 	bl	8000274 <__aeabi_dcmpgt>
 8001eb0:	1e03      	subs	r3, r0, #0
 8001eb2:	d00a      	beq.n	8001eca <check_err+0x1be>
			vac_on;
 8001eb4:	2380      	movs	r3, #128	; 0x80
 8001eb6:	005b      	lsls	r3, r3, #1
 8001eb8:	4a73      	ldr	r2, [pc, #460]	; (8002088 <check_err+0x37c>)
 8001eba:	0019      	movs	r1, r3
 8001ebc:	0010      	movs	r0, r2
 8001ebe:	f7ff fd9d 	bl	80019fc <LL_GPIO_SetOutputPin>
			flag=1;
 8001ec2:	1dfb      	adds	r3, r7, #7
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	701a      	strb	r2, [r3, #0]
 8001ec8:	e006      	b.n	8001ed8 <check_err+0x1cc>
		}else{
			vac_off;
 8001eca:	2380      	movs	r3, #128	; 0x80
 8001ecc:	005b      	lsls	r3, r3, #1
 8001ece:	4a6e      	ldr	r2, [pc, #440]	; (8002088 <check_err+0x37c>)
 8001ed0:	0019      	movs	r1, r3
 8001ed2:	0010      	movs	r0, r2
 8001ed4:	f7ff fd9e 	bl	8001a14 <LL_GPIO_ResetOutputPin>
		}

		if(freq<195||freq>205){
 8001ed8:	4b72      	ldr	r3, [pc, #456]	; (80020a4 <check_err+0x398>)
 8001eda:	881b      	ldrh	r3, [r3, #0]
 8001edc:	2bc2      	cmp	r3, #194	; 0xc2
 8001ede:	d903      	bls.n	8001ee8 <check_err+0x1dc>
 8001ee0:	4b70      	ldr	r3, [pc, #448]	; (80020a4 <check_err+0x398>)
 8001ee2:	881b      	ldrh	r3, [r3, #0]
 8001ee4:	2bcd      	cmp	r3, #205	; 0xcd
 8001ee6:	d908      	bls.n	8001efa <check_err+0x1ee>
			fr_on;
 8001ee8:	4b67      	ldr	r3, [pc, #412]	; (8002088 <check_err+0x37c>)
 8001eea:	2180      	movs	r1, #128	; 0x80
 8001eec:	0018      	movs	r0, r3
 8001eee:	f7ff fd85 	bl	80019fc <LL_GPIO_SetOutputPin>
			flag=1;
 8001ef2:	1dfb      	adds	r3, r7, #7
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	701a      	strb	r2, [r3, #0]
 8001ef8:	e037      	b.n	8001f6a <check_err+0x25e>
		}else{
			fr_off;
 8001efa:	4b63      	ldr	r3, [pc, #396]	; (8002088 <check_err+0x37c>)
 8001efc:	2180      	movs	r1, #128	; 0x80
 8001efe:	0018      	movs	r0, r3
 8001f00:	f7ff fd88 	bl	8001a14 <LL_GPIO_ResetOutputPin>
 8001f04:	e031      	b.n	8001f6a <check_err+0x25e>
		}
	}else{
		if(new_val){
 8001f06:	4b52      	ldr	r3, [pc, #328]	; (8002050 <check_err+0x344>)
 8001f08:	781b      	ldrb	r3, [r3, #0]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d010      	beq.n	8001f30 <check_err+0x224>
			new_val=0;
 8001f0e:	4b50      	ldr	r3, [pc, #320]	; (8002050 <check_err+0x344>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	701a      	strb	r2, [r3, #0]
			vbat=vbat_int*(float)(3.3/4096);
 8001f14:	4b5d      	ldr	r3, [pc, #372]	; (800208c <check_err+0x380>)
 8001f16:	881b      	ldrh	r3, [r3, #0]
 8001f18:	0018      	movs	r0, r3
 8001f1a:	f7fe fbf1 	bl	8000700 <__aeabi_i2f>
 8001f1e:	1c03      	adds	r3, r0, #0
 8001f20:	494d      	ldr	r1, [pc, #308]	; (8002058 <check_err+0x34c>)
 8001f22:	1c18      	adds	r0, r3, #0
 8001f24:	f7fe faba 	bl	800049c <__aeabi_fmul>
 8001f28:	1c03      	adds	r3, r0, #0
 8001f2a:	1c1a      	adds	r2, r3, #0
 8001f2c:	4b58      	ldr	r3, [pc, #352]	; (8002090 <check_err+0x384>)
 8001f2e:	601a      	str	r2, [r3, #0]
//			vbat*=5.54;
//			vbat+=0.6;
		}
		if(vbat<vbat_min){
 8001f30:	4b57      	ldr	r3, [pc, #348]	; (8002090 <check_err+0x384>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	1c18      	adds	r0, r3, #0
 8001f36:	f7fe fd35 	bl	80009a4 <__aeabi_f2d>
 8001f3a:	4a56      	ldr	r2, [pc, #344]	; (8002094 <check_err+0x388>)
 8001f3c:	4b5a      	ldr	r3, [pc, #360]	; (80020a8 <check_err+0x39c>)
 8001f3e:	f7fe f985 	bl	800024c <__aeabi_dcmplt>
 8001f42:	1e03      	subs	r3, r0, #0
 8001f44:	d00a      	beq.n	8001f5c <check_err+0x250>
			bat_on;
 8001f46:	2380      	movs	r3, #128	; 0x80
 8001f48:	011b      	lsls	r3, r3, #4
 8001f4a:	4a4f      	ldr	r2, [pc, #316]	; (8002088 <check_err+0x37c>)
 8001f4c:	0019      	movs	r1, r3
 8001f4e:	0010      	movs	r0, r2
 8001f50:	f7ff fd54 	bl	80019fc <LL_GPIO_SetOutputPin>
			flag=1;
 8001f54:	1dfb      	adds	r3, r7, #7
 8001f56:	2201      	movs	r2, #1
 8001f58:	701a      	strb	r2, [r3, #0]
 8001f5a:	e006      	b.n	8001f6a <check_err+0x25e>
		}else{
			bat_off;
 8001f5c:	2380      	movs	r3, #128	; 0x80
 8001f5e:	011b      	lsls	r3, r3, #4
 8001f60:	4a49      	ldr	r2, [pc, #292]	; (8002088 <check_err+0x37c>)
 8001f62:	0019      	movs	r1, r3
 8001f64:	0010      	movs	r0, r2
 8001f66:	f7ff fd55 	bl	8001a14 <LL_GPIO_ResetOutputPin>
		}

	}

	if(water_err){
 8001f6a:	4b47      	ldr	r3, [pc, #284]	; (8002088 <check_err+0x37c>)
 8001f6c:	0018      	movs	r0, r3
 8001f6e:	f7ff fd3b 	bl	80019e8 <LL_GPIO_ReadInputPort>
 8001f72:	0002      	movs	r2, r0
 8001f74:	2301      	movs	r3, #1
 8001f76:	4013      	ands	r3, r2
 8001f78:	d10a      	bne.n	8001f90 <check_err+0x284>
		water_on;
 8001f7a:	2380      	movs	r3, #128	; 0x80
 8001f7c:	00db      	lsls	r3, r3, #3
 8001f7e:	4a42      	ldr	r2, [pc, #264]	; (8002088 <check_err+0x37c>)
 8001f80:	0019      	movs	r1, r3
 8001f82:	0010      	movs	r0, r2
 8001f84:	f7ff fd3a 	bl	80019fc <LL_GPIO_SetOutputPin>
		flag=1;
 8001f88:	1dfb      	adds	r3, r7, #7
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	701a      	strb	r2, [r3, #0]
 8001f8e:	e006      	b.n	8001f9e <check_err+0x292>
	}else{
		water_off;
 8001f90:	2380      	movs	r3, #128	; 0x80
 8001f92:	00db      	lsls	r3, r3, #3
 8001f94:	4a3c      	ldr	r2, [pc, #240]	; (8002088 <check_err+0x37c>)
 8001f96:	0019      	movs	r1, r3
 8001f98:	0010      	movs	r0, r2
 8001f9a:	f7ff fd3b 	bl	8001a14 <LL_GPIO_ResetOutputPin>
	}

	if(feul_err){
 8001f9e:	4b3a      	ldr	r3, [pc, #232]	; (8002088 <check_err+0x37c>)
 8001fa0:	0018      	movs	r0, r3
 8001fa2:	f7ff fd21 	bl	80019e8 <LL_GPIO_ReadInputPort>
 8001fa6:	0002      	movs	r2, r0
 8001fa8:	2380      	movs	r3, #128	; 0x80
 8001faa:	021b      	lsls	r3, r3, #8
 8001fac:	4013      	ands	r3, r2
 8001fae:	d10a      	bne.n	8001fc6 <check_err+0x2ba>
		feul_on;
 8001fb0:	2380      	movs	r3, #128	; 0x80
 8001fb2:	019b      	lsls	r3, r3, #6
 8001fb4:	4a34      	ldr	r2, [pc, #208]	; (8002088 <check_err+0x37c>)
 8001fb6:	0019      	movs	r1, r3
 8001fb8:	0010      	movs	r0, r2
 8001fba:	f7ff fd1f 	bl	80019fc <LL_GPIO_SetOutputPin>
		flag=1;
 8001fbe:	1dfb      	adds	r3, r7, #7
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	701a      	strb	r2, [r3, #0]
 8001fc4:	e006      	b.n	8001fd4 <check_err+0x2c8>
	}else{
		feul_off;
 8001fc6:	2380      	movs	r3, #128	; 0x80
 8001fc8:	019b      	lsls	r3, r3, #6
 8001fca:	4a2f      	ldr	r2, [pc, #188]	; (8002088 <check_err+0x37c>)
 8001fcc:	0019      	movs	r1, r3
 8001fce:	0010      	movs	r0, r2
 8001fd0:	f7ff fd20 	bl	8001a14 <LL_GPIO_ResetOutputPin>
	}

	if(emr_err){
 8001fd4:	2390      	movs	r3, #144	; 0x90
 8001fd6:	05db      	lsls	r3, r3, #23
 8001fd8:	0018      	movs	r0, r3
 8001fda:	f7ff fd05 	bl	80019e8 <LL_GPIO_ReadInputPort>
 8001fde:	0002      	movs	r2, r0
 8001fe0:	2380      	movs	r3, #128	; 0x80
 8001fe2:	005b      	lsls	r3, r3, #1
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	d10a      	bne.n	8001ffe <check_err+0x2f2>
		emr_on;
 8001fe8:	2380      	movs	r3, #128	; 0x80
 8001fea:	015b      	lsls	r3, r3, #5
 8001fec:	4a26      	ldr	r2, [pc, #152]	; (8002088 <check_err+0x37c>)
 8001fee:	0019      	movs	r1, r3
 8001ff0:	0010      	movs	r0, r2
 8001ff2:	f7ff fd03 	bl	80019fc <LL_GPIO_SetOutputPin>
		flag=1;
 8001ff6:	1dfb      	adds	r3, r7, #7
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	701a      	strb	r2, [r3, #0]
 8001ffc:	e006      	b.n	800200c <check_err+0x300>
	}else{
		emr_off;
 8001ffe:	2380      	movs	r3, #128	; 0x80
 8002000:	015b      	lsls	r3, r3, #5
 8002002:	4a21      	ldr	r2, [pc, #132]	; (8002088 <check_err+0x37c>)
 8002004:	0019      	movs	r1, r3
 8002006:	0010      	movs	r0, r2
 8002008:	f7ff fd04 	bl	8001a14 <LL_GPIO_ResetOutputPin>
	}


	if(ol_err){
 800200c:	4b1e      	ldr	r3, [pc, #120]	; (8002088 <check_err+0x37c>)
 800200e:	0018      	movs	r0, r3
 8002010:	f7ff fcea 	bl	80019e8 <LL_GPIO_ReadInputPort>
 8002014:	0002      	movs	r2, r0
 8002016:	2302      	movs	r3, #2
 8002018:	4013      	ands	r3, r2
 800201a:	d10a      	bne.n	8002032 <check_err+0x326>
		ol_on;
 800201c:	2380      	movs	r3, #128	; 0x80
 800201e:	021b      	lsls	r3, r3, #8
 8002020:	4a22      	ldr	r2, [pc, #136]	; (80020ac <check_err+0x3a0>)
 8002022:	0019      	movs	r1, r3
 8002024:	0010      	movs	r0, r2
 8002026:	f7ff fce9 	bl	80019fc <LL_GPIO_SetOutputPin>
		flag=1;
 800202a:	1dfb      	adds	r3, r7, #7
 800202c:	2201      	movs	r2, #1
 800202e:	701a      	strb	r2, [r3, #0]
 8002030:	e006      	b.n	8002040 <check_err+0x334>
	}else{
		ol_off;
 8002032:	2380      	movs	r3, #128	; 0x80
 8002034:	021b      	lsls	r3, r3, #8
 8002036:	4a1d      	ldr	r2, [pc, #116]	; (80020ac <check_err+0x3a0>)
 8002038:	0019      	movs	r1, r3
 800203a:	0010      	movs	r0, r2
 800203c:	f7ff fcea 	bl	8001a14 <LL_GPIO_ResetOutputPin>
	}
	return flag;
 8002040:	1dfb      	adds	r3, r7, #7
 8002042:	781b      	ldrb	r3, [r3, #0]
}
 8002044:	0018      	movs	r0, r3
 8002046:	46bd      	mov	sp, r7
 8002048:	b002      	add	sp, #8
 800204a:	bd80      	pop	{r7, pc}
 800204c:	2000003e 	.word	0x2000003e
 8002050:	20000035 	.word	0x20000035
 8002054:	20000194 	.word	0x20000194
 8002058:	3a533333 	.word	0x3a533333
 800205c:	2000018c 	.word	0x2000018c
 8002060:	40200000 	.word	0x40200000
 8002064:	2000003a 	.word	0x2000003a
 8002068:	33333333 	.word	0x33333333
 800206c:	40073333 	.word	0x40073333
 8002070:	20000038 	.word	0x20000038
 8002074:	20000036 	.word	0x20000036
 8002078:	2000004c 	.word	0x2000004c
 800207c:	20000196 	.word	0x20000196
 8002080:	20000190 	.word	0x20000190
 8002084:	2000003f 	.word	0x2000003f
 8002088:	48000400 	.word	0x48000400
 800208c:	20000198 	.word	0x20000198
 8002090:	20000048 	.word	0x20000048
 8002094:	147ae148 	.word	0x147ae148
 8002098:	400147ae 	.word	0x400147ae
 800209c:	cccccccd 	.word	0xcccccccd
 80020a0:	4000cccc 	.word	0x4000cccc
 80020a4:	2000003c 	.word	0x2000003c
 80020a8:	3ffd47ae 	.word	0x3ffd47ae
 80020ac:	48000800 	.word	0x48000800

080020b0 <adc_init>:
void adc_init() {
 80020b0:	b580      	push	{r7, lr}
 80020b2:	af00      	add	r7, sp, #0
	LL_TIM_EnableCounter(TIM3);
 80020b4:	4b1f      	ldr	r3, [pc, #124]	; (8002134 <adc_init+0x84>)
 80020b6:	0018      	movs	r0, r3
 80020b8:	f7ff fc7a 	bl	80019b0 <LL_TIM_EnableCounter>
	LL_TIM_EnableIT_UPDATE(TIM3);
 80020bc:	4b1d      	ldr	r3, [pc, #116]	; (8002134 <adc_init+0x84>)
 80020be:	0018      	movs	r0, r3
 80020c0:	f7ff fc84 	bl	80019cc <LL_TIM_EnableIT_UPDATE>
	LL_ADC_StartCalibration(ADC1);
 80020c4:	4b1c      	ldr	r3, [pc, #112]	; (8002138 <adc_init+0x88>)
 80020c6:	0018      	movs	r0, r3
 80020c8:	f7ff fa8e 	bl	80015e8 <LL_ADC_StartCalibration>
	while (LL_ADC_IsCalibrationOnGoing(ADC1));
 80020cc:	46c0      	nop			; (mov r8, r8)
 80020ce:	4b1a      	ldr	r3, [pc, #104]	; (8002138 <adc_init+0x88>)
 80020d0:	0018      	movs	r0, r3
 80020d2:	f7ff fa9d 	bl	8001610 <LL_ADC_IsCalibrationOnGoing>
 80020d6:	1e03      	subs	r3, r0, #0
 80020d8:	d1f9      	bne.n	80020ce <adc_init+0x1e>

	LL_ADC_Enable(ADC1);
 80020da:	4b17      	ldr	r3, [pc, #92]	; (8002138 <adc_init+0x88>)
 80020dc:	0018      	movs	r0, r3
 80020de:	f7ff fa71 	bl	80015c4 <LL_ADC_Enable>
	LL_ADC_REG_StartConversion(ADC1);
 80020e2:	4b15      	ldr	r3, [pc, #84]	; (8002138 <adc_init+0x88>)
 80020e4:	0018      	movs	r0, r3
 80020e6:	f7ff faa7 	bl	8001638 <LL_ADC_REG_StartConversion>
	LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_1, 3);
 80020ea:	4b14      	ldr	r3, [pc, #80]	; (800213c <adc_init+0x8c>)
 80020ec:	2203      	movs	r2, #3
 80020ee:	2101      	movs	r1, #1
 80020f0:	0018      	movs	r0, r3
 80020f2:	f7ff fad1 	bl	8001698 <LL_DMA_SetDataLength>
	LL_DMA_SetPeriphAddress(DMA1, LL_DMA_CHANNEL_1,
 80020f6:	4b10      	ldr	r3, [pc, #64]	; (8002138 <adc_init+0x88>)
 80020f8:	2100      	movs	r1, #0
 80020fa:	0018      	movs	r0, r3
 80020fc:	f7ff fa56 	bl	80015ac <LL_ADC_DMA_GetRegAddr>
 8002100:	0002      	movs	r2, r0
 8002102:	4b0e      	ldr	r3, [pc, #56]	; (800213c <adc_init+0x8c>)
 8002104:	2101      	movs	r1, #1
 8002106:	0018      	movs	r0, r3
 8002108:	f7ff fafc 	bl	8001704 <LL_DMA_SetPeriphAddress>
			LL_ADC_DMA_GetRegAddr(ADC1, LL_ADC_DMA_REG_REGULAR_DATA));
	LL_DMA_SetMemoryAddress(DMA1, LL_DMA_CHANNEL_1,(uint32_t)adc_val);
 800210c:	4b0c      	ldr	r3, [pc, #48]	; (8002140 <adc_init+0x90>)
 800210e:	480b      	ldr	r0, [pc, #44]	; (800213c <adc_init+0x8c>)
 8002110:	001a      	movs	r2, r3
 8002112:	2101      	movs	r1, #1
 8002114:	f7ff fae0 	bl	80016d8 <LL_DMA_SetMemoryAddress>
	LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_1);
 8002118:	4b08      	ldr	r3, [pc, #32]	; (800213c <adc_init+0x8c>)
 800211a:	2101      	movs	r1, #1
 800211c:	0018      	movs	r0, r3
 800211e:	f7ff fa9d 	bl	800165c <LL_DMA_EnableChannel>
	LL_DMA_EnableIT_TC(DMA1, LL_DMA_CHANNEL_1);
 8002122:	4b06      	ldr	r3, [pc, #24]	; (800213c <adc_init+0x8c>)
 8002124:	2101      	movs	r1, #1
 8002126:	0018      	movs	r0, r3
 8002128:	f7ff fb02 	bl	8001730 <LL_DMA_EnableIT_TC>
}
 800212c:	46c0      	nop			; (mov r8, r8)
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}
 8002132:	46c0      	nop			; (mov r8, r8)
 8002134:	40000400 	.word	0x40000400
 8002138:	40012400 	.word	0x40012400
 800213c:	40020000 	.word	0x40020000
 8002140:	20000020 	.word	0x20000020

08002144 <LL_DMA_IsActiveFlag_TC1>:
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b082      	sub	sp, #8
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF1) == (DMA_ISR_TCIF1));
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	2202      	movs	r2, #2
 8002152:	4013      	ands	r3, r2
 8002154:	3b02      	subs	r3, #2
 8002156:	425a      	negs	r2, r3
 8002158:	4153      	adcs	r3, r2
 800215a:	b2db      	uxtb	r3, r3
}
 800215c:	0018      	movs	r0, r3
 800215e:	46bd      	mov	sp, r7
 8002160:	b002      	add	sp, #8
 8002162:	bd80      	pop	{r7, pc}

08002164 <LL_DMA_ClearFlag_TC1>:
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b082      	sub	sp, #8
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF1);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2202      	movs	r2, #2
 8002170:	605a      	str	r2, [r3, #4]
}
 8002172:	46c0      	nop			; (mov r8, r8)
 8002174:	46bd      	mov	sp, r7
 8002176:	b002      	add	sp, #8
 8002178:	bd80      	pop	{r7, pc}

0800217a <LL_TIM_ClearFlag_UPDATE>:
{
 800217a:	b580      	push	{r7, lr}
 800217c:	b082      	sub	sp, #8
 800217e:	af00      	add	r7, sp, #0
 8002180:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2202      	movs	r2, #2
 8002186:	4252      	negs	r2, r2
 8002188:	611a      	str	r2, [r3, #16]
}
 800218a:	46c0      	nop			; (mov r8, r8)
 800218c:	46bd      	mov	sp, r7
 800218e:	b002      	add	sp, #8
 8002190:	bd80      	pop	{r7, pc}

08002192 <LL_TIM_IsActiveFlag_UPDATE>:
{
 8002192:	b580      	push	{r7, lr}
 8002194:	b082      	sub	sp, #8
 8002196:	af00      	add	r7, sp, #0
 8002198:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	691b      	ldr	r3, [r3, #16]
 800219e:	2201      	movs	r2, #1
 80021a0:	4013      	ands	r3, r2
 80021a2:	2b01      	cmp	r3, #1
 80021a4:	d101      	bne.n	80021aa <LL_TIM_IsActiveFlag_UPDATE+0x18>
 80021a6:	2301      	movs	r3, #1
 80021a8:	e000      	b.n	80021ac <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 80021aa:	2300      	movs	r3, #0
}
 80021ac:	0018      	movs	r0, r3
 80021ae:	46bd      	mov	sp, r7
 80021b0:	b002      	add	sp, #8
 80021b2:	bd80      	pop	{r7, pc}

080021b4 <NMI_Handler>:
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN NonMaskableInt_IRQn 0 */

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 80021b8:	e7fe      	b.n	80021b8 <NMI_Handler+0x4>

080021ba <HardFault_Handler>:

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void)
{
 80021ba:	b580      	push	{r7, lr}
 80021bc:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN HardFault_IRQn 0 */

	/* USER CODE END HardFault_IRQn 0 */
	while (1)
 80021be:	e7fe      	b.n	80021be <HardFault_Handler+0x4>

080021c0 <SVC_Handler>:

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	af00      	add	r7, sp, #0

	/* USER CODE END SVC_IRQn 0 */
	/* USER CODE BEGIN SVC_IRQn 1 */

	/* USER CODE END SVC_IRQn 1 */
}
 80021c4:	46c0      	nop			; (mov r8, r8)
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}

080021ca <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void)
{
 80021ca:	b580      	push	{r7, lr}
 80021cc:	af00      	add	r7, sp, #0

	/* USER CODE END PendSV_IRQn 0 */
	/* USER CODE BEGIN PendSV_IRQn 1 */

	/* USER CODE END PendSV_IRQn 1 */
}
 80021ce:	46c0      	nop			; (mov r8, r8)
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}

080021d4 <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	af00      	add	r7, sp, #0
	/* USER CODE END SysTick_IRQn 0 */

	/* USER CODE BEGIN SysTick_IRQn 1 */

	/* USER CODE END SysTick_IRQn 1 */
}
 80021d8:	46c0      	nop			; (mov r8, r8)
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}
	...

080021e0 <DMA1_Channel1_IRQHandler>:

/**
 * @brief This function handles DMA1 channel 1 interrupt.
 */
void DMA1_Channel1_IRQHandler(void)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

	if(LL_DMA_IsActiveFlag_TC1(DMA1) == 1)
 80021e4:	4b11      	ldr	r3, [pc, #68]	; (800222c <DMA1_Channel1_IRQHandler+0x4c>)
 80021e6:	0018      	movs	r0, r3
 80021e8:	f7ff ffac 	bl	8002144 <LL_DMA_IsActiveFlag_TC1>
 80021ec:	0003      	movs	r3, r0
 80021ee:	2b01      	cmp	r3, #1
 80021f0:	d119      	bne.n	8002226 <DMA1_Channel1_IRQHandler+0x46>
	{
		if(!adc)
 80021f2:	4b0f      	ldr	r3, [pc, #60]	; (8002230 <DMA1_Channel1_IRQHandler+0x50>)
 80021f4:	781b      	ldrb	r3, [r3, #0]
 80021f6:	2201      	movs	r2, #1
 80021f8:	4053      	eors	r3, r2
 80021fa:	b2db      	uxtb	r3, r3
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d00e      	beq.n	800221e <DMA1_Channel1_IRQHandler+0x3e>
		{
			adc=1;
 8002200:	4b0b      	ldr	r3, [pc, #44]	; (8002230 <DMA1_Channel1_IRQHandler+0x50>)
 8002202:	2201      	movs	r2, #1
 8002204:	701a      	strb	r2, [r3, #0]
			vac_sample_int=adc_val[2];
 8002206:	4b0b      	ldr	r3, [pc, #44]	; (8002234 <DMA1_Channel1_IRQHandler+0x54>)
 8002208:	889a      	ldrh	r2, [r3, #4]
 800220a:	4b0b      	ldr	r3, [pc, #44]	; (8002238 <DMA1_Channel1_IRQHandler+0x58>)
 800220c:	801a      	strh	r2, [r3, #0]
			vadc_int=adc_val[1];
 800220e:	4b09      	ldr	r3, [pc, #36]	; (8002234 <DMA1_Channel1_IRQHandler+0x54>)
 8002210:	885a      	ldrh	r2, [r3, #2]
 8002212:	4b0a      	ldr	r3, [pc, #40]	; (800223c <DMA1_Channel1_IRQHandler+0x5c>)
 8002214:	801a      	strh	r2, [r3, #0]
			vbat_int=adc_val[0];
 8002216:	4b07      	ldr	r3, [pc, #28]	; (8002234 <DMA1_Channel1_IRQHandler+0x54>)
 8002218:	881a      	ldrh	r2, [r3, #0]
 800221a:	4b09      	ldr	r3, [pc, #36]	; (8002240 <DMA1_Channel1_IRQHandler+0x60>)
 800221c:	801a      	strh	r2, [r3, #0]
		}
		/* Clear flag DMA transfer complete */
		LL_DMA_ClearFlag_TC1(DMA1);
 800221e:	4b03      	ldr	r3, [pc, #12]	; (800222c <DMA1_Channel1_IRQHandler+0x4c>)
 8002220:	0018      	movs	r0, r3
 8002222:	f7ff ff9f 	bl	8002164 <LL_DMA_ClearFlag_TC1>
	/* USER CODE END DMA1_Channel1_IRQn 0 */

	/* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

	/* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002226:	46c0      	nop			; (mov r8, r8)
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}
 800222c:	40020000 	.word	0x40020000
 8002230:	2000003e 	.word	0x2000003e
 8002234:	20000020 	.word	0x20000020
 8002238:	20000194 	.word	0x20000194
 800223c:	20000196 	.word	0x20000196
 8002240:	20000198 	.word	0x20000198

08002244 <TIM3_IRQHandler>:

/**
 * @brief This function handles TIM3 global interrupt.
 */
void TIM3_IRQHandler(void)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM3_IRQn 0 */
	if(LL_TIM_IsActiveFlag_UPDATE(TIM3) == 1)
 8002248:	4b17      	ldr	r3, [pc, #92]	; (80022a8 <TIM3_IRQHandler+0x64>)
 800224a:	0018      	movs	r0, r3
 800224c:	f7ff ffa1 	bl	8002192 <LL_TIM_IsActiveFlag_UPDATE>
 8002250:	0003      	movs	r3, r0
 8002252:	2b01      	cmp	r3, #1
 8002254:	d125      	bne.n	80022a2 <TIM3_IRQHandler+0x5e>
	{
		/* Clear the update interrupt flag*/
		LL_TIM_ClearFlag_UPDATE(TIM3);
 8002256:	4b14      	ldr	r3, [pc, #80]	; (80022a8 <TIM3_IRQHandler+0x64>)
 8002258:	0018      	movs	r0, r3
 800225a:	f7ff ff8e 	bl	800217a <LL_TIM_ClearFlag_UPDATE>
		thick++;
 800225e:	4b13      	ldr	r3, [pc, #76]	; (80022ac <TIM3_IRQHandler+0x68>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	1c5a      	adds	r2, r3, #1
 8002264:	4b11      	ldr	r3, [pc, #68]	; (80022ac <TIM3_IRQHandler+0x68>)
 8002266:	601a      	str	r2, [r3, #0]
		if(thick%500==0){
 8002268:	4b10      	ldr	r3, [pc, #64]	; (80022ac <TIM3_IRQHandler+0x68>)
 800226a:	681a      	ldr	r2, [r3, #0]
 800226c:	23fa      	movs	r3, #250	; 0xfa
 800226e:	0059      	lsls	r1, r3, #1
 8002270:	0010      	movs	r0, r2
 8002272:	f7fd ffcf 	bl	8000214 <__aeabi_uidivmod>
 8002276:	1e0b      	subs	r3, r1, #0
 8002278:	d106      	bne.n	8002288 <TIM3_IRQHandler+0x44>
			freq=fr;
 800227a:	4b0d      	ldr	r3, [pc, #52]	; (80022b0 <TIM3_IRQHandler+0x6c>)
 800227c:	881a      	ldrh	r2, [r3, #0]
 800227e:	4b0d      	ldr	r3, [pc, #52]	; (80022b4 <TIM3_IRQHandler+0x70>)
 8002280:	801a      	strh	r2, [r3, #0]
			fr=0;
 8002282:	4b0b      	ldr	r3, [pc, #44]	; (80022b0 <TIM3_IRQHandler+0x6c>)
 8002284:	2200      	movs	r2, #0
 8002286:	801a      	strh	r2, [r3, #0]
		}
		if(working){
 8002288:	4b0b      	ldr	r3, [pc, #44]	; (80022b8 <TIM3_IRQHandler+0x74>)
 800228a:	781b      	ldrb	r3, [r3, #0]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d005      	beq.n	800229c <TIM3_IRQHandler+0x58>
			working_time++;
 8002290:	4b0a      	ldr	r3, [pc, #40]	; (80022bc <TIM3_IRQHandler+0x78>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	1c5a      	adds	r2, r3, #1
 8002296:	4b09      	ldr	r3, [pc, #36]	; (80022bc <TIM3_IRQHandler+0x78>)
 8002298:	601a      	str	r2, [r3, #0]
	}
	/* USER CODE END TIM3_IRQn 0 */
	/* USER CODE BEGIN TIM3_IRQn 1 */

	/* USER CODE END TIM3_IRQn 1 */
}
 800229a:	e002      	b.n	80022a2 <TIM3_IRQHandler+0x5e>
			working_time=0;
 800229c:	4b07      	ldr	r3, [pc, #28]	; (80022bc <TIM3_IRQHandler+0x78>)
 800229e:	2200      	movs	r2, #0
 80022a0:	601a      	str	r2, [r3, #0]
}
 80022a2:	46c0      	nop			; (mov r8, r8)
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bd80      	pop	{r7, pc}
 80022a8:	40000400 	.word	0x40000400
 80022ac:	20000040 	.word	0x20000040
 80022b0:	20000038 	.word	0x20000038
 80022b4:	2000003c 	.word	0x2000003c
 80022b8:	2000003f 	.word	0x2000003f
 80022bc:	20000044 	.word	0x20000044

080022c0 <USART1_IRQHandler>:

/**
 * @brief This function handles USART1 global interrupt.
 */
void USART1_IRQHandler(void)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	af00      	add	r7, sp, #0

	/* USER CODE END USART1_IRQn 0 */
	/* USER CODE BEGIN USART1_IRQn 1 */

	/* USER CODE END USART1_IRQn 1 */
}
 80022c4:	46c0      	nop			; (mov r8, r8)
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}

080022ca <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80022ca:	b580      	push	{r7, lr}
 80022cc:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80022ce:	46c0      	nop			; (mov r8, r8)
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd80      	pop	{r7, pc}

080022d4 <__NVIC_EnableIRQ>:
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b082      	sub	sp, #8
 80022d8:	af00      	add	r7, sp, #0
 80022da:	0002      	movs	r2, r0
 80022dc:	1dfb      	adds	r3, r7, #7
 80022de:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80022e0:	1dfb      	adds	r3, r7, #7
 80022e2:	781b      	ldrb	r3, [r3, #0]
 80022e4:	2b7f      	cmp	r3, #127	; 0x7f
 80022e6:	d809      	bhi.n	80022fc <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022e8:	1dfb      	adds	r3, r7, #7
 80022ea:	781b      	ldrb	r3, [r3, #0]
 80022ec:	001a      	movs	r2, r3
 80022ee:	231f      	movs	r3, #31
 80022f0:	401a      	ands	r2, r3
 80022f2:	4b04      	ldr	r3, [pc, #16]	; (8002304 <__NVIC_EnableIRQ+0x30>)
 80022f4:	2101      	movs	r1, #1
 80022f6:	4091      	lsls	r1, r2
 80022f8:	000a      	movs	r2, r1
 80022fa:	601a      	str	r2, [r3, #0]
}
 80022fc:	46c0      	nop			; (mov r8, r8)
 80022fe:	46bd      	mov	sp, r7
 8002300:	b002      	add	sp, #8
 8002302:	bd80      	pop	{r7, pc}
 8002304:	e000e100 	.word	0xe000e100

08002308 <__NVIC_SetPriority>:
{
 8002308:	b590      	push	{r4, r7, lr}
 800230a:	b083      	sub	sp, #12
 800230c:	af00      	add	r7, sp, #0
 800230e:	0002      	movs	r2, r0
 8002310:	6039      	str	r1, [r7, #0]
 8002312:	1dfb      	adds	r3, r7, #7
 8002314:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002316:	1dfb      	adds	r3, r7, #7
 8002318:	781b      	ldrb	r3, [r3, #0]
 800231a:	2b7f      	cmp	r3, #127	; 0x7f
 800231c:	d828      	bhi.n	8002370 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800231e:	4a2f      	ldr	r2, [pc, #188]	; (80023dc <__NVIC_SetPriority+0xd4>)
 8002320:	1dfb      	adds	r3, r7, #7
 8002322:	781b      	ldrb	r3, [r3, #0]
 8002324:	b25b      	sxtb	r3, r3
 8002326:	089b      	lsrs	r3, r3, #2
 8002328:	33c0      	adds	r3, #192	; 0xc0
 800232a:	009b      	lsls	r3, r3, #2
 800232c:	589b      	ldr	r3, [r3, r2]
 800232e:	1dfa      	adds	r2, r7, #7
 8002330:	7812      	ldrb	r2, [r2, #0]
 8002332:	0011      	movs	r1, r2
 8002334:	2203      	movs	r2, #3
 8002336:	400a      	ands	r2, r1
 8002338:	00d2      	lsls	r2, r2, #3
 800233a:	21ff      	movs	r1, #255	; 0xff
 800233c:	4091      	lsls	r1, r2
 800233e:	000a      	movs	r2, r1
 8002340:	43d2      	mvns	r2, r2
 8002342:	401a      	ands	r2, r3
 8002344:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	019b      	lsls	r3, r3, #6
 800234a:	22ff      	movs	r2, #255	; 0xff
 800234c:	401a      	ands	r2, r3
 800234e:	1dfb      	adds	r3, r7, #7
 8002350:	781b      	ldrb	r3, [r3, #0]
 8002352:	0018      	movs	r0, r3
 8002354:	2303      	movs	r3, #3
 8002356:	4003      	ands	r3, r0
 8002358:	00db      	lsls	r3, r3, #3
 800235a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800235c:	481f      	ldr	r0, [pc, #124]	; (80023dc <__NVIC_SetPriority+0xd4>)
 800235e:	1dfb      	adds	r3, r7, #7
 8002360:	781b      	ldrb	r3, [r3, #0]
 8002362:	b25b      	sxtb	r3, r3
 8002364:	089b      	lsrs	r3, r3, #2
 8002366:	430a      	orrs	r2, r1
 8002368:	33c0      	adds	r3, #192	; 0xc0
 800236a:	009b      	lsls	r3, r3, #2
 800236c:	501a      	str	r2, [r3, r0]
}
 800236e:	e031      	b.n	80023d4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002370:	4a1b      	ldr	r2, [pc, #108]	; (80023e0 <__NVIC_SetPriority+0xd8>)
 8002372:	1dfb      	adds	r3, r7, #7
 8002374:	781b      	ldrb	r3, [r3, #0]
 8002376:	0019      	movs	r1, r3
 8002378:	230f      	movs	r3, #15
 800237a:	400b      	ands	r3, r1
 800237c:	3b08      	subs	r3, #8
 800237e:	089b      	lsrs	r3, r3, #2
 8002380:	3306      	adds	r3, #6
 8002382:	009b      	lsls	r3, r3, #2
 8002384:	18d3      	adds	r3, r2, r3
 8002386:	3304      	adds	r3, #4
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	1dfa      	adds	r2, r7, #7
 800238c:	7812      	ldrb	r2, [r2, #0]
 800238e:	0011      	movs	r1, r2
 8002390:	2203      	movs	r2, #3
 8002392:	400a      	ands	r2, r1
 8002394:	00d2      	lsls	r2, r2, #3
 8002396:	21ff      	movs	r1, #255	; 0xff
 8002398:	4091      	lsls	r1, r2
 800239a:	000a      	movs	r2, r1
 800239c:	43d2      	mvns	r2, r2
 800239e:	401a      	ands	r2, r3
 80023a0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	019b      	lsls	r3, r3, #6
 80023a6:	22ff      	movs	r2, #255	; 0xff
 80023a8:	401a      	ands	r2, r3
 80023aa:	1dfb      	adds	r3, r7, #7
 80023ac:	781b      	ldrb	r3, [r3, #0]
 80023ae:	0018      	movs	r0, r3
 80023b0:	2303      	movs	r3, #3
 80023b2:	4003      	ands	r3, r0
 80023b4:	00db      	lsls	r3, r3, #3
 80023b6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80023b8:	4809      	ldr	r0, [pc, #36]	; (80023e0 <__NVIC_SetPriority+0xd8>)
 80023ba:	1dfb      	adds	r3, r7, #7
 80023bc:	781b      	ldrb	r3, [r3, #0]
 80023be:	001c      	movs	r4, r3
 80023c0:	230f      	movs	r3, #15
 80023c2:	4023      	ands	r3, r4
 80023c4:	3b08      	subs	r3, #8
 80023c6:	089b      	lsrs	r3, r3, #2
 80023c8:	430a      	orrs	r2, r1
 80023ca:	3306      	adds	r3, #6
 80023cc:	009b      	lsls	r3, r3, #2
 80023ce:	18c3      	adds	r3, r0, r3
 80023d0:	3304      	adds	r3, #4
 80023d2:	601a      	str	r2, [r3, #0]
}
 80023d4:	46c0      	nop			; (mov r8, r8)
 80023d6:	46bd      	mov	sp, r7
 80023d8:	b003      	add	sp, #12
 80023da:	bd90      	pop	{r4, r7, pc}
 80023dc:	e000e100 	.word	0xe000e100
 80023e0:	e000ed00 	.word	0xe000ed00

080023e4 <LL_APB1_GRP1_EnableClock>:
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b084      	sub	sp, #16
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 80023ec:	4b07      	ldr	r3, [pc, #28]	; (800240c <LL_APB1_GRP1_EnableClock+0x28>)
 80023ee:	69d9      	ldr	r1, [r3, #28]
 80023f0:	4b06      	ldr	r3, [pc, #24]	; (800240c <LL_APB1_GRP1_EnableClock+0x28>)
 80023f2:	687a      	ldr	r2, [r7, #4]
 80023f4:	430a      	orrs	r2, r1
 80023f6:	61da      	str	r2, [r3, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80023f8:	4b04      	ldr	r3, [pc, #16]	; (800240c <LL_APB1_GRP1_EnableClock+0x28>)
 80023fa:	69db      	ldr	r3, [r3, #28]
 80023fc:	687a      	ldr	r2, [r7, #4]
 80023fe:	4013      	ands	r3, r2
 8002400:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002402:	68fb      	ldr	r3, [r7, #12]
}
 8002404:	46c0      	nop			; (mov r8, r8)
 8002406:	46bd      	mov	sp, r7
 8002408:	b004      	add	sp, #16
 800240a:	bd80      	pop	{r7, pc}
 800240c:	40021000 	.word	0x40021000

08002410 <LL_TIM_DisableARRPreload>:
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b082      	sub	sp, #8
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	2280      	movs	r2, #128	; 0x80
 800241e:	4393      	bics	r3, r2
 8002420:	001a      	movs	r2, r3
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	601a      	str	r2, [r3, #0]
}
 8002426:	46c0      	nop			; (mov r8, r8)
 8002428:	46bd      	mov	sp, r7
 800242a:	b002      	add	sp, #8
 800242c:	bd80      	pop	{r7, pc}
	...

08002430 <LL_TIM_SetClockSource>:
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b082      	sub	sp, #8
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
 8002438:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	689b      	ldr	r3, [r3, #8]
 800243e:	4a05      	ldr	r2, [pc, #20]	; (8002454 <LL_TIM_SetClockSource+0x24>)
 8002440:	401a      	ands	r2, r3
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	431a      	orrs	r2, r3
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	609a      	str	r2, [r3, #8]
}
 800244a:	46c0      	nop			; (mov r8, r8)
 800244c:	46bd      	mov	sp, r7
 800244e:	b002      	add	sp, #8
 8002450:	bd80      	pop	{r7, pc}
 8002452:	46c0      	nop			; (mov r8, r8)
 8002454:	ffffbff8 	.word	0xffffbff8

08002458 <LL_TIM_SetTriggerOutput>:
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b082      	sub	sp, #8
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
 8002460:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	2270      	movs	r2, #112	; 0x70
 8002468:	4393      	bics	r3, r2
 800246a:	001a      	movs	r2, r3
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	431a      	orrs	r2, r3
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	605a      	str	r2, [r3, #4]
}
 8002474:	46c0      	nop			; (mov r8, r8)
 8002476:	46bd      	mov	sp, r7
 8002478:	b002      	add	sp, #8
 800247a:	bd80      	pop	{r7, pc}

0800247c <LL_TIM_DisableMasterSlaveMode>:
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b082      	sub	sp, #8
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	689b      	ldr	r3, [r3, #8]
 8002488:	2280      	movs	r2, #128	; 0x80
 800248a:	4393      	bics	r3, r2
 800248c:	001a      	movs	r2, r3
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	609a      	str	r2, [r3, #8]
}
 8002492:	46c0      	nop			; (mov r8, r8)
 8002494:	46bd      	mov	sp, r7
 8002496:	b002      	add	sp, #8
 8002498:	bd80      	pop	{r7, pc}
	...

0800249c <MX_TIM3_Init>:

/* USER CODE END 0 */

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b086      	sub	sp, #24
 80024a0:	af00      	add	r7, sp, #0
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80024a2:	1d3b      	adds	r3, r7, #4
 80024a4:	0018      	movs	r0, r3
 80024a6:	2314      	movs	r3, #20
 80024a8:	001a      	movs	r2, r3
 80024aa:	2100      	movs	r1, #0
 80024ac:	f000 ffb4 	bl	8003418 <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 80024b0:	2002      	movs	r0, #2
 80024b2:	f7ff ff97 	bl	80023e4 <LL_APB1_GRP1_EnableClock>

  /* TIM3 interrupt Init */
  NVIC_SetPriority(TIM3_IRQn, 0);
 80024b6:	2100      	movs	r1, #0
 80024b8:	2010      	movs	r0, #16
 80024ba:	f7ff ff25 	bl	8002308 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM3_IRQn);
 80024be:	2010      	movs	r0, #16
 80024c0:	f7ff ff08 	bl	80022d4 <__NVIC_EnableIRQ>

  TIM_InitStruct.Prescaler = 799;
 80024c4:	1d3b      	adds	r3, r7, #4
 80024c6:	4a13      	ldr	r2, [pc, #76]	; (8002514 <MX_TIM3_Init+0x78>)
 80024c8:	801a      	strh	r2, [r3, #0]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80024ca:	1d3b      	adds	r3, r7, #4
 80024cc:	2200      	movs	r2, #0
 80024ce:	605a      	str	r2, [r3, #4]
  TIM_InitStruct.Autoreload = 9;
 80024d0:	1d3b      	adds	r3, r7, #4
 80024d2:	2209      	movs	r2, #9
 80024d4:	609a      	str	r2, [r3, #8]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 80024d6:	1d3b      	adds	r3, r7, #4
 80024d8:	2200      	movs	r2, #0
 80024da:	60da      	str	r2, [r3, #12]
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 80024dc:	1d3b      	adds	r3, r7, #4
 80024de:	4a0e      	ldr	r2, [pc, #56]	; (8002518 <MX_TIM3_Init+0x7c>)
 80024e0:	0019      	movs	r1, r3
 80024e2:	0010      	movs	r0, r2
 80024e4:	f000 fde6 	bl	80030b4 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM3);
 80024e8:	4b0b      	ldr	r3, [pc, #44]	; (8002518 <MX_TIM3_Init+0x7c>)
 80024ea:	0018      	movs	r0, r3
 80024ec:	f7ff ff90 	bl	8002410 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM3, LL_TIM_CLOCKSOURCE_INTERNAL);
 80024f0:	4b09      	ldr	r3, [pc, #36]	; (8002518 <MX_TIM3_Init+0x7c>)
 80024f2:	2100      	movs	r1, #0
 80024f4:	0018      	movs	r0, r3
 80024f6:	f7ff ff9b 	bl	8002430 <LL_TIM_SetClockSource>
  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 80024fa:	4b07      	ldr	r3, [pc, #28]	; (8002518 <MX_TIM3_Init+0x7c>)
 80024fc:	2100      	movs	r1, #0
 80024fe:	0018      	movs	r0, r3
 8002500:	f7ff ffaa 	bl	8002458 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 8002504:	4b04      	ldr	r3, [pc, #16]	; (8002518 <MX_TIM3_Init+0x7c>)
 8002506:	0018      	movs	r0, r3
 8002508:	f7ff ffb8 	bl	800247c <LL_TIM_DisableMasterSlaveMode>

}
 800250c:	46c0      	nop			; (mov r8, r8)
 800250e:	46bd      	mov	sp, r7
 8002510:	b006      	add	sp, #24
 8002512:	bd80      	pop	{r7, pc}
 8002514:	0000031f 	.word	0x0000031f
 8002518:	40000400 	.word	0x40000400

0800251c <__NVIC_EnableIRQ>:
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b082      	sub	sp, #8
 8002520:	af00      	add	r7, sp, #0
 8002522:	0002      	movs	r2, r0
 8002524:	1dfb      	adds	r3, r7, #7
 8002526:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002528:	1dfb      	adds	r3, r7, #7
 800252a:	781b      	ldrb	r3, [r3, #0]
 800252c:	2b7f      	cmp	r3, #127	; 0x7f
 800252e:	d809      	bhi.n	8002544 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002530:	1dfb      	adds	r3, r7, #7
 8002532:	781b      	ldrb	r3, [r3, #0]
 8002534:	001a      	movs	r2, r3
 8002536:	231f      	movs	r3, #31
 8002538:	401a      	ands	r2, r3
 800253a:	4b04      	ldr	r3, [pc, #16]	; (800254c <__NVIC_EnableIRQ+0x30>)
 800253c:	2101      	movs	r1, #1
 800253e:	4091      	lsls	r1, r2
 8002540:	000a      	movs	r2, r1
 8002542:	601a      	str	r2, [r3, #0]
}
 8002544:	46c0      	nop			; (mov r8, r8)
 8002546:	46bd      	mov	sp, r7
 8002548:	b002      	add	sp, #8
 800254a:	bd80      	pop	{r7, pc}
 800254c:	e000e100 	.word	0xe000e100

08002550 <__NVIC_SetPriority>:
{
 8002550:	b590      	push	{r4, r7, lr}
 8002552:	b083      	sub	sp, #12
 8002554:	af00      	add	r7, sp, #0
 8002556:	0002      	movs	r2, r0
 8002558:	6039      	str	r1, [r7, #0]
 800255a:	1dfb      	adds	r3, r7, #7
 800255c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800255e:	1dfb      	adds	r3, r7, #7
 8002560:	781b      	ldrb	r3, [r3, #0]
 8002562:	2b7f      	cmp	r3, #127	; 0x7f
 8002564:	d828      	bhi.n	80025b8 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002566:	4a2f      	ldr	r2, [pc, #188]	; (8002624 <__NVIC_SetPriority+0xd4>)
 8002568:	1dfb      	adds	r3, r7, #7
 800256a:	781b      	ldrb	r3, [r3, #0]
 800256c:	b25b      	sxtb	r3, r3
 800256e:	089b      	lsrs	r3, r3, #2
 8002570:	33c0      	adds	r3, #192	; 0xc0
 8002572:	009b      	lsls	r3, r3, #2
 8002574:	589b      	ldr	r3, [r3, r2]
 8002576:	1dfa      	adds	r2, r7, #7
 8002578:	7812      	ldrb	r2, [r2, #0]
 800257a:	0011      	movs	r1, r2
 800257c:	2203      	movs	r2, #3
 800257e:	400a      	ands	r2, r1
 8002580:	00d2      	lsls	r2, r2, #3
 8002582:	21ff      	movs	r1, #255	; 0xff
 8002584:	4091      	lsls	r1, r2
 8002586:	000a      	movs	r2, r1
 8002588:	43d2      	mvns	r2, r2
 800258a:	401a      	ands	r2, r3
 800258c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	019b      	lsls	r3, r3, #6
 8002592:	22ff      	movs	r2, #255	; 0xff
 8002594:	401a      	ands	r2, r3
 8002596:	1dfb      	adds	r3, r7, #7
 8002598:	781b      	ldrb	r3, [r3, #0]
 800259a:	0018      	movs	r0, r3
 800259c:	2303      	movs	r3, #3
 800259e:	4003      	ands	r3, r0
 80025a0:	00db      	lsls	r3, r3, #3
 80025a2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80025a4:	481f      	ldr	r0, [pc, #124]	; (8002624 <__NVIC_SetPriority+0xd4>)
 80025a6:	1dfb      	adds	r3, r7, #7
 80025a8:	781b      	ldrb	r3, [r3, #0]
 80025aa:	b25b      	sxtb	r3, r3
 80025ac:	089b      	lsrs	r3, r3, #2
 80025ae:	430a      	orrs	r2, r1
 80025b0:	33c0      	adds	r3, #192	; 0xc0
 80025b2:	009b      	lsls	r3, r3, #2
 80025b4:	501a      	str	r2, [r3, r0]
}
 80025b6:	e031      	b.n	800261c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80025b8:	4a1b      	ldr	r2, [pc, #108]	; (8002628 <__NVIC_SetPriority+0xd8>)
 80025ba:	1dfb      	adds	r3, r7, #7
 80025bc:	781b      	ldrb	r3, [r3, #0]
 80025be:	0019      	movs	r1, r3
 80025c0:	230f      	movs	r3, #15
 80025c2:	400b      	ands	r3, r1
 80025c4:	3b08      	subs	r3, #8
 80025c6:	089b      	lsrs	r3, r3, #2
 80025c8:	3306      	adds	r3, #6
 80025ca:	009b      	lsls	r3, r3, #2
 80025cc:	18d3      	adds	r3, r2, r3
 80025ce:	3304      	adds	r3, #4
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	1dfa      	adds	r2, r7, #7
 80025d4:	7812      	ldrb	r2, [r2, #0]
 80025d6:	0011      	movs	r1, r2
 80025d8:	2203      	movs	r2, #3
 80025da:	400a      	ands	r2, r1
 80025dc:	00d2      	lsls	r2, r2, #3
 80025de:	21ff      	movs	r1, #255	; 0xff
 80025e0:	4091      	lsls	r1, r2
 80025e2:	000a      	movs	r2, r1
 80025e4:	43d2      	mvns	r2, r2
 80025e6:	401a      	ands	r2, r3
 80025e8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	019b      	lsls	r3, r3, #6
 80025ee:	22ff      	movs	r2, #255	; 0xff
 80025f0:	401a      	ands	r2, r3
 80025f2:	1dfb      	adds	r3, r7, #7
 80025f4:	781b      	ldrb	r3, [r3, #0]
 80025f6:	0018      	movs	r0, r3
 80025f8:	2303      	movs	r3, #3
 80025fa:	4003      	ands	r3, r0
 80025fc:	00db      	lsls	r3, r3, #3
 80025fe:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002600:	4809      	ldr	r0, [pc, #36]	; (8002628 <__NVIC_SetPriority+0xd8>)
 8002602:	1dfb      	adds	r3, r7, #7
 8002604:	781b      	ldrb	r3, [r3, #0]
 8002606:	001c      	movs	r4, r3
 8002608:	230f      	movs	r3, #15
 800260a:	4023      	ands	r3, r4
 800260c:	3b08      	subs	r3, #8
 800260e:	089b      	lsrs	r3, r3, #2
 8002610:	430a      	orrs	r2, r1
 8002612:	3306      	adds	r3, #6
 8002614:	009b      	lsls	r3, r3, #2
 8002616:	18c3      	adds	r3, r0, r3
 8002618:	3304      	adds	r3, #4
 800261a:	601a      	str	r2, [r3, #0]
}
 800261c:	46c0      	nop			; (mov r8, r8)
 800261e:	46bd      	mov	sp, r7
 8002620:	b003      	add	sp, #12
 8002622:	bd90      	pop	{r4, r7, pc}
 8002624:	e000e100 	.word	0xe000e100
 8002628:	e000ed00 	.word	0xe000ed00

0800262c <LL_AHB1_GRP1_EnableClock>:
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b084      	sub	sp, #16
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8002634:	4b07      	ldr	r3, [pc, #28]	; (8002654 <LL_AHB1_GRP1_EnableClock+0x28>)
 8002636:	6959      	ldr	r1, [r3, #20]
 8002638:	4b06      	ldr	r3, [pc, #24]	; (8002654 <LL_AHB1_GRP1_EnableClock+0x28>)
 800263a:	687a      	ldr	r2, [r7, #4]
 800263c:	430a      	orrs	r2, r1
 800263e:	615a      	str	r2, [r3, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8002640:	4b04      	ldr	r3, [pc, #16]	; (8002654 <LL_AHB1_GRP1_EnableClock+0x28>)
 8002642:	695b      	ldr	r3, [r3, #20]
 8002644:	687a      	ldr	r2, [r7, #4]
 8002646:	4013      	ands	r3, r2
 8002648:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800264a:	68fb      	ldr	r3, [r7, #12]
}
 800264c:	46c0      	nop			; (mov r8, r8)
 800264e:	46bd      	mov	sp, r7
 8002650:	b004      	add	sp, #16
 8002652:	bd80      	pop	{r7, pc}
 8002654:	40021000 	.word	0x40021000

08002658 <LL_APB1_GRP2_EnableClock>:
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b084      	sub	sp, #16
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8002660:	4b07      	ldr	r3, [pc, #28]	; (8002680 <LL_APB1_GRP2_EnableClock+0x28>)
 8002662:	6999      	ldr	r1, [r3, #24]
 8002664:	4b06      	ldr	r3, [pc, #24]	; (8002680 <LL_APB1_GRP2_EnableClock+0x28>)
 8002666:	687a      	ldr	r2, [r7, #4]
 8002668:	430a      	orrs	r2, r1
 800266a:	619a      	str	r2, [r3, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800266c:	4b04      	ldr	r3, [pc, #16]	; (8002680 <LL_APB1_GRP2_EnableClock+0x28>)
 800266e:	699b      	ldr	r3, [r3, #24]
 8002670:	687a      	ldr	r2, [r7, #4]
 8002672:	4013      	ands	r3, r2
 8002674:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002676:	68fb      	ldr	r3, [r7, #12]
}
 8002678:	46c0      	nop			; (mov r8, r8)
 800267a:	46bd      	mov	sp, r7
 800267c:	b004      	add	sp, #16
 800267e:	bd80      	pop	{r7, pc}
 8002680:	40021000 	.word	0x40021000

08002684 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b082      	sub	sp, #8
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	2201      	movs	r2, #1
 8002692:	431a      	orrs	r2, r3
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	601a      	str	r2, [r3, #0]
}
 8002698:	46c0      	nop			; (mov r8, r8)
 800269a:	46bd      	mov	sp, r7
 800269c:	b002      	add	sp, #8
 800269e:	bd80      	pop	{r7, pc}

080026a0 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b082      	sub	sp, #8
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  - SCEN (if Smartcard feature is supported), IREN (if Irda feature is supported) and HDSEL bits in the USART_CR3 register.
  */
#if defined(USART_LIN_SUPPORT)
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(USARTx->CR2, USART_CR2_CLKEN);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	4a07      	ldr	r2, [pc, #28]	; (80026cc <LL_USART_ConfigAsyncMode+0x2c>)
 80026ae:	401a      	ands	r2, r3
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	605a      	str	r2, [r3, #4]
#endif /* USART_IRDA_SUPPORT */
#else
#if defined(USART_IRDA_SUPPORT)
  CLEAR_BIT(USARTx->CR3, (USART_CR3_IREN | USART_CR3_HDSEL));
#else
  CLEAR_BIT(USARTx->CR3, USART_CR3_HDSEL);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	689b      	ldr	r3, [r3, #8]
 80026b8:	2208      	movs	r2, #8
 80026ba:	4393      	bics	r3, r2
 80026bc:	001a      	movs	r2, r3
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	609a      	str	r2, [r3, #8]
#endif /* USART_IRDA_SUPPORT */
#endif /* USART_SMARTCARD_SUPPORT */
}
 80026c2:	46c0      	nop			; (mov r8, r8)
 80026c4:	46bd      	mov	sp, r7
 80026c6:	b002      	add	sp, #8
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	46c0      	nop			; (mov r8, r8)
 80026cc:	fffff7ff 	.word	0xfffff7ff

080026d0 <LL_USART_DisableIT_CTS>:
  * @rmtoll CR3          CTSIE         LL_USART_DisableIT_CTS
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_CTS(USART_TypeDef *USARTx)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b082      	sub	sp, #8
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR3, USART_CR3_CTSIE);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	689b      	ldr	r3, [r3, #8]
 80026dc:	4a03      	ldr	r2, [pc, #12]	; (80026ec <LL_USART_DisableIT_CTS+0x1c>)
 80026de:	401a      	ands	r2, r3
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	609a      	str	r2, [r3, #8]
}
 80026e4:	46c0      	nop			; (mov r8, r8)
 80026e6:	46bd      	mov	sp, r7
 80026e8:	b002      	add	sp, #8
 80026ea:	bd80      	pop	{r7, pc}
 80026ec:	fffffbff 	.word	0xfffffbff

080026f0 <MX_USART1_UART_Init>:
/* USER CODE END 0 */

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80026f0:	b590      	push	{r4, r7, lr}
 80026f2:	b08f      	sub	sp, #60	; 0x3c
 80026f4:	af00      	add	r7, sp, #0
  LL_USART_InitTypeDef USART_InitStruct = {0};
 80026f6:	241c      	movs	r4, #28
 80026f8:	193b      	adds	r3, r7, r4
 80026fa:	0018      	movs	r0, r3
 80026fc:	231c      	movs	r3, #28
 80026fe:	001a      	movs	r2, r3
 8002700:	2100      	movs	r1, #0
 8002702:	f000 fe89 	bl	8003418 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002706:	1d3b      	adds	r3, r7, #4
 8002708:	0018      	movs	r0, r3
 800270a:	2318      	movs	r3, #24
 800270c:	001a      	movs	r2, r3
 800270e:	2100      	movs	r1, #0
 8002710:	f000 fe82 	bl	8003418 <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_USART1);
 8002714:	2380      	movs	r3, #128	; 0x80
 8002716:	01db      	lsls	r3, r3, #7
 8002718:	0018      	movs	r0, r3
 800271a:	f7ff ff9d 	bl	8002658 <LL_APB1_GRP2_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800271e:	2380      	movs	r3, #128	; 0x80
 8002720:	029b      	lsls	r3, r3, #10
 8002722:	0018      	movs	r0, r3
 8002724:	f7ff ff82 	bl	800262c <LL_AHB1_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PA9   ------> USART1_TX
  PA10   ------> USART1_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 8002728:	1d3b      	adds	r3, r7, #4
 800272a:	2280      	movs	r2, #128	; 0x80
 800272c:	0092      	lsls	r2, r2, #2
 800272e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002730:	1d3b      	adds	r3, r7, #4
 8002732:	2202      	movs	r2, #2
 8002734:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8002736:	1d3b      	adds	r3, r7, #4
 8002738:	2203      	movs	r2, #3
 800273a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800273c:	1d3b      	adds	r3, r7, #4
 800273e:	2200      	movs	r2, #0
 8002740:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002742:	1d3b      	adds	r3, r7, #4
 8002744:	2200      	movs	r2, #0
 8002746:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8002748:	1d3b      	adds	r3, r7, #4
 800274a:	2201      	movs	r2, #1
 800274c:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800274e:	1d3a      	adds	r2, r7, #4
 8002750:	2390      	movs	r3, #144	; 0x90
 8002752:	05db      	lsls	r3, r3, #23
 8002754:	0011      	movs	r1, r2
 8002756:	0018      	movs	r0, r3
 8002758:	f000 fabd 	bl	8002cd6 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 800275c:	1d3b      	adds	r3, r7, #4
 800275e:	2280      	movs	r2, #128	; 0x80
 8002760:	00d2      	lsls	r2, r2, #3
 8002762:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002764:	1d3b      	adds	r3, r7, #4
 8002766:	2202      	movs	r2, #2
 8002768:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 800276a:	1d3b      	adds	r3, r7, #4
 800276c:	2203      	movs	r2, #3
 800276e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002770:	1d3b      	adds	r3, r7, #4
 8002772:	2200      	movs	r2, #0
 8002774:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002776:	1d3b      	adds	r3, r7, #4
 8002778:	2200      	movs	r2, #0
 800277a:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 800277c:	1d3b      	adds	r3, r7, #4
 800277e:	2201      	movs	r2, #1
 8002780:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002782:	1d3a      	adds	r2, r7, #4
 8002784:	2390      	movs	r3, #144	; 0x90
 8002786:	05db      	lsls	r3, r3, #23
 8002788:	0011      	movs	r1, r2
 800278a:	0018      	movs	r0, r3
 800278c:	f000 faa3 	bl	8002cd6 <LL_GPIO_Init>

  /* USART1 interrupt Init */
  NVIC_SetPriority(USART1_IRQn, 0);
 8002790:	2100      	movs	r1, #0
 8002792:	201b      	movs	r0, #27
 8002794:	f7ff fedc 	bl	8002550 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART1_IRQn);
 8002798:	201b      	movs	r0, #27
 800279a:	f7ff febf 	bl	800251c <__NVIC_EnableIRQ>

  USART_InitStruct.BaudRate = 115200;
 800279e:	193b      	adds	r3, r7, r4
 80027a0:	22e1      	movs	r2, #225	; 0xe1
 80027a2:	0252      	lsls	r2, r2, #9
 80027a4:	601a      	str	r2, [r3, #0]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80027a6:	0021      	movs	r1, r4
 80027a8:	187b      	adds	r3, r7, r1
 80027aa:	2200      	movs	r2, #0
 80027ac:	605a      	str	r2, [r3, #4]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80027ae:	187b      	adds	r3, r7, r1
 80027b0:	2200      	movs	r2, #0
 80027b2:	609a      	str	r2, [r3, #8]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80027b4:	187b      	adds	r3, r7, r1
 80027b6:	2200      	movs	r2, #0
 80027b8:	60da      	str	r2, [r3, #12]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80027ba:	187b      	adds	r3, r7, r1
 80027bc:	220c      	movs	r2, #12
 80027be:	611a      	str	r2, [r3, #16]
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80027c0:	187b      	adds	r3, r7, r1
 80027c2:	2200      	movs	r2, #0
 80027c4:	615a      	str	r2, [r3, #20]
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80027c6:	187b      	adds	r3, r7, r1
 80027c8:	2200      	movs	r2, #0
 80027ca:	619a      	str	r2, [r3, #24]
  LL_USART_Init(USART1, &USART_InitStruct);
 80027cc:	187b      	adds	r3, r7, r1
 80027ce:	4a0a      	ldr	r2, [pc, #40]	; (80027f8 <MX_USART1_UART_Init+0x108>)
 80027d0:	0019      	movs	r1, r3
 80027d2:	0010      	movs	r0, r2
 80027d4:	f000 fd5c 	bl	8003290 <LL_USART_Init>
  LL_USART_DisableIT_CTS(USART1);
 80027d8:	4b07      	ldr	r3, [pc, #28]	; (80027f8 <MX_USART1_UART_Init+0x108>)
 80027da:	0018      	movs	r0, r3
 80027dc:	f7ff ff78 	bl	80026d0 <LL_USART_DisableIT_CTS>
  LL_USART_ConfigAsyncMode(USART1);
 80027e0:	4b05      	ldr	r3, [pc, #20]	; (80027f8 <MX_USART1_UART_Init+0x108>)
 80027e2:	0018      	movs	r0, r3
 80027e4:	f7ff ff5c 	bl	80026a0 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART1);
 80027e8:	4b03      	ldr	r3, [pc, #12]	; (80027f8 <MX_USART1_UART_Init+0x108>)
 80027ea:	0018      	movs	r0, r3
 80027ec:	f7ff ff4a 	bl	8002684 <LL_USART_Enable>

}
 80027f0:	46c0      	nop			; (mov r8, r8)
 80027f2:	46bd      	mov	sp, r7
 80027f4:	b00f      	add	sp, #60	; 0x3c
 80027f6:	bd90      	pop	{r4, r7, pc}
 80027f8:	40013800 	.word	0x40013800

080027fc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80027fc:	480d      	ldr	r0, [pc, #52]	; (8002834 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80027fe:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002800:	480d      	ldr	r0, [pc, #52]	; (8002838 <LoopForever+0x6>)
  ldr r1, =_edata
 8002802:	490e      	ldr	r1, [pc, #56]	; (800283c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002804:	4a0e      	ldr	r2, [pc, #56]	; (8002840 <LoopForever+0xe>)
  movs r3, #0
 8002806:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002808:	e002      	b.n	8002810 <LoopCopyDataInit>

0800280a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800280a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800280c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800280e:	3304      	adds	r3, #4

08002810 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002810:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002812:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002814:	d3f9      	bcc.n	800280a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002816:	4a0b      	ldr	r2, [pc, #44]	; (8002844 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002818:	4c0b      	ldr	r4, [pc, #44]	; (8002848 <LoopForever+0x16>)
  movs r3, #0
 800281a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800281c:	e001      	b.n	8002822 <LoopFillZerobss>

0800281e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800281e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002820:	3204      	adds	r2, #4

08002822 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002822:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002824:	d3fb      	bcc.n	800281e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002826:	f7ff fd50 	bl	80022ca <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800282a:	f000 fdd1 	bl	80033d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800282e:	f7ff f915 	bl	8001a5c <main>

08002832 <LoopForever>:

LoopForever:
    b LoopForever
 8002832:	e7fe      	b.n	8002832 <LoopForever>
  ldr   r0, =_estack
 8002834:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8002838:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800283c:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8002840:	080034b0 	.word	0x080034b0
  ldr r2, =_sbss
 8002844:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8002848:	2000019c 	.word	0x2000019c

0800284c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800284c:	e7fe      	b.n	800284c <ADC1_IRQHandler>

0800284e <LL_ADC_IsEnabled>:
{
 800284e:	b580      	push	{r7, lr}
 8002850:	b082      	sub	sp, #8
 8002852:	af00      	add	r7, sp, #0
 8002854:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN));
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	689b      	ldr	r3, [r3, #8]
 800285a:	2201      	movs	r2, #1
 800285c:	4013      	ands	r3, r2
 800285e:	3b01      	subs	r3, #1
 8002860:	425a      	negs	r2, r3
 8002862:	4153      	adcs	r3, r2
 8002864:	b2db      	uxtb	r3, r3
}
 8002866:	0018      	movs	r0, r3
 8002868:	46bd      	mov	sp, r7
 800286a:	b002      	add	sp, #8
 800286c:	bd80      	pop	{r7, pc}
	...

08002870 <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b084      	sub	sp, #16
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
 8002878:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 800287a:	230f      	movs	r3, #15
 800287c:	18fb      	adds	r3, r7, r3
 800287e:	2200      	movs	r2, #0
 8002880:	701a      	strb	r2, [r3, #0]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_LOW_POWER(ADC_InitStruct->LowPowerMode));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	0018      	movs	r0, r3
 8002886:	f7ff ffe2 	bl	800284e <LL_ADC_IsEnabled>
 800288a:	1e03      	subs	r3, r0, #0
 800288c:	d118      	bne.n	80028c0 <LL_ADC_Init+0x50>
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC data resolution                                           */
    /*    - Set ADC conversion data alignment                                 */
    /*    - Set ADC low power mode                                            */
    MODIFY_REG(ADCx->CFGR1,
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	68db      	ldr	r3, [r3, #12]
 8002892:	4a11      	ldr	r2, [pc, #68]	; (80028d8 <LL_ADC_Init+0x68>)
 8002894:	401a      	ands	r2, r3
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	6859      	ldr	r1, [r3, #4]
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	689b      	ldr	r3, [r3, #8]
 800289e:	4319      	orrs	r1, r3
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	68db      	ldr	r3, [r3, #12]
 80028a4:	430b      	orrs	r3, r1
 80028a6:	431a      	orrs	r2, r3
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	60da      	str	r2, [r3, #12]
                 ADC_InitStruct->Resolution
               | ADC_InitStruct->DataAlignment
               | ADC_InitStruct->LowPowerMode
              );

    MODIFY_REG(ADCx->CFGR2,
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	691b      	ldr	r3, [r3, #16]
 80028b0:	009b      	lsls	r3, r3, #2
 80028b2:	089a      	lsrs	r2, r3, #2
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	431a      	orrs	r2, r3
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	611a      	str	r2, [r3, #16]
 80028be:	e003      	b.n	80028c8 <LL_ADC_Init+0x58>
              );
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 80028c0:	230f      	movs	r3, #15
 80028c2:	18fb      	adds	r3, r7, r3
 80028c4:	2201      	movs	r2, #1
 80028c6:	701a      	strb	r2, [r3, #0]
  }
  return status;
 80028c8:	230f      	movs	r3, #15
 80028ca:	18fb      	adds	r3, r7, r3
 80028cc:	781b      	ldrb	r3, [r3, #0]
}
 80028ce:	0018      	movs	r0, r3
 80028d0:	46bd      	mov	sp, r7
 80028d2:	b004      	add	sp, #16
 80028d4:	bd80      	pop	{r7, pc}
 80028d6:	46c0      	nop			; (mov r8, r8)
 80028d8:	ffff3fc7 	.word	0xffff3fc7

080028dc <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b084      	sub	sp, #16
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
 80028e4:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 80028e6:	230f      	movs	r3, #15
 80028e8:	18fb      	adds	r3, r7, r3
 80028ea:	2200      	movs	r2, #0
 80028ec:	701a      	strb	r2, [r3, #0]
  assert_param((ADC_REG_InitStruct->ContinuousMode == LL_ADC_REG_CONV_SINGLE)
               || (ADC_REG_InitStruct->SequencerDiscont == LL_ADC_REG_SEQ_DISCONT_DISABLE));

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	0018      	movs	r0, r3
 80028f2:	f7ff ffac 	bl	800284e <LL_ADC_IsEnabled>
 80028f6:	1e03      	subs	r3, r0, #0
 80028f8:	d115      	bne.n	8002926 <LL_ADC_REG_Init+0x4a>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /*    - Set ADC group regular overrun behavior                            */
    /* Note: On this STM32 serie, ADC trigger edge is set to value 0x0 by     */
    /*       setting of trigger source to SW start.                           */
    MODIFY_REG(ADCx->CFGR1,
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	68db      	ldr	r3, [r3, #12]
 80028fe:	4a0f      	ldr	r2, [pc, #60]	; (800293c <LL_ADC_REG_Init+0x60>)
 8002900:	401a      	ands	r2, r3
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	6819      	ldr	r1, [r3, #0]
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	4319      	orrs	r1, r3
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	4319      	orrs	r1, r3
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	68db      	ldr	r3, [r3, #12]
 8002916:	4319      	orrs	r1, r3
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	691b      	ldr	r3, [r3, #16]
 800291c:	430b      	orrs	r3, r1
 800291e:	431a      	orrs	r2, r3
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	60da      	str	r2, [r3, #12]
 8002924:	e003      	b.n	800292e <LL_ADC_REG_Init+0x52>

  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8002926:	230f      	movs	r3, #15
 8002928:	18fb      	adds	r3, r7, r3
 800292a:	2201      	movs	r2, #1
 800292c:	701a      	strb	r2, [r3, #0]
  }
  return status;
 800292e:	230f      	movs	r3, #15
 8002930:	18fb      	adds	r3, r7, r3
 8002932:	781b      	ldrb	r3, [r3, #0]
}
 8002934:	0018      	movs	r0, r3
 8002936:	46bd      	mov	sp, r7
 8002938:	b004      	add	sp, #16
 800293a:	bd80      	pop	{r7, pc}
 800293c:	fffec23c 	.word	0xfffec23c

08002940 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b082      	sub	sp, #8
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 8002948:	4b04      	ldr	r3, [pc, #16]	; (800295c <LL_EXTI_EnableIT_0_31+0x1c>)
 800294a:	6819      	ldr	r1, [r3, #0]
 800294c:	4b03      	ldr	r3, [pc, #12]	; (800295c <LL_EXTI_EnableIT_0_31+0x1c>)
 800294e:	687a      	ldr	r2, [r7, #4]
 8002950:	430a      	orrs	r2, r1
 8002952:	601a      	str	r2, [r3, #0]
}
 8002954:	46c0      	nop			; (mov r8, r8)
 8002956:	46bd      	mov	sp, r7
 8002958:	b002      	add	sp, #8
 800295a:	bd80      	pop	{r7, pc}
 800295c:	40010400 	.word	0x40010400

08002960 <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b082      	sub	sp, #8
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8002968:	4b05      	ldr	r3, [pc, #20]	; (8002980 <LL_EXTI_DisableIT_0_31+0x20>)
 800296a:	681a      	ldr	r2, [r3, #0]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	43d9      	mvns	r1, r3
 8002970:	4b03      	ldr	r3, [pc, #12]	; (8002980 <LL_EXTI_DisableIT_0_31+0x20>)
 8002972:	400a      	ands	r2, r1
 8002974:	601a      	str	r2, [r3, #0]
}
 8002976:	46c0      	nop			; (mov r8, r8)
 8002978:	46bd      	mov	sp, r7
 800297a:	b002      	add	sp, #8
 800297c:	bd80      	pop	{r7, pc}
 800297e:	46c0      	nop			; (mov r8, r8)
 8002980:	40010400 	.word	0x40010400

08002984 <LL_EXTI_EnableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b082      	sub	sp, #8
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 800298c:	4b04      	ldr	r3, [pc, #16]	; (80029a0 <LL_EXTI_EnableEvent_0_31+0x1c>)
 800298e:	6859      	ldr	r1, [r3, #4]
 8002990:	4b03      	ldr	r3, [pc, #12]	; (80029a0 <LL_EXTI_EnableEvent_0_31+0x1c>)
 8002992:	687a      	ldr	r2, [r7, #4]
 8002994:	430a      	orrs	r2, r1
 8002996:	605a      	str	r2, [r3, #4]

}
 8002998:	46c0      	nop			; (mov r8, r8)
 800299a:	46bd      	mov	sp, r7
 800299c:	b002      	add	sp, #8
 800299e:	bd80      	pop	{r7, pc}
 80029a0:	40010400 	.word	0x40010400

080029a4 <LL_EXTI_DisableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b082      	sub	sp, #8
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 80029ac:	4b05      	ldr	r3, [pc, #20]	; (80029c4 <LL_EXTI_DisableEvent_0_31+0x20>)
 80029ae:	685a      	ldr	r2, [r3, #4]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	43d9      	mvns	r1, r3
 80029b4:	4b03      	ldr	r3, [pc, #12]	; (80029c4 <LL_EXTI_DisableEvent_0_31+0x20>)
 80029b6:	400a      	ands	r2, r1
 80029b8:	605a      	str	r2, [r3, #4]
}
 80029ba:	46c0      	nop			; (mov r8, r8)
 80029bc:	46bd      	mov	sp, r7
 80029be:	b002      	add	sp, #8
 80029c0:	bd80      	pop	{r7, pc}
 80029c2:	46c0      	nop			; (mov r8, r8)
 80029c4:	40010400 	.word	0x40010400

080029c8 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b082      	sub	sp, #8
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 80029d0:	4b04      	ldr	r3, [pc, #16]	; (80029e4 <LL_EXTI_EnableRisingTrig_0_31+0x1c>)
 80029d2:	6899      	ldr	r1, [r3, #8]
 80029d4:	4b03      	ldr	r3, [pc, #12]	; (80029e4 <LL_EXTI_EnableRisingTrig_0_31+0x1c>)
 80029d6:	687a      	ldr	r2, [r7, #4]
 80029d8:	430a      	orrs	r2, r1
 80029da:	609a      	str	r2, [r3, #8]

}
 80029dc:	46c0      	nop			; (mov r8, r8)
 80029de:	46bd      	mov	sp, r7
 80029e0:	b002      	add	sp, #8
 80029e2:	bd80      	pop	{r7, pc}
 80029e4:	40010400 	.word	0x40010400

080029e8 <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b082      	sub	sp, #8
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 80029f0:	4b05      	ldr	r3, [pc, #20]	; (8002a08 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 80029f2:	689a      	ldr	r2, [r3, #8]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	43d9      	mvns	r1, r3
 80029f8:	4b03      	ldr	r3, [pc, #12]	; (8002a08 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 80029fa:	400a      	ands	r2, r1
 80029fc:	609a      	str	r2, [r3, #8]

}
 80029fe:	46c0      	nop			; (mov r8, r8)
 8002a00:	46bd      	mov	sp, r7
 8002a02:	b002      	add	sp, #8
 8002a04:	bd80      	pop	{r7, pc}
 8002a06:	46c0      	nop			; (mov r8, r8)
 8002a08:	40010400 	.word	0x40010400

08002a0c <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b082      	sub	sp, #8
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8002a14:	4b04      	ldr	r3, [pc, #16]	; (8002a28 <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 8002a16:	68d9      	ldr	r1, [r3, #12]
 8002a18:	4b03      	ldr	r3, [pc, #12]	; (8002a28 <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 8002a1a:	687a      	ldr	r2, [r7, #4]
 8002a1c:	430a      	orrs	r2, r1
 8002a1e:	60da      	str	r2, [r3, #12]
}
 8002a20:	46c0      	nop			; (mov r8, r8)
 8002a22:	46bd      	mov	sp, r7
 8002a24:	b002      	add	sp, #8
 8002a26:	bd80      	pop	{r7, pc}
 8002a28:	40010400 	.word	0x40010400

08002a2c <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b082      	sub	sp, #8
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 8002a34:	4b05      	ldr	r3, [pc, #20]	; (8002a4c <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 8002a36:	68da      	ldr	r2, [r3, #12]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	43d9      	mvns	r1, r3
 8002a3c:	4b03      	ldr	r3, [pc, #12]	; (8002a4c <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 8002a3e:	400a      	ands	r2, r1
 8002a40:	60da      	str	r2, [r3, #12]
}
 8002a42:	46c0      	nop			; (mov r8, r8)
 8002a44:	46bd      	mov	sp, r7
 8002a46:	b002      	add	sp, #8
 8002a48:	bd80      	pop	{r7, pc}
 8002a4a:	46c0      	nop			; (mov r8, r8)
 8002a4c:	40010400 	.word	0x40010400

08002a50 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b084      	sub	sp, #16
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 8002a58:	230f      	movs	r3, #15
 8002a5a:	18fb      	adds	r3, r7, r3
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	791b      	ldrb	r3, [r3, #4]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d065      	beq.n	8002b34 <LL_EXTI_Init+0xe4>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d100      	bne.n	8002a72 <LL_EXTI_Init+0x22>
 8002a70:	e06b      	b.n	8002b4a <LL_EXTI_Init+0xfa>
    {
      switch (EXTI_InitStruct->Mode)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	795b      	ldrb	r3, [r3, #5]
 8002a76:	2b01      	cmp	r3, #1
 8002a78:	d00e      	beq.n	8002a98 <LL_EXTI_Init+0x48>
 8002a7a:	2b02      	cmp	r3, #2
 8002a7c:	d017      	beq.n	8002aae <LL_EXTI_Init+0x5e>
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d120      	bne.n	8002ac4 <LL_EXTI_Init+0x74>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	0018      	movs	r0, r3
 8002a88:	f7ff ff8c 	bl	80029a4 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	0018      	movs	r0, r3
 8002a92:	f7ff ff55 	bl	8002940 <LL_EXTI_EnableIT_0_31>
          break;
 8002a96:	e01a      	b.n	8002ace <LL_EXTI_Init+0x7e>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	0018      	movs	r0, r3
 8002a9e:	f7ff ff5f 	bl	8002960 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	0018      	movs	r0, r3
 8002aa8:	f7ff ff6c 	bl	8002984 <LL_EXTI_EnableEvent_0_31>
          break;
 8002aac:	e00f      	b.n	8002ace <LL_EXTI_Init+0x7e>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	0018      	movs	r0, r3
 8002ab4:	f7ff ff44 	bl	8002940 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	0018      	movs	r0, r3
 8002abe:	f7ff ff61 	bl	8002984 <LL_EXTI_EnableEvent_0_31>
          break;
 8002ac2:	e004      	b.n	8002ace <LL_EXTI_Init+0x7e>
        default:
          status = ERROR;
 8002ac4:	230f      	movs	r3, #15
 8002ac6:	18fb      	adds	r3, r7, r3
 8002ac8:	2201      	movs	r2, #1
 8002aca:	701a      	strb	r2, [r3, #0]
          break;
 8002acc:	46c0      	nop			; (mov r8, r8)
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	799b      	ldrb	r3, [r3, #6]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d039      	beq.n	8002b4a <LL_EXTI_Init+0xfa>
      {
        switch (EXTI_InitStruct->Trigger)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	799b      	ldrb	r3, [r3, #6]
 8002ada:	2b02      	cmp	r3, #2
 8002adc:	d00e      	beq.n	8002afc <LL_EXTI_Init+0xac>
 8002ade:	2b03      	cmp	r3, #3
 8002ae0:	d017      	beq.n	8002b12 <LL_EXTI_Init+0xc2>
 8002ae2:	2b01      	cmp	r3, #1
 8002ae4:	d120      	bne.n	8002b28 <LL_EXTI_Init+0xd8>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	0018      	movs	r0, r3
 8002aec:	f7ff ff9e 	bl	8002a2c <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	0018      	movs	r0, r3
 8002af6:	f7ff ff67 	bl	80029c8 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8002afa:	e027      	b.n	8002b4c <LL_EXTI_Init+0xfc>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	0018      	movs	r0, r3
 8002b02:	f7ff ff71 	bl	80029e8 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	0018      	movs	r0, r3
 8002b0c:	f7ff ff7e 	bl	8002a0c <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8002b10:	e01c      	b.n	8002b4c <LL_EXTI_Init+0xfc>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	0018      	movs	r0, r3
 8002b18:	f7ff ff56 	bl	80029c8 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	0018      	movs	r0, r3
 8002b22:	f7ff ff73 	bl	8002a0c <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8002b26:	e011      	b.n	8002b4c <LL_EXTI_Init+0xfc>
          default:
            status = ERROR;
 8002b28:	230f      	movs	r3, #15
 8002b2a:	18fb      	adds	r3, r7, r3
 8002b2c:	2201      	movs	r2, #1
 8002b2e:	701a      	strb	r2, [r3, #0]
            break;
 8002b30:	46c0      	nop			; (mov r8, r8)
 8002b32:	e00b      	b.n	8002b4c <LL_EXTI_Init+0xfc>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	0018      	movs	r0, r3
 8002b3a:	f7ff ff11 	bl	8002960 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	0018      	movs	r0, r3
 8002b44:	f7ff ff2e 	bl	80029a4 <LL_EXTI_DisableEvent_0_31>
 8002b48:	e000      	b.n	8002b4c <LL_EXTI_Init+0xfc>
      }
 8002b4a:	46c0      	nop			; (mov r8, r8)
  }
  return status;
 8002b4c:	230f      	movs	r3, #15
 8002b4e:	18fb      	adds	r3, r7, r3
 8002b50:	781b      	ldrb	r3, [r3, #0]
}
 8002b52:	0018      	movs	r0, r3
 8002b54:	46bd      	mov	sp, r7
 8002b56:	b004      	add	sp, #16
 8002b58:	bd80      	pop	{r7, pc}

08002b5a <LL_GPIO_SetPinMode>:
{
 8002b5a:	b580      	push	{r7, lr}
 8002b5c:	b084      	sub	sp, #16
 8002b5e:	af00      	add	r7, sp, #0
 8002b60:	60f8      	str	r0, [r7, #12]
 8002b62:	60b9      	str	r1, [r7, #8]
 8002b64:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODER0), ((Pin * Pin) * Mode));
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	6819      	ldr	r1, [r3, #0]
 8002b6a:	68bb      	ldr	r3, [r7, #8]
 8002b6c:	68ba      	ldr	r2, [r7, #8]
 8002b6e:	435a      	muls	r2, r3
 8002b70:	0013      	movs	r3, r2
 8002b72:	005b      	lsls	r3, r3, #1
 8002b74:	189b      	adds	r3, r3, r2
 8002b76:	43db      	mvns	r3, r3
 8002b78:	400b      	ands	r3, r1
 8002b7a:	001a      	movs	r2, r3
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	68b9      	ldr	r1, [r7, #8]
 8002b80:	434b      	muls	r3, r1
 8002b82:	6879      	ldr	r1, [r7, #4]
 8002b84:	434b      	muls	r3, r1
 8002b86:	431a      	orrs	r2, r3
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	601a      	str	r2, [r3, #0]
}
 8002b8c:	46c0      	nop			; (mov r8, r8)
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	b004      	add	sp, #16
 8002b92:	bd80      	pop	{r7, pc}

08002b94 <LL_GPIO_SetPinOutputType>:
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b084      	sub	sp, #16
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	60f8      	str	r0, [r7, #12]
 8002b9c:	60b9      	str	r1, [r7, #8]
 8002b9e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	68ba      	ldr	r2, [r7, #8]
 8002ba6:	43d2      	mvns	r2, r2
 8002ba8:	401a      	ands	r2, r3
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	6879      	ldr	r1, [r7, #4]
 8002bae:	434b      	muls	r3, r1
 8002bb0:	431a      	orrs	r2, r3
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	605a      	str	r2, [r3, #4]
}
 8002bb6:	46c0      	nop			; (mov r8, r8)
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	b004      	add	sp, #16
 8002bbc:	bd80      	pop	{r7, pc}

08002bbe <LL_GPIO_SetPinSpeed>:
{
 8002bbe:	b580      	push	{r7, lr}
 8002bc0:	b084      	sub	sp, #16
 8002bc2:	af00      	add	r7, sp, #0
 8002bc4:	60f8      	str	r0, [r7, #12]
 8002bc6:	60b9      	str	r1, [r7, #8]
 8002bc8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEEDR0), ((Pin * Pin) * Speed));
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	6899      	ldr	r1, [r3, #8]
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	68ba      	ldr	r2, [r7, #8]
 8002bd2:	435a      	muls	r2, r3
 8002bd4:	0013      	movs	r3, r2
 8002bd6:	005b      	lsls	r3, r3, #1
 8002bd8:	189b      	adds	r3, r3, r2
 8002bda:	43db      	mvns	r3, r3
 8002bdc:	400b      	ands	r3, r1
 8002bde:	001a      	movs	r2, r3
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	68b9      	ldr	r1, [r7, #8]
 8002be4:	434b      	muls	r3, r1
 8002be6:	6879      	ldr	r1, [r7, #4]
 8002be8:	434b      	muls	r3, r1
 8002bea:	431a      	orrs	r2, r3
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	609a      	str	r2, [r3, #8]
}
 8002bf0:	46c0      	nop			; (mov r8, r8)
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	b004      	add	sp, #16
 8002bf6:	bd80      	pop	{r7, pc}

08002bf8 <LL_GPIO_SetPinPull>:
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b084      	sub	sp, #16
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	60f8      	str	r0, [r7, #12]
 8002c00:	60b9      	str	r1, [r7, #8]
 8002c02:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPDR0), ((Pin * Pin) * Pull));
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	68d9      	ldr	r1, [r3, #12]
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	68ba      	ldr	r2, [r7, #8]
 8002c0c:	435a      	muls	r2, r3
 8002c0e:	0013      	movs	r3, r2
 8002c10:	005b      	lsls	r3, r3, #1
 8002c12:	189b      	adds	r3, r3, r2
 8002c14:	43db      	mvns	r3, r3
 8002c16:	400b      	ands	r3, r1
 8002c18:	001a      	movs	r2, r3
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	68b9      	ldr	r1, [r7, #8]
 8002c1e:	434b      	muls	r3, r1
 8002c20:	6879      	ldr	r1, [r7, #4]
 8002c22:	434b      	muls	r3, r1
 8002c24:	431a      	orrs	r2, r3
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	60da      	str	r2, [r3, #12]
}
 8002c2a:	46c0      	nop			; (mov r8, r8)
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	b004      	add	sp, #16
 8002c30:	bd80      	pop	{r7, pc}

08002c32 <LL_GPIO_SetAFPin_0_7>:
{
 8002c32:	b580      	push	{r7, lr}
 8002c34:	b084      	sub	sp, #16
 8002c36:	af00      	add	r7, sp, #0
 8002c38:	60f8      	str	r0, [r7, #12]
 8002c3a:	60b9      	str	r1, [r7, #8]
 8002c3c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	6a19      	ldr	r1, [r3, #32]
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	68ba      	ldr	r2, [r7, #8]
 8002c46:	4353      	muls	r3, r2
 8002c48:	68ba      	ldr	r2, [r7, #8]
 8002c4a:	4353      	muls	r3, r2
 8002c4c:	68ba      	ldr	r2, [r7, #8]
 8002c4e:	435a      	muls	r2, r3
 8002c50:	0013      	movs	r3, r2
 8002c52:	011b      	lsls	r3, r3, #4
 8002c54:	1a9b      	subs	r3, r3, r2
 8002c56:	43db      	mvns	r3, r3
 8002c58:	400b      	ands	r3, r1
 8002c5a:	001a      	movs	r2, r3
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	68b9      	ldr	r1, [r7, #8]
 8002c60:	434b      	muls	r3, r1
 8002c62:	68b9      	ldr	r1, [r7, #8]
 8002c64:	434b      	muls	r3, r1
 8002c66:	68b9      	ldr	r1, [r7, #8]
 8002c68:	434b      	muls	r3, r1
 8002c6a:	6879      	ldr	r1, [r7, #4]
 8002c6c:	434b      	muls	r3, r1
 8002c6e:	431a      	orrs	r2, r3
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	621a      	str	r2, [r3, #32]
}
 8002c74:	46c0      	nop			; (mov r8, r8)
 8002c76:	46bd      	mov	sp, r7
 8002c78:	b004      	add	sp, #16
 8002c7a:	bd80      	pop	{r7, pc}

08002c7c <LL_GPIO_SetAFPin_8_15>:
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b084      	sub	sp, #16
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	60f8      	str	r0, [r7, #12]
 8002c84:	60b9      	str	r1, [r7, #8]
 8002c86:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	0a1b      	lsrs	r3, r3, #8
 8002c90:	68ba      	ldr	r2, [r7, #8]
 8002c92:	0a12      	lsrs	r2, r2, #8
 8002c94:	4353      	muls	r3, r2
 8002c96:	68ba      	ldr	r2, [r7, #8]
 8002c98:	0a12      	lsrs	r2, r2, #8
 8002c9a:	4353      	muls	r3, r2
 8002c9c:	68ba      	ldr	r2, [r7, #8]
 8002c9e:	0a12      	lsrs	r2, r2, #8
 8002ca0:	435a      	muls	r2, r3
 8002ca2:	0013      	movs	r3, r2
 8002ca4:	011b      	lsls	r3, r3, #4
 8002ca6:	1a9b      	subs	r3, r3, r2
 8002ca8:	43db      	mvns	r3, r3
 8002caa:	400b      	ands	r3, r1
 8002cac:	001a      	movs	r2, r3
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	0a1b      	lsrs	r3, r3, #8
 8002cb2:	68b9      	ldr	r1, [r7, #8]
 8002cb4:	0a09      	lsrs	r1, r1, #8
 8002cb6:	434b      	muls	r3, r1
 8002cb8:	68b9      	ldr	r1, [r7, #8]
 8002cba:	0a09      	lsrs	r1, r1, #8
 8002cbc:	434b      	muls	r3, r1
 8002cbe:	68b9      	ldr	r1, [r7, #8]
 8002cc0:	0a09      	lsrs	r1, r1, #8
 8002cc2:	434b      	muls	r3, r1
 8002cc4:	6879      	ldr	r1, [r7, #4]
 8002cc6:	434b      	muls	r3, r1
 8002cc8:	431a      	orrs	r2, r3
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002cce:	46c0      	nop			; (mov r8, r8)
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	b004      	add	sp, #16
 8002cd4:	bd80      	pop	{r7, pc}

08002cd6 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8002cd6:	b580      	push	{r7, lr}
 8002cd8:	b084      	sub	sp, #16
 8002cda:	af00      	add	r7, sp, #0
 8002cdc:	6078      	str	r0, [r7, #4]
 8002cde:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = 0;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	60fb      	str	r3, [r7, #12]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8002ce4:	e048      	b.n	8002d78 <LL_GPIO_Init+0xa2>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	2101      	movs	r1, #1
 8002cec:	68fa      	ldr	r2, [r7, #12]
 8002cee:	4091      	lsls	r1, r2
 8002cf0:	000a      	movs	r2, r1
 8002cf2:	4013      	ands	r3, r2
 8002cf4:	60bb      	str	r3, [r7, #8]

    if (currentpin != 0x00u)
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d03a      	beq.n	8002d72 <LL_GPIO_Init+0x9c>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	2b01      	cmp	r3, #1
 8002d02:	d003      	beq.n	8002d0c <LL_GPIO_Init+0x36>
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	2b02      	cmp	r3, #2
 8002d0a:	d10e      	bne.n	8002d2a <LL_GPIO_Init+0x54>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	689a      	ldr	r2, [r3, #8]
 8002d10:	68b9      	ldr	r1, [r7, #8]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	0018      	movs	r0, r3
 8002d16:	f7ff ff52 	bl	8002bbe <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	6819      	ldr	r1, [r3, #0]
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	68da      	ldr	r2, [r3, #12]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	0018      	movs	r0, r3
 8002d26:	f7ff ff35 	bl	8002b94 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	691a      	ldr	r2, [r3, #16]
 8002d2e:	68b9      	ldr	r1, [r7, #8]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	0018      	movs	r0, r3
 8002d34:	f7ff ff60 	bl	8002bf8 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	2b02      	cmp	r3, #2
 8002d3e:	d111      	bne.n	8002d64 <LL_GPIO_Init+0x8e>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	2bff      	cmp	r3, #255	; 0xff
 8002d44:	d807      	bhi.n	8002d56 <LL_GPIO_Init+0x80>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	695a      	ldr	r2, [r3, #20]
 8002d4a:	68b9      	ldr	r1, [r7, #8]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	0018      	movs	r0, r3
 8002d50:	f7ff ff6f 	bl	8002c32 <LL_GPIO_SetAFPin_0_7>
 8002d54:	e006      	b.n	8002d64 <LL_GPIO_Init+0x8e>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	695a      	ldr	r2, [r3, #20]
 8002d5a:	68b9      	ldr	r1, [r7, #8]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	0018      	movs	r0, r3
 8002d60:	f7ff ff8c 	bl	8002c7c <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	685a      	ldr	r2, [r3, #4]
 8002d68:	68b9      	ldr	r1, [r7, #8]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	0018      	movs	r0, r3
 8002d6e:	f7ff fef4 	bl	8002b5a <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	3301      	adds	r3, #1
 8002d76:	60fb      	str	r3, [r7, #12]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	681a      	ldr	r2, [r3, #0]
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	40da      	lsrs	r2, r3
 8002d80:	1e13      	subs	r3, r2, #0
 8002d82:	d1b0      	bne.n	8002ce6 <LL_GPIO_Init+0x10>
  }

  return (SUCCESS);
 8002d84:	2300      	movs	r3, #0
}
 8002d86:	0018      	movs	r0, r3
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	b004      	add	sp, #16
 8002d8c:	bd80      	pop	{r7, pc}
	...

08002d90 <LL_RCC_HSI_IsReady>:
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8002d94:	4b05      	ldr	r3, [pc, #20]	; (8002dac <LL_RCC_HSI_IsReady+0x1c>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	2202      	movs	r2, #2
 8002d9a:	4013      	ands	r3, r2
 8002d9c:	3b02      	subs	r3, #2
 8002d9e:	425a      	negs	r2, r3
 8002da0:	4153      	adcs	r3, r2
 8002da2:	b2db      	uxtb	r3, r3
}
 8002da4:	0018      	movs	r0, r3
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}
 8002daa:	46c0      	nop			; (mov r8, r8)
 8002dac:	40021000 	.word	0x40021000

08002db0 <LL_RCC_LSE_IsReady>:
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY));
 8002db4:	4b05      	ldr	r3, [pc, #20]	; (8002dcc <LL_RCC_LSE_IsReady+0x1c>)
 8002db6:	6a1b      	ldr	r3, [r3, #32]
 8002db8:	2202      	movs	r2, #2
 8002dba:	4013      	ands	r3, r2
 8002dbc:	3b02      	subs	r3, #2
 8002dbe:	425a      	negs	r2, r3
 8002dc0:	4153      	adcs	r3, r2
 8002dc2:	b2db      	uxtb	r3, r3
}
 8002dc4:	0018      	movs	r0, r3
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}
 8002dca:	46c0      	nop			; (mov r8, r8)
 8002dcc:	40021000 	.word	0x40021000

08002dd0 <LL_RCC_GetSysClkSource>:
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002dd4:	4b03      	ldr	r3, [pc, #12]	; (8002de4 <LL_RCC_GetSysClkSource+0x14>)
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	220c      	movs	r2, #12
 8002dda:	4013      	ands	r3, r2
}
 8002ddc:	0018      	movs	r0, r3
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}
 8002de2:	46c0      	nop			; (mov r8, r8)
 8002de4:	40021000 	.word	0x40021000

08002de8 <LL_RCC_GetAHBPrescaler>:
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002dec:	4b03      	ldr	r3, [pc, #12]	; (8002dfc <LL_RCC_GetAHBPrescaler+0x14>)
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	22f0      	movs	r2, #240	; 0xf0
 8002df2:	4013      	ands	r3, r2
}
 8002df4:	0018      	movs	r0, r3
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}
 8002dfa:	46c0      	nop			; (mov r8, r8)
 8002dfc:	40021000 	.word	0x40021000

08002e00 <LL_RCC_GetAPB1Prescaler>:
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8002e04:	4b03      	ldr	r3, [pc, #12]	; (8002e14 <LL_RCC_GetAPB1Prescaler+0x14>)
 8002e06:	685a      	ldr	r2, [r3, #4]
 8002e08:	23e0      	movs	r3, #224	; 0xe0
 8002e0a:	00db      	lsls	r3, r3, #3
 8002e0c:	4013      	ands	r3, r2
}
 8002e0e:	0018      	movs	r0, r3
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bd80      	pop	{r7, pc}
 8002e14:	40021000 	.word	0x40021000

08002e18 <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_HSI (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b082      	sub	sp, #8
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR3, (RCC_CFGR3_USART1SW << USARTx)) | (USARTx << 24U));
 8002e20:	4b06      	ldr	r3, [pc, #24]	; (8002e3c <LL_RCC_GetUSARTClockSource+0x24>)
 8002e22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e24:	2103      	movs	r1, #3
 8002e26:	687a      	ldr	r2, [r7, #4]
 8002e28:	4091      	lsls	r1, r2
 8002e2a:	000a      	movs	r2, r1
 8002e2c:	401a      	ands	r2, r3
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	061b      	lsls	r3, r3, #24
 8002e32:	4313      	orrs	r3, r2
}
 8002e34:	0018      	movs	r0, r3
 8002e36:	46bd      	mov	sp, r7
 8002e38:	b002      	add	sp, #8
 8002e3a:	bd80      	pop	{r7, pc}
 8002e3c:	40021000 	.word	0x40021000

08002e40 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI48 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 8002e44:	4b03      	ldr	r3, [pc, #12]	; (8002e54 <LL_RCC_PLL_GetMainSource+0x14>)
 8002e46:	685a      	ldr	r2, [r3, #4]
 8002e48:	2380      	movs	r3, #128	; 0x80
 8002e4a:	025b      	lsls	r3, r3, #9
 8002e4c:	4013      	ands	r3, r2
}
 8002e4e:	0018      	movs	r0, r3
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bd80      	pop	{r7, pc}
 8002e54:	40021000 	.word	0x40021000

08002e58 <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_14
  *         @arg @ref LL_RCC_PLL_MUL_15
  *         @arg @ref LL_RCC_PLL_MUL_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMUL));
 8002e5c:	4b03      	ldr	r3, [pc, #12]	; (8002e6c <LL_RCC_PLL_GetMultiplicator+0x14>)
 8002e5e:	685a      	ldr	r2, [r3, #4]
 8002e60:	23f0      	movs	r3, #240	; 0xf0
 8002e62:	039b      	lsls	r3, r3, #14
 8002e64:	4013      	ands	r3, r2
}
 8002e66:	0018      	movs	r0, r3
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bd80      	pop	{r7, pc}
 8002e6c:	40021000 	.word	0x40021000

08002e70 <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_14
  *         @arg @ref LL_RCC_PREDIV_DIV_15
  *         @arg @ref LL_RCC_PREDIV_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV));
 8002e74:	4b03      	ldr	r3, [pc, #12]	; (8002e84 <LL_RCC_PLL_GetPrediv+0x14>)
 8002e76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e78:	220f      	movs	r2, #15
 8002e7a:	4013      	ands	r3, r2
}
 8002e7c:	0018      	movs	r0, r3
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}
 8002e82:	46c0      	nop			; (mov r8, r8)
 8002e84:	40021000 	.word	0x40021000

08002e88 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b082      	sub	sp, #8
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8002e90:	f000 f85a 	bl	8002f48 <RCC_GetSystemClockFreq>
 8002e94:	0002      	movs	r2, r0
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	0018      	movs	r0, r3
 8002ea0:	f000 f876 	bl	8002f90 <RCC_GetHCLKClockFreq>
 8002ea4:	0002      	movs	r2, r0
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	0018      	movs	r0, r3
 8002eb0:	f000 f884 	bl	8002fbc <RCC_GetPCLK1ClockFreq>
 8002eb4:	0002      	movs	r2, r0
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	609a      	str	r2, [r3, #8]
}
 8002eba:	46c0      	nop			; (mov r8, r8)
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	b002      	add	sp, #8
 8002ec0:	bd80      	pop	{r7, pc}
	...

08002ec4 <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         @arg @ref LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b084      	sub	sp, #16
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));
#if defined(RCC_CFGR3_USART1SW)
  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d12b      	bne.n	8002f2e <LL_RCC_GetUSARTClockFreq+0x6a>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	0018      	movs	r0, r3
 8002eda:	f7ff ff9d 	bl	8002e18 <LL_RCC_GetUSARTClockSource>
 8002ede:	0003      	movs	r3, r0
 8002ee0:	2b02      	cmp	r3, #2
 8002ee2:	d00f      	beq.n	8002f04 <LL_RCC_GetUSARTClockFreq+0x40>
 8002ee4:	2b03      	cmp	r3, #3
 8002ee6:	d006      	beq.n	8002ef6 <LL_RCC_GetUSARTClockFreq+0x32>
 8002ee8:	2b01      	cmp	r3, #1
 8002eea:	d113      	bne.n	8002f14 <LL_RCC_GetUSARTClockFreq+0x50>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8002eec:	f000 f82c 	bl	8002f48 <RCC_GetSystemClockFreq>
 8002ef0:	0003      	movs	r3, r0
 8002ef2:	60fb      	str	r3, [r7, #12]
        break;
 8002ef4:	e020      	b.n	8002f38 <LL_RCC_GetUSARTClockFreq+0x74>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 8002ef6:	f7ff ff4b 	bl	8002d90 <LL_RCC_HSI_IsReady>
 8002efa:	1e03      	subs	r3, r0, #0
 8002efc:	d019      	beq.n	8002f32 <LL_RCC_GetUSARTClockFreq+0x6e>
        {
          usart_frequency = HSI_VALUE;
 8002efe:	4b11      	ldr	r3, [pc, #68]	; (8002f44 <LL_RCC_GetUSARTClockFreq+0x80>)
 8002f00:	60fb      	str	r3, [r7, #12]
        }
        break;
 8002f02:	e016      	b.n	8002f32 <LL_RCC_GetUSARTClockFreq+0x6e>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 8002f04:	f7ff ff54 	bl	8002db0 <LL_RCC_LSE_IsReady>
 8002f08:	1e03      	subs	r3, r0, #0
 8002f0a:	d014      	beq.n	8002f36 <LL_RCC_GetUSARTClockFreq+0x72>
        {
          usart_frequency = LSE_VALUE;
 8002f0c:	2380      	movs	r3, #128	; 0x80
 8002f0e:	021b      	lsls	r3, r3, #8
 8002f10:	60fb      	str	r3, [r7, #12]
        }
        break;
 8002f12:	e010      	b.n	8002f36 <LL_RCC_GetUSARTClockFreq+0x72>

      case LL_RCC_USART1_CLKSOURCE_PCLK1:  /* USART1 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8002f14:	f000 f818 	bl	8002f48 <RCC_GetSystemClockFreq>
 8002f18:	0003      	movs	r3, r0
 8002f1a:	0018      	movs	r0, r3
 8002f1c:	f000 f838 	bl	8002f90 <RCC_GetHCLKClockFreq>
 8002f20:	0003      	movs	r3, r0
 8002f22:	0018      	movs	r0, r3
 8002f24:	f000 f84a 	bl	8002fbc <RCC_GetPCLK1ClockFreq>
 8002f28:	0003      	movs	r3, r0
 8002f2a:	60fb      	str	r3, [r7, #12]
        break;
 8002f2c:	e004      	b.n	8002f38 <LL_RCC_GetUSARTClockFreq+0x74>
    }
  }
 8002f2e:	46c0      	nop			; (mov r8, r8)
 8002f30:	e002      	b.n	8002f38 <LL_RCC_GetUSARTClockFreq+0x74>
        break;
 8002f32:	46c0      	nop			; (mov r8, r8)
 8002f34:	e000      	b.n	8002f38 <LL_RCC_GetUSARTClockFreq+0x74>
        break;
 8002f36:	46c0      	nop			; (mov r8, r8)
        break;
    }
  }

#endif /* RCC_CFGR3_USART3SW */
  return usart_frequency;
 8002f38:	68fb      	ldr	r3, [r7, #12]
}
 8002f3a:	0018      	movs	r0, r3
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	b004      	add	sp, #16
 8002f40:	bd80      	pop	{r7, pc}
 8002f42:	46c0      	nop			; (mov r8, r8)
 8002f44:	007a1200 	.word	0x007a1200

08002f48 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b082      	sub	sp, #8
 8002f4c:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8002f52:	f7ff ff3d 	bl	8002dd0 <LL_RCC_GetSysClkSource>
 8002f56:	0003      	movs	r3, r0
 8002f58:	2b04      	cmp	r3, #4
 8002f5a:	d006      	beq.n	8002f6a <RCC_GetSystemClockFreq+0x22>
 8002f5c:	2b08      	cmp	r3, #8
 8002f5e:	d007      	beq.n	8002f70 <RCC_GetSystemClockFreq+0x28>
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d10a      	bne.n	8002f7a <RCC_GetSystemClockFreq+0x32>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8002f64:	4b09      	ldr	r3, [pc, #36]	; (8002f8c <RCC_GetSystemClockFreq+0x44>)
 8002f66:	607b      	str	r3, [r7, #4]
      break;
 8002f68:	e00a      	b.n	8002f80 <RCC_GetSystemClockFreq+0x38>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8002f6a:	4b08      	ldr	r3, [pc, #32]	; (8002f8c <RCC_GetSystemClockFreq+0x44>)
 8002f6c:	607b      	str	r3, [r7, #4]
      break;
 8002f6e:	e007      	b.n	8002f80 <RCC_GetSystemClockFreq+0x38>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8002f70:	f000 f838 	bl	8002fe4 <RCC_PLL_GetFreqDomain_SYS>
 8002f74:	0003      	movs	r3, r0
 8002f76:	607b      	str	r3, [r7, #4]
      break;
 8002f78:	e002      	b.n	8002f80 <RCC_GetSystemClockFreq+0x38>
      frequency = HSI48_VALUE;
      break;
#endif /* RCC_HSI48_SUPPORT */

    default:
      frequency = HSI_VALUE;
 8002f7a:	4b04      	ldr	r3, [pc, #16]	; (8002f8c <RCC_GetSystemClockFreq+0x44>)
 8002f7c:	607b      	str	r3, [r7, #4]
      break;
 8002f7e:	46c0      	nop			; (mov r8, r8)
  }

  return frequency;
 8002f80:	687b      	ldr	r3, [r7, #4]
}
 8002f82:	0018      	movs	r0, r3
 8002f84:	46bd      	mov	sp, r7
 8002f86:	b002      	add	sp, #8
 8002f88:	bd80      	pop	{r7, pc}
 8002f8a:	46c0      	nop			; (mov r8, r8)
 8002f8c:	007a1200 	.word	0x007a1200

08002f90 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b082      	sub	sp, #8
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8002f98:	f7ff ff26 	bl	8002de8 <LL_RCC_GetAHBPrescaler>
 8002f9c:	0003      	movs	r3, r0
 8002f9e:	091b      	lsrs	r3, r3, #4
 8002fa0:	220f      	movs	r2, #15
 8002fa2:	4013      	ands	r3, r2
 8002fa4:	4a04      	ldr	r2, [pc, #16]	; (8002fb8 <RCC_GetHCLKClockFreq+0x28>)
 8002fa6:	5cd3      	ldrb	r3, [r2, r3]
 8002fa8:	001a      	movs	r2, r3
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	40d3      	lsrs	r3, r2
}
 8002fae:	0018      	movs	r0, r3
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	b002      	add	sp, #8
 8002fb4:	bd80      	pop	{r7, pc}
 8002fb6:	46c0      	nop			; (mov r8, r8)
 8002fb8:	08003490 	.word	0x08003490

08002fbc <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b082      	sub	sp, #8
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8002fc4:	f7ff ff1c 	bl	8002e00 <LL_RCC_GetAPB1Prescaler>
 8002fc8:	0003      	movs	r3, r0
 8002fca:	0a1b      	lsrs	r3, r3, #8
 8002fcc:	4a04      	ldr	r2, [pc, #16]	; (8002fe0 <RCC_GetPCLK1ClockFreq+0x24>)
 8002fce:	5cd3      	ldrb	r3, [r2, r3]
 8002fd0:	001a      	movs	r2, r3
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	40d3      	lsrs	r3, r2
}
 8002fd6:	0018      	movs	r0, r3
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	b002      	add	sp, #8
 8002fdc:	bd80      	pop	{r7, pc}
 8002fde:	46c0      	nop			; (mov r8, r8)
 8002fe0:	080034a0 	.word	0x080034a0

08002fe4 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8002fe4:	b590      	push	{r4, r7, lr}
 8002fe6:	b083      	sub	sp, #12
 8002fe8:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 8002fea:	2300      	movs	r3, #0
 8002fec:	607b      	str	r3, [r7, #4]
 8002fee:	2300      	movs	r3, #0
 8002ff0:	603b      	str	r3, [r7, #0]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL divider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 8002ff2:	f7ff ff25 	bl	8002e40 <LL_RCC_PLL_GetMainSource>
 8002ff6:	0003      	movs	r3, r0
 8002ff8:	603b      	str	r3, [r7, #0]

  switch (pllsource)
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d004      	beq.n	800300a <RCC_PLL_GetFreqDomain_SYS+0x26>
 8003000:	2280      	movs	r2, #128	; 0x80
 8003002:	0252      	lsls	r2, r2, #9
 8003004:	4293      	cmp	r3, r2
 8003006:	d003      	beq.n	8003010 <RCC_PLL_GetFreqDomain_SYS+0x2c>
 8003008:	e005      	b.n	8003016 <RCC_PLL_GetFreqDomain_SYS+0x32>
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
    case LL_RCC_PLLSOURCE_HSI:       /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
#else
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
 800300a:	4b0f      	ldr	r3, [pc, #60]	; (8003048 <RCC_PLL_GetFreqDomain_SYS+0x64>)
 800300c:	607b      	str	r3, [r7, #4]
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 800300e:	e005      	b.n	800301c <RCC_PLL_GetFreqDomain_SYS+0x38>
      pllinputfreq = HSI48_VALUE;
      break;
#endif /* RCC_HSI48_SUPPORT */

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8003010:	4b0e      	ldr	r3, [pc, #56]	; (800304c <RCC_PLL_GetFreqDomain_SYS+0x68>)
 8003012:	607b      	str	r3, [r7, #4]
      break;
 8003014:	e002      	b.n	800301c <RCC_PLL_GetFreqDomain_SYS+0x38>

    default:
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
      pllinputfreq = HSI_VALUE;
#else
      pllinputfreq = HSI_VALUE / 2U;
 8003016:	4b0c      	ldr	r3, [pc, #48]	; (8003048 <RCC_PLL_GetFreqDomain_SYS+0x64>)
 8003018:	607b      	str	r3, [r7, #4]
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 800301a:	46c0      	nop			; (mov r8, r8)
  }
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator(), LL_RCC_PLL_GetPrediv());
#else
  return __LL_RCC_CALC_PLLCLK_FREQ((pllinputfreq / (LL_RCC_PLL_GetPrediv() + 1U)), LL_RCC_PLL_GetMultiplicator());
 800301c:	f7ff ff28 	bl	8002e70 <LL_RCC_PLL_GetPrediv>
 8003020:	0003      	movs	r3, r0
 8003022:	3301      	adds	r3, #1
 8003024:	0019      	movs	r1, r3
 8003026:	6878      	ldr	r0, [r7, #4]
 8003028:	f7fd f86e 	bl	8000108 <__udivsi3>
 800302c:	0003      	movs	r3, r0
 800302e:	001c      	movs	r4, r3
 8003030:	f7ff ff12 	bl	8002e58 <LL_RCC_PLL_GetMultiplicator>
 8003034:	0003      	movs	r3, r0
 8003036:	0c9b      	lsrs	r3, r3, #18
 8003038:	220f      	movs	r2, #15
 800303a:	4013      	ands	r3, r2
 800303c:	3302      	adds	r3, #2
 800303e:	4363      	muls	r3, r4
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
}
 8003040:	0018      	movs	r0, r3
 8003042:	46bd      	mov	sp, r7
 8003044:	b003      	add	sp, #12
 8003046:	bd90      	pop	{r4, r7, pc}
 8003048:	003d0900 	.word	0x003d0900
 800304c:	007a1200 	.word	0x007a1200

08003050 <LL_TIM_SetPrescaler>:
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b082      	sub	sp, #8
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
 8003058:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	683a      	ldr	r2, [r7, #0]
 800305e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003060:	46c0      	nop			; (mov r8, r8)
 8003062:	46bd      	mov	sp, r7
 8003064:	b002      	add	sp, #8
 8003066:	bd80      	pop	{r7, pc}

08003068 <LL_TIM_SetAutoReload>:
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b082      	sub	sp, #8
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
 8003070:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	683a      	ldr	r2, [r7, #0]
 8003076:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8003078:	46c0      	nop			; (mov r8, r8)
 800307a:	46bd      	mov	sp, r7
 800307c:	b002      	add	sp, #8
 800307e:	bd80      	pop	{r7, pc}

08003080 <LL_TIM_SetRepetitionCounter>:
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b082      	sub	sp, #8
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
 8003088:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	683a      	ldr	r2, [r7, #0]
 800308e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003090:	46c0      	nop			; (mov r8, r8)
 8003092:	46bd      	mov	sp, r7
 8003094:	b002      	add	sp, #8
 8003096:	bd80      	pop	{r7, pc}

08003098 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b082      	sub	sp, #8
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	695b      	ldr	r3, [r3, #20]
 80030a4:	2201      	movs	r2, #1
 80030a6:	431a      	orrs	r2, r3
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	615a      	str	r2, [r3, #20]
}
 80030ac:	46c0      	nop			; (mov r8, r8)
 80030ae:	46bd      	mov	sp, r7
 80030b0:	b002      	add	sp, #8
 80030b2:	bd80      	pop	{r7, pc}

080030b4 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b084      	sub	sp, #16
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
 80030bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	4a30      	ldr	r2, [pc, #192]	; (8003188 <LL_TIM_Init+0xd4>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d003      	beq.n	80030d4 <LL_TIM_Init+0x20>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	4a2f      	ldr	r2, [pc, #188]	; (800318c <LL_TIM_Init+0xd8>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d107      	bne.n	80030e4 <LL_TIM_Init+0x30>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	2270      	movs	r2, #112	; 0x70
 80030d8:	4393      	bics	r3, r2
 80030da:	001a      	movs	r2, r3
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	4313      	orrs	r3, r2
 80030e2:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	4a28      	ldr	r2, [pc, #160]	; (8003188 <LL_TIM_Init+0xd4>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d013      	beq.n	8003114 <LL_TIM_Init+0x60>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	4a27      	ldr	r2, [pc, #156]	; (800318c <LL_TIM_Init+0xd8>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d00f      	beq.n	8003114 <LL_TIM_Init+0x60>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	4a26      	ldr	r2, [pc, #152]	; (8003190 <LL_TIM_Init+0xdc>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d00b      	beq.n	8003114 <LL_TIM_Init+0x60>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	4a25      	ldr	r2, [pc, #148]	; (8003194 <LL_TIM_Init+0xe0>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d007      	beq.n	8003114 <LL_TIM_Init+0x60>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	4a24      	ldr	r2, [pc, #144]	; (8003198 <LL_TIM_Init+0xe4>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d003      	beq.n	8003114 <LL_TIM_Init+0x60>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	4a23      	ldr	r2, [pc, #140]	; (800319c <LL_TIM_Init+0xe8>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d106      	bne.n	8003122 <LL_TIM_Init+0x6e>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	4a22      	ldr	r2, [pc, #136]	; (80031a0 <LL_TIM_Init+0xec>)
 8003118:	401a      	ands	r2, r3
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	68db      	ldr	r3, [r3, #12]
 800311e:	4313      	orrs	r3, r2
 8003120:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	68fa      	ldr	r2, [r7, #12]
 8003126:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	689a      	ldr	r2, [r3, #8]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	0011      	movs	r1, r2
 8003130:	0018      	movs	r0, r3
 8003132:	f7ff ff99 	bl	8003068 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	881b      	ldrh	r3, [r3, #0]
 800313a:	001a      	movs	r2, r3
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	0011      	movs	r1, r2
 8003140:	0018      	movs	r0, r3
 8003142:	f7ff ff85 	bl	8003050 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	4a0f      	ldr	r2, [pc, #60]	; (8003188 <LL_TIM_Init+0xd4>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d00b      	beq.n	8003166 <LL_TIM_Init+0xb2>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	4a10      	ldr	r2, [pc, #64]	; (8003194 <LL_TIM_Init+0xe0>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d007      	beq.n	8003166 <LL_TIM_Init+0xb2>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	4a0f      	ldr	r2, [pc, #60]	; (8003198 <LL_TIM_Init+0xe4>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d003      	beq.n	8003166 <LL_TIM_Init+0xb2>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	4a0e      	ldr	r2, [pc, #56]	; (800319c <LL_TIM_Init+0xe8>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d106      	bne.n	8003174 <LL_TIM_Init+0xc0>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	691a      	ldr	r2, [r3, #16]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	0011      	movs	r1, r2
 800316e:	0018      	movs	r0, r3
 8003170:	f7ff ff86 	bl	8003080 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	0018      	movs	r0, r3
 8003178:	f7ff ff8e 	bl	8003098 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 800317c:	2300      	movs	r3, #0
}
 800317e:	0018      	movs	r0, r3
 8003180:	46bd      	mov	sp, r7
 8003182:	b004      	add	sp, #16
 8003184:	bd80      	pop	{r7, pc}
 8003186:	46c0      	nop			; (mov r8, r8)
 8003188:	40012c00 	.word	0x40012c00
 800318c:	40000400 	.word	0x40000400
 8003190:	40002000 	.word	0x40002000
 8003194:	40014000 	.word	0x40014000
 8003198:	40014400 	.word	0x40014400
 800319c:	40014800 	.word	0x40014800
 80031a0:	fffffcff 	.word	0xfffffcff

080031a4 <LL_USART_IsEnabled>:
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b082      	sub	sp, #8
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	2201      	movs	r2, #1
 80031b2:	4013      	ands	r3, r2
 80031b4:	2b01      	cmp	r3, #1
 80031b6:	d101      	bne.n	80031bc <LL_USART_IsEnabled+0x18>
 80031b8:	2301      	movs	r3, #1
 80031ba:	e000      	b.n	80031be <LL_USART_IsEnabled+0x1a>
 80031bc:	2300      	movs	r3, #0
}
 80031be:	0018      	movs	r0, r3
 80031c0:	46bd      	mov	sp, r7
 80031c2:	b002      	add	sp, #8
 80031c4:	bd80      	pop	{r7, pc}
	...

080031c8 <LL_USART_SetStopBitsLength>:
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b082      	sub	sp, #8
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
 80031d0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	4a05      	ldr	r2, [pc, #20]	; (80031ec <LL_USART_SetStopBitsLength+0x24>)
 80031d8:	401a      	ands	r2, r3
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	431a      	orrs	r2, r3
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	605a      	str	r2, [r3, #4]
}
 80031e2:	46c0      	nop			; (mov r8, r8)
 80031e4:	46bd      	mov	sp, r7
 80031e6:	b002      	add	sp, #8
 80031e8:	bd80      	pop	{r7, pc}
 80031ea:	46c0      	nop			; (mov r8, r8)
 80031ec:	ffffcfff 	.word	0xffffcfff

080031f0 <LL_USART_SetHWFlowCtrl>:
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b082      	sub	sp, #8
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
 80031f8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	689b      	ldr	r3, [r3, #8]
 80031fe:	4a05      	ldr	r2, [pc, #20]	; (8003214 <LL_USART_SetHWFlowCtrl+0x24>)
 8003200:	401a      	ands	r2, r3
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	431a      	orrs	r2, r3
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	609a      	str	r2, [r3, #8]
}
 800320a:	46c0      	nop			; (mov r8, r8)
 800320c:	46bd      	mov	sp, r7
 800320e:	b002      	add	sp, #8
 8003210:	bd80      	pop	{r7, pc}
 8003212:	46c0      	nop			; (mov r8, r8)
 8003214:	fffffcff 	.word	0xfffffcff

08003218 <LL_USART_SetBaudRate>:
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b086      	sub	sp, #24
 800321c:	af00      	add	r7, sp, #0
 800321e:	60f8      	str	r0, [r7, #12]
 8003220:	60b9      	str	r1, [r7, #8]
 8003222:	607a      	str	r2, [r7, #4]
 8003224:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8003226:	687a      	ldr	r2, [r7, #4]
 8003228:	2380      	movs	r3, #128	; 0x80
 800322a:	021b      	lsls	r3, r3, #8
 800322c:	429a      	cmp	r2, r3
 800322e:	d11c      	bne.n	800326a <LL_USART_SetBaudRate+0x52>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	005a      	lsls	r2, r3, #1
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	085b      	lsrs	r3, r3, #1
 8003238:	18d3      	adds	r3, r2, r3
 800323a:	6839      	ldr	r1, [r7, #0]
 800323c:	0018      	movs	r0, r3
 800323e:	f7fc ff63 	bl	8000108 <__udivsi3>
 8003242:	0003      	movs	r3, r0
 8003244:	b29b      	uxth	r3, r3
 8003246:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	4a10      	ldr	r2, [pc, #64]	; (800328c <LL_USART_SetBaudRate+0x74>)
 800324c:	4013      	ands	r3, r2
 800324e:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003250:	697b      	ldr	r3, [r7, #20]
 8003252:	085b      	lsrs	r3, r3, #1
 8003254:	b29b      	uxth	r3, r3
 8003256:	001a      	movs	r2, r3
 8003258:	2307      	movs	r3, #7
 800325a:	4013      	ands	r3, r2
 800325c:	693a      	ldr	r2, [r7, #16]
 800325e:	4313      	orrs	r3, r2
 8003260:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	693a      	ldr	r2, [r7, #16]
 8003266:	60da      	str	r2, [r3, #12]
}
 8003268:	e00c      	b.n	8003284 <LL_USART_SetBaudRate+0x6c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	085a      	lsrs	r2, r3, #1
 800326e:	68bb      	ldr	r3, [r7, #8]
 8003270:	18d3      	adds	r3, r2, r3
 8003272:	6839      	ldr	r1, [r7, #0]
 8003274:	0018      	movs	r0, r3
 8003276:	f7fc ff47 	bl	8000108 <__udivsi3>
 800327a:	0003      	movs	r3, r0
 800327c:	b29b      	uxth	r3, r3
 800327e:	001a      	movs	r2, r3
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	60da      	str	r2, [r3, #12]
}
 8003284:	46c0      	nop			; (mov r8, r8)
 8003286:	46bd      	mov	sp, r7
 8003288:	b006      	add	sp, #24
 800328a:	bd80      	pop	{r7, pc}
 800328c:	0000fff0 	.word	0x0000fff0

08003290 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8003290:	b590      	push	{r4, r7, lr}
 8003292:	b089      	sub	sp, #36	; 0x24
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
 8003298:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800329a:	231f      	movs	r3, #31
 800329c:	18fb      	adds	r3, r7, r3
 800329e:	2201      	movs	r2, #1
 80032a0:	701a      	strb	r2, [r3, #0]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 80032a2:	2300      	movs	r3, #0
 80032a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	0018      	movs	r0, r3
 80032aa:	f7ff ff7b 	bl	80031a4 <LL_USART_IsEnabled>
 80032ae:	1e03      	subs	r3, r0, #0
 80032b0:	d148      	bne.n	8003344 <LL_USART_Init+0xb4>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a27      	ldr	r2, [pc, #156]	; (8003354 <LL_USART_Init+0xc4>)
 80032b8:	401a      	ands	r2, r3
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	6859      	ldr	r1, [r3, #4]
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	68db      	ldr	r3, [r3, #12]
 80032c2:	4319      	orrs	r1, r3
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	691b      	ldr	r3, [r3, #16]
 80032c8:	4319      	orrs	r1, r3
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	699b      	ldr	r3, [r3, #24]
 80032ce:	430b      	orrs	r3, r1
 80032d0:	431a      	orrs	r2, r3
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	689a      	ldr	r2, [r3, #8]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	0011      	movs	r1, r2
 80032de:	0018      	movs	r0, r3
 80032e0:	f7ff ff72 	bl	80031c8 <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	695a      	ldr	r2, [r3, #20]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	0011      	movs	r1, r2
 80032ec:	0018      	movs	r0, r3
 80032ee:	f7ff ff7f 	bl	80031f0 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	4a18      	ldr	r2, [pc, #96]	; (8003358 <LL_USART_Init+0xc8>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d105      	bne.n	8003306 <LL_USART_Init+0x76>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 80032fa:	2000      	movs	r0, #0
 80032fc:	f7ff fde2 	bl	8002ec4 <LL_RCC_GetUSARTClockFreq>
 8003300:	0003      	movs	r3, r0
 8003302:	61bb      	str	r3, [r7, #24]
 8003304:	e00b      	b.n	800331e <LL_USART_Init+0x8e>
    }
#if defined(USART2)
    else if (USARTx == USART2)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	4a14      	ldr	r2, [pc, #80]	; (800335c <LL_USART_Init+0xcc>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d107      	bne.n	800331e <LL_USART_Init+0x8e>
    {
#if defined(RCC_CFGR3_USART2SW)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
#else
      /* USART2 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 800330e:	240c      	movs	r4, #12
 8003310:	193b      	adds	r3, r7, r4
 8003312:	0018      	movs	r0, r3
 8003314:	f7ff fdb8 	bl	8002e88 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 8003318:	193b      	adds	r3, r7, r4
 800331a:	689b      	ldr	r3, [r3, #8]
 800331c:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 800331e:	69bb      	ldr	r3, [r7, #24]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d00f      	beq.n	8003344 <LL_USART_Init+0xb4>
        && (USART_InitStruct->BaudRate != 0U))
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d00b      	beq.n	8003344 <LL_USART_Init+0xb4>
    {
      status = SUCCESS;
 800332c:	231f      	movs	r3, #31
 800332e:	18fb      	adds	r3, r7, r3
 8003330:	2200      	movs	r2, #0
 8003332:	701a      	strb	r2, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	699a      	ldr	r2, [r3, #24]
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	69b9      	ldr	r1, [r7, #24]
 800333e:	6878      	ldr	r0, [r7, #4]
 8003340:	f7ff ff6a 	bl	8003218 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MAX(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8003344:	231f      	movs	r3, #31
 8003346:	18fb      	adds	r3, r7, r3
 8003348:	781b      	ldrb	r3, [r3, #0]
}
 800334a:	0018      	movs	r0, r3
 800334c:	46bd      	mov	sp, r7
 800334e:	b009      	add	sp, #36	; 0x24
 8003350:	bd90      	pop	{r4, r7, pc}
 8003352:	46c0      	nop			; (mov r8, r8)
 8003354:	ffff69f3 	.word	0xffff69f3
 8003358:	40013800 	.word	0x40013800
 800335c:	40004400 	.word	0x40004400

08003360 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b082      	sub	sp, #8
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
 8003368:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 800336a:	6839      	ldr	r1, [r7, #0]
 800336c:	6878      	ldr	r0, [r7, #4]
 800336e:	f7fc fecb 	bl	8000108 <__udivsi3>
 8003372:	0003      	movs	r3, r0
 8003374:	001a      	movs	r2, r3
 8003376:	4b06      	ldr	r3, [pc, #24]	; (8003390 <LL_InitTick+0x30>)
 8003378:	3a01      	subs	r2, #1
 800337a:	605a      	str	r2, [r3, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 800337c:	4b04      	ldr	r3, [pc, #16]	; (8003390 <LL_InitTick+0x30>)
 800337e:	2200      	movs	r2, #0
 8003380:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003382:	4b03      	ldr	r3, [pc, #12]	; (8003390 <LL_InitTick+0x30>)
 8003384:	2205      	movs	r2, #5
 8003386:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8003388:	46c0      	nop			; (mov r8, r8)
 800338a:	46bd      	mov	sp, r7
 800338c:	b002      	add	sp, #8
 800338e:	bd80      	pop	{r7, pc}
 8003390:	e000e010 	.word	0xe000e010

08003394 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b082      	sub	sp, #8
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 800339c:	23fa      	movs	r3, #250	; 0xfa
 800339e:	009a      	lsls	r2, r3, #2
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	0011      	movs	r1, r2
 80033a4:	0018      	movs	r0, r3
 80033a6:	f7ff ffdb 	bl	8003360 <LL_InitTick>
}
 80033aa:	46c0      	nop			; (mov r8, r8)
 80033ac:	46bd      	mov	sp, r7
 80033ae:	b002      	add	sp, #8
 80033b0:	bd80      	pop	{r7, pc}
	...

080033b4 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b082      	sub	sp, #8
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 80033bc:	4b03      	ldr	r3, [pc, #12]	; (80033cc <LL_SetSystemCoreClock+0x18>)
 80033be:	687a      	ldr	r2, [r7, #4]
 80033c0:	601a      	str	r2, [r3, #0]
}
 80033c2:	46c0      	nop			; (mov r8, r8)
 80033c4:	46bd      	mov	sp, r7
 80033c6:	b002      	add	sp, #8
 80033c8:	bd80      	pop	{r7, pc}
 80033ca:	46c0      	nop			; (mov r8, r8)
 80033cc:	20000000 	.word	0x20000000

080033d0 <__libc_init_array>:
 80033d0:	b570      	push	{r4, r5, r6, lr}
 80033d2:	2600      	movs	r6, #0
 80033d4:	4d0c      	ldr	r5, [pc, #48]	; (8003408 <__libc_init_array+0x38>)
 80033d6:	4c0d      	ldr	r4, [pc, #52]	; (800340c <__libc_init_array+0x3c>)
 80033d8:	1b64      	subs	r4, r4, r5
 80033da:	10a4      	asrs	r4, r4, #2
 80033dc:	42a6      	cmp	r6, r4
 80033de:	d109      	bne.n	80033f4 <__libc_init_array+0x24>
 80033e0:	2600      	movs	r6, #0
 80033e2:	f000 f821 	bl	8003428 <_init>
 80033e6:	4d0a      	ldr	r5, [pc, #40]	; (8003410 <__libc_init_array+0x40>)
 80033e8:	4c0a      	ldr	r4, [pc, #40]	; (8003414 <__libc_init_array+0x44>)
 80033ea:	1b64      	subs	r4, r4, r5
 80033ec:	10a4      	asrs	r4, r4, #2
 80033ee:	42a6      	cmp	r6, r4
 80033f0:	d105      	bne.n	80033fe <__libc_init_array+0x2e>
 80033f2:	bd70      	pop	{r4, r5, r6, pc}
 80033f4:	00b3      	lsls	r3, r6, #2
 80033f6:	58eb      	ldr	r3, [r5, r3]
 80033f8:	4798      	blx	r3
 80033fa:	3601      	adds	r6, #1
 80033fc:	e7ee      	b.n	80033dc <__libc_init_array+0xc>
 80033fe:	00b3      	lsls	r3, r6, #2
 8003400:	58eb      	ldr	r3, [r5, r3]
 8003402:	4798      	blx	r3
 8003404:	3601      	adds	r6, #1
 8003406:	e7f2      	b.n	80033ee <__libc_init_array+0x1e>
 8003408:	080034a8 	.word	0x080034a8
 800340c:	080034a8 	.word	0x080034a8
 8003410:	080034a8 	.word	0x080034a8
 8003414:	080034ac 	.word	0x080034ac

08003418 <memset>:
 8003418:	0003      	movs	r3, r0
 800341a:	1812      	adds	r2, r2, r0
 800341c:	4293      	cmp	r3, r2
 800341e:	d100      	bne.n	8003422 <memset+0xa>
 8003420:	4770      	bx	lr
 8003422:	7019      	strb	r1, [r3, #0]
 8003424:	3301      	adds	r3, #1
 8003426:	e7f9      	b.n	800341c <memset+0x4>

08003428 <_init>:
 8003428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800342a:	46c0      	nop			; (mov r8, r8)
 800342c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800342e:	bc08      	pop	{r3}
 8003430:	469e      	mov	lr, r3
 8003432:	4770      	bx	lr

08003434 <_fini>:
 8003434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003436:	46c0      	nop			; (mov r8, r8)
 8003438:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800343a:	bc08      	pop	{r3}
 800343c:	469e      	mov	lr, r3
 800343e:	4770      	bx	lr
