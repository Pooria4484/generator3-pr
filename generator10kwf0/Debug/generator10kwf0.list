
generator10kwf0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003940  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08003a00  08003a00  00013a00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003a60  08003a60  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08003a60  08003a60  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003a60  08003a60  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003a60  08003a60  00013a60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003a64  08003a64  00013a64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08003a68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003ac  20000004  08003a6c  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003b0  08003a6c  000203b0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   000070d6  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001bd2  00000000  00000000  00027102  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008a8  00000000  00000000  00028cd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000007b0  00000000  00000000  00029580  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000bd8c  00000000  00000000  00029d30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000072cb  00000000  00000000  00035abc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0003de65  00000000  00000000  0003cd87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0007abec  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001ec8  00000000  00000000  0007ac40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000004 	.word	0x20000004
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080039e8 	.word	0x080039e8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000008 	.word	0x20000008
 8000104:	080039e8 	.word	0x080039e8

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_cdrcmple>:
 8000220:	4684      	mov	ip, r0
 8000222:	1c10      	adds	r0, r2, #0
 8000224:	4662      	mov	r2, ip
 8000226:	468c      	mov	ip, r1
 8000228:	1c19      	adds	r1, r3, #0
 800022a:	4663      	mov	r3, ip
 800022c:	e000      	b.n	8000230 <__aeabi_cdcmpeq>
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <__aeabi_cdcmpeq>:
 8000230:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000232:	f000 fb39 	bl	80008a8 <__ledf2>
 8000236:	2800      	cmp	r0, #0
 8000238:	d401      	bmi.n	800023e <__aeabi_cdcmpeq+0xe>
 800023a:	2100      	movs	r1, #0
 800023c:	42c8      	cmn	r0, r1
 800023e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000240 <__aeabi_dcmpeq>:
 8000240:	b510      	push	{r4, lr}
 8000242:	f000 fa83 	bl	800074c <__eqdf2>
 8000246:	4240      	negs	r0, r0
 8000248:	3001      	adds	r0, #1
 800024a:	bd10      	pop	{r4, pc}

0800024c <__aeabi_dcmplt>:
 800024c:	b510      	push	{r4, lr}
 800024e:	f000 fb2b 	bl	80008a8 <__ledf2>
 8000252:	2800      	cmp	r0, #0
 8000254:	db01      	blt.n	800025a <__aeabi_dcmplt+0xe>
 8000256:	2000      	movs	r0, #0
 8000258:	bd10      	pop	{r4, pc}
 800025a:	2001      	movs	r0, #1
 800025c:	bd10      	pop	{r4, pc}
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_dcmple>:
 8000260:	b510      	push	{r4, lr}
 8000262:	f000 fb21 	bl	80008a8 <__ledf2>
 8000266:	2800      	cmp	r0, #0
 8000268:	dd01      	ble.n	800026e <__aeabi_dcmple+0xe>
 800026a:	2000      	movs	r0, #0
 800026c:	bd10      	pop	{r4, pc}
 800026e:	2001      	movs	r0, #1
 8000270:	bd10      	pop	{r4, pc}
 8000272:	46c0      	nop			; (mov r8, r8)

08000274 <__aeabi_dcmpgt>:
 8000274:	b510      	push	{r4, lr}
 8000276:	f000 faa5 	bl	80007c4 <__gedf2>
 800027a:	2800      	cmp	r0, #0
 800027c:	dc01      	bgt.n	8000282 <__aeabi_dcmpgt+0xe>
 800027e:	2000      	movs	r0, #0
 8000280:	bd10      	pop	{r4, pc}
 8000282:	2001      	movs	r0, #1
 8000284:	bd10      	pop	{r4, pc}
 8000286:	46c0      	nop			; (mov r8, r8)

08000288 <__aeabi_dcmpge>:
 8000288:	b510      	push	{r4, lr}
 800028a:	f000 fa9b 	bl	80007c4 <__gedf2>
 800028e:	2800      	cmp	r0, #0
 8000290:	da01      	bge.n	8000296 <__aeabi_dcmpge+0xe>
 8000292:	2000      	movs	r0, #0
 8000294:	bd10      	pop	{r4, pc}
 8000296:	2001      	movs	r0, #1
 8000298:	bd10      	pop	{r4, pc}
 800029a:	46c0      	nop			; (mov r8, r8)

0800029c <__aeabi_cfrcmple>:
 800029c:	4684      	mov	ip, r0
 800029e:	1c08      	adds	r0, r1, #0
 80002a0:	4661      	mov	r1, ip
 80002a2:	e7ff      	b.n	80002a4 <__aeabi_cfcmpeq>

080002a4 <__aeabi_cfcmpeq>:
 80002a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80002a6:	f000 f8a7 	bl	80003f8 <__lesf2>
 80002aa:	2800      	cmp	r0, #0
 80002ac:	d401      	bmi.n	80002b2 <__aeabi_cfcmpeq+0xe>
 80002ae:	2100      	movs	r1, #0
 80002b0:	42c8      	cmn	r0, r1
 80002b2:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080002b4 <__aeabi_fcmpeq>:
 80002b4:	b510      	push	{r4, lr}
 80002b6:	f000 f82b 	bl	8000310 <__eqsf2>
 80002ba:	4240      	negs	r0, r0
 80002bc:	3001      	adds	r0, #1
 80002be:	bd10      	pop	{r4, pc}

080002c0 <__aeabi_fcmplt>:
 80002c0:	b510      	push	{r4, lr}
 80002c2:	f000 f899 	bl	80003f8 <__lesf2>
 80002c6:	2800      	cmp	r0, #0
 80002c8:	db01      	blt.n	80002ce <__aeabi_fcmplt+0xe>
 80002ca:	2000      	movs	r0, #0
 80002cc:	bd10      	pop	{r4, pc}
 80002ce:	2001      	movs	r0, #1
 80002d0:	bd10      	pop	{r4, pc}
 80002d2:	46c0      	nop			; (mov r8, r8)

080002d4 <__aeabi_fcmple>:
 80002d4:	b510      	push	{r4, lr}
 80002d6:	f000 f88f 	bl	80003f8 <__lesf2>
 80002da:	2800      	cmp	r0, #0
 80002dc:	dd01      	ble.n	80002e2 <__aeabi_fcmple+0xe>
 80002de:	2000      	movs	r0, #0
 80002e0:	bd10      	pop	{r4, pc}
 80002e2:	2001      	movs	r0, #1
 80002e4:	bd10      	pop	{r4, pc}
 80002e6:	46c0      	nop			; (mov r8, r8)

080002e8 <__aeabi_fcmpgt>:
 80002e8:	b510      	push	{r4, lr}
 80002ea:	f000 f839 	bl	8000360 <__gesf2>
 80002ee:	2800      	cmp	r0, #0
 80002f0:	dc01      	bgt.n	80002f6 <__aeabi_fcmpgt+0xe>
 80002f2:	2000      	movs	r0, #0
 80002f4:	bd10      	pop	{r4, pc}
 80002f6:	2001      	movs	r0, #1
 80002f8:	bd10      	pop	{r4, pc}
 80002fa:	46c0      	nop			; (mov r8, r8)

080002fc <__aeabi_fcmpge>:
 80002fc:	b510      	push	{r4, lr}
 80002fe:	f000 f82f 	bl	8000360 <__gesf2>
 8000302:	2800      	cmp	r0, #0
 8000304:	da01      	bge.n	800030a <__aeabi_fcmpge+0xe>
 8000306:	2000      	movs	r0, #0
 8000308:	bd10      	pop	{r4, pc}
 800030a:	2001      	movs	r0, #1
 800030c:	bd10      	pop	{r4, pc}
 800030e:	46c0      	nop			; (mov r8, r8)

08000310 <__eqsf2>:
 8000310:	b570      	push	{r4, r5, r6, lr}
 8000312:	0042      	lsls	r2, r0, #1
 8000314:	024e      	lsls	r6, r1, #9
 8000316:	004c      	lsls	r4, r1, #1
 8000318:	0245      	lsls	r5, r0, #9
 800031a:	0a6d      	lsrs	r5, r5, #9
 800031c:	0e12      	lsrs	r2, r2, #24
 800031e:	0fc3      	lsrs	r3, r0, #31
 8000320:	0a76      	lsrs	r6, r6, #9
 8000322:	0e24      	lsrs	r4, r4, #24
 8000324:	0fc9      	lsrs	r1, r1, #31
 8000326:	2aff      	cmp	r2, #255	; 0xff
 8000328:	d00f      	beq.n	800034a <__eqsf2+0x3a>
 800032a:	2cff      	cmp	r4, #255	; 0xff
 800032c:	d011      	beq.n	8000352 <__eqsf2+0x42>
 800032e:	2001      	movs	r0, #1
 8000330:	42a2      	cmp	r2, r4
 8000332:	d000      	beq.n	8000336 <__eqsf2+0x26>
 8000334:	bd70      	pop	{r4, r5, r6, pc}
 8000336:	42b5      	cmp	r5, r6
 8000338:	d1fc      	bne.n	8000334 <__eqsf2+0x24>
 800033a:	428b      	cmp	r3, r1
 800033c:	d00d      	beq.n	800035a <__eqsf2+0x4a>
 800033e:	2a00      	cmp	r2, #0
 8000340:	d1f8      	bne.n	8000334 <__eqsf2+0x24>
 8000342:	0028      	movs	r0, r5
 8000344:	1e45      	subs	r5, r0, #1
 8000346:	41a8      	sbcs	r0, r5
 8000348:	e7f4      	b.n	8000334 <__eqsf2+0x24>
 800034a:	2001      	movs	r0, #1
 800034c:	2d00      	cmp	r5, #0
 800034e:	d1f1      	bne.n	8000334 <__eqsf2+0x24>
 8000350:	e7eb      	b.n	800032a <__eqsf2+0x1a>
 8000352:	2001      	movs	r0, #1
 8000354:	2e00      	cmp	r6, #0
 8000356:	d1ed      	bne.n	8000334 <__eqsf2+0x24>
 8000358:	e7e9      	b.n	800032e <__eqsf2+0x1e>
 800035a:	2000      	movs	r0, #0
 800035c:	e7ea      	b.n	8000334 <__eqsf2+0x24>
 800035e:	46c0      	nop			; (mov r8, r8)

08000360 <__gesf2>:
 8000360:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000362:	0042      	lsls	r2, r0, #1
 8000364:	0246      	lsls	r6, r0, #9
 8000366:	024d      	lsls	r5, r1, #9
 8000368:	004c      	lsls	r4, r1, #1
 800036a:	0fc3      	lsrs	r3, r0, #31
 800036c:	0a76      	lsrs	r6, r6, #9
 800036e:	0e12      	lsrs	r2, r2, #24
 8000370:	0a6d      	lsrs	r5, r5, #9
 8000372:	0e24      	lsrs	r4, r4, #24
 8000374:	0fc8      	lsrs	r0, r1, #31
 8000376:	2aff      	cmp	r2, #255	; 0xff
 8000378:	d01f      	beq.n	80003ba <__gesf2+0x5a>
 800037a:	2cff      	cmp	r4, #255	; 0xff
 800037c:	d010      	beq.n	80003a0 <__gesf2+0x40>
 800037e:	2a00      	cmp	r2, #0
 8000380:	d11f      	bne.n	80003c2 <__gesf2+0x62>
 8000382:	4271      	negs	r1, r6
 8000384:	4171      	adcs	r1, r6
 8000386:	2c00      	cmp	r4, #0
 8000388:	d101      	bne.n	800038e <__gesf2+0x2e>
 800038a:	2d00      	cmp	r5, #0
 800038c:	d01e      	beq.n	80003cc <__gesf2+0x6c>
 800038e:	2900      	cmp	r1, #0
 8000390:	d10e      	bne.n	80003b0 <__gesf2+0x50>
 8000392:	4283      	cmp	r3, r0
 8000394:	d01e      	beq.n	80003d4 <__gesf2+0x74>
 8000396:	2102      	movs	r1, #2
 8000398:	1e58      	subs	r0, r3, #1
 800039a:	4008      	ands	r0, r1
 800039c:	3801      	subs	r0, #1
 800039e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80003a0:	2d00      	cmp	r5, #0
 80003a2:	d126      	bne.n	80003f2 <__gesf2+0x92>
 80003a4:	2a00      	cmp	r2, #0
 80003a6:	d1f4      	bne.n	8000392 <__gesf2+0x32>
 80003a8:	4271      	negs	r1, r6
 80003aa:	4171      	adcs	r1, r6
 80003ac:	2900      	cmp	r1, #0
 80003ae:	d0f0      	beq.n	8000392 <__gesf2+0x32>
 80003b0:	2800      	cmp	r0, #0
 80003b2:	d1f4      	bne.n	800039e <__gesf2+0x3e>
 80003b4:	2001      	movs	r0, #1
 80003b6:	4240      	negs	r0, r0
 80003b8:	e7f1      	b.n	800039e <__gesf2+0x3e>
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	d119      	bne.n	80003f2 <__gesf2+0x92>
 80003be:	2cff      	cmp	r4, #255	; 0xff
 80003c0:	d0ee      	beq.n	80003a0 <__gesf2+0x40>
 80003c2:	2c00      	cmp	r4, #0
 80003c4:	d1e5      	bne.n	8000392 <__gesf2+0x32>
 80003c6:	2d00      	cmp	r5, #0
 80003c8:	d1e3      	bne.n	8000392 <__gesf2+0x32>
 80003ca:	e7e4      	b.n	8000396 <__gesf2+0x36>
 80003cc:	2000      	movs	r0, #0
 80003ce:	2e00      	cmp	r6, #0
 80003d0:	d0e5      	beq.n	800039e <__gesf2+0x3e>
 80003d2:	e7e0      	b.n	8000396 <__gesf2+0x36>
 80003d4:	42a2      	cmp	r2, r4
 80003d6:	dc05      	bgt.n	80003e4 <__gesf2+0x84>
 80003d8:	dbea      	blt.n	80003b0 <__gesf2+0x50>
 80003da:	42ae      	cmp	r6, r5
 80003dc:	d802      	bhi.n	80003e4 <__gesf2+0x84>
 80003de:	d3e7      	bcc.n	80003b0 <__gesf2+0x50>
 80003e0:	2000      	movs	r0, #0
 80003e2:	e7dc      	b.n	800039e <__gesf2+0x3e>
 80003e4:	4241      	negs	r1, r0
 80003e6:	4141      	adcs	r1, r0
 80003e8:	4248      	negs	r0, r1
 80003ea:	2102      	movs	r1, #2
 80003ec:	4008      	ands	r0, r1
 80003ee:	3801      	subs	r0, #1
 80003f0:	e7d5      	b.n	800039e <__gesf2+0x3e>
 80003f2:	2002      	movs	r0, #2
 80003f4:	4240      	negs	r0, r0
 80003f6:	e7d2      	b.n	800039e <__gesf2+0x3e>

080003f8 <__lesf2>:
 80003f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80003fa:	0042      	lsls	r2, r0, #1
 80003fc:	0246      	lsls	r6, r0, #9
 80003fe:	024d      	lsls	r5, r1, #9
 8000400:	004c      	lsls	r4, r1, #1
 8000402:	0fc3      	lsrs	r3, r0, #31
 8000404:	0a76      	lsrs	r6, r6, #9
 8000406:	0e12      	lsrs	r2, r2, #24
 8000408:	0a6d      	lsrs	r5, r5, #9
 800040a:	0e24      	lsrs	r4, r4, #24
 800040c:	0fc8      	lsrs	r0, r1, #31
 800040e:	2aff      	cmp	r2, #255	; 0xff
 8000410:	d00d      	beq.n	800042e <__lesf2+0x36>
 8000412:	2cff      	cmp	r4, #255	; 0xff
 8000414:	d00f      	beq.n	8000436 <__lesf2+0x3e>
 8000416:	2a00      	cmp	r2, #0
 8000418:	d123      	bne.n	8000462 <__lesf2+0x6a>
 800041a:	4271      	negs	r1, r6
 800041c:	4171      	adcs	r1, r6
 800041e:	2c00      	cmp	r4, #0
 8000420:	d10f      	bne.n	8000442 <__lesf2+0x4a>
 8000422:	2d00      	cmp	r5, #0
 8000424:	d10d      	bne.n	8000442 <__lesf2+0x4a>
 8000426:	2000      	movs	r0, #0
 8000428:	2e00      	cmp	r6, #0
 800042a:	d014      	beq.n	8000456 <__lesf2+0x5e>
 800042c:	e00d      	b.n	800044a <__lesf2+0x52>
 800042e:	2e00      	cmp	r6, #0
 8000430:	d110      	bne.n	8000454 <__lesf2+0x5c>
 8000432:	2cff      	cmp	r4, #255	; 0xff
 8000434:	d115      	bne.n	8000462 <__lesf2+0x6a>
 8000436:	2d00      	cmp	r5, #0
 8000438:	d10c      	bne.n	8000454 <__lesf2+0x5c>
 800043a:	2a00      	cmp	r2, #0
 800043c:	d103      	bne.n	8000446 <__lesf2+0x4e>
 800043e:	4271      	negs	r1, r6
 8000440:	4171      	adcs	r1, r6
 8000442:	2900      	cmp	r1, #0
 8000444:	d108      	bne.n	8000458 <__lesf2+0x60>
 8000446:	4283      	cmp	r3, r0
 8000448:	d010      	beq.n	800046c <__lesf2+0x74>
 800044a:	2102      	movs	r1, #2
 800044c:	1e58      	subs	r0, r3, #1
 800044e:	4008      	ands	r0, r1
 8000450:	3801      	subs	r0, #1
 8000452:	e000      	b.n	8000456 <__lesf2+0x5e>
 8000454:	2002      	movs	r0, #2
 8000456:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000458:	2800      	cmp	r0, #0
 800045a:	d1fc      	bne.n	8000456 <__lesf2+0x5e>
 800045c:	2001      	movs	r0, #1
 800045e:	4240      	negs	r0, r0
 8000460:	e7f9      	b.n	8000456 <__lesf2+0x5e>
 8000462:	2c00      	cmp	r4, #0
 8000464:	d1ef      	bne.n	8000446 <__lesf2+0x4e>
 8000466:	2d00      	cmp	r5, #0
 8000468:	d1ed      	bne.n	8000446 <__lesf2+0x4e>
 800046a:	e7ee      	b.n	800044a <__lesf2+0x52>
 800046c:	42a2      	cmp	r2, r4
 800046e:	dc05      	bgt.n	800047c <__lesf2+0x84>
 8000470:	dbf2      	blt.n	8000458 <__lesf2+0x60>
 8000472:	42ae      	cmp	r6, r5
 8000474:	d802      	bhi.n	800047c <__lesf2+0x84>
 8000476:	d3ef      	bcc.n	8000458 <__lesf2+0x60>
 8000478:	2000      	movs	r0, #0
 800047a:	e7ec      	b.n	8000456 <__lesf2+0x5e>
 800047c:	4241      	negs	r1, r0
 800047e:	4141      	adcs	r1, r0
 8000480:	4248      	negs	r0, r1
 8000482:	2102      	movs	r1, #2
 8000484:	4008      	ands	r0, r1
 8000486:	3801      	subs	r0, #1
 8000488:	e7e5      	b.n	8000456 <__lesf2+0x5e>
 800048a:	46c0      	nop			; (mov r8, r8)

0800048c <__aeabi_fmul>:
 800048c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800048e:	4657      	mov	r7, sl
 8000490:	464e      	mov	r6, r9
 8000492:	4645      	mov	r5, r8
 8000494:	46de      	mov	lr, fp
 8000496:	0244      	lsls	r4, r0, #9
 8000498:	b5e0      	push	{r5, r6, r7, lr}
 800049a:	0045      	lsls	r5, r0, #1
 800049c:	1c0f      	adds	r7, r1, #0
 800049e:	0a64      	lsrs	r4, r4, #9
 80004a0:	0e2d      	lsrs	r5, r5, #24
 80004a2:	0fc6      	lsrs	r6, r0, #31
 80004a4:	2d00      	cmp	r5, #0
 80004a6:	d047      	beq.n	8000538 <__aeabi_fmul+0xac>
 80004a8:	2dff      	cmp	r5, #255	; 0xff
 80004aa:	d04d      	beq.n	8000548 <__aeabi_fmul+0xbc>
 80004ac:	2300      	movs	r3, #0
 80004ae:	2080      	movs	r0, #128	; 0x80
 80004b0:	469a      	mov	sl, r3
 80004b2:	469b      	mov	fp, r3
 80004b4:	00e4      	lsls	r4, r4, #3
 80004b6:	04c0      	lsls	r0, r0, #19
 80004b8:	4304      	orrs	r4, r0
 80004ba:	3d7f      	subs	r5, #127	; 0x7f
 80004bc:	0278      	lsls	r0, r7, #9
 80004be:	0a43      	lsrs	r3, r0, #9
 80004c0:	4699      	mov	r9, r3
 80004c2:	007a      	lsls	r2, r7, #1
 80004c4:	0ffb      	lsrs	r3, r7, #31
 80004c6:	4698      	mov	r8, r3
 80004c8:	0e12      	lsrs	r2, r2, #24
 80004ca:	464b      	mov	r3, r9
 80004cc:	d044      	beq.n	8000558 <__aeabi_fmul+0xcc>
 80004ce:	2aff      	cmp	r2, #255	; 0xff
 80004d0:	d011      	beq.n	80004f6 <__aeabi_fmul+0x6a>
 80004d2:	00d8      	lsls	r0, r3, #3
 80004d4:	2380      	movs	r3, #128	; 0x80
 80004d6:	04db      	lsls	r3, r3, #19
 80004d8:	4303      	orrs	r3, r0
 80004da:	4699      	mov	r9, r3
 80004dc:	2000      	movs	r0, #0
 80004de:	3a7f      	subs	r2, #127	; 0x7f
 80004e0:	18ad      	adds	r5, r5, r2
 80004e2:	4647      	mov	r7, r8
 80004e4:	4653      	mov	r3, sl
 80004e6:	4077      	eors	r7, r6
 80004e8:	1c69      	adds	r1, r5, #1
 80004ea:	2b0f      	cmp	r3, #15
 80004ec:	d83f      	bhi.n	800056e <__aeabi_fmul+0xe2>
 80004ee:	4a72      	ldr	r2, [pc, #456]	; (80006b8 <__aeabi_fmul+0x22c>)
 80004f0:	009b      	lsls	r3, r3, #2
 80004f2:	58d3      	ldr	r3, [r2, r3]
 80004f4:	469f      	mov	pc, r3
 80004f6:	35ff      	adds	r5, #255	; 0xff
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	d000      	beq.n	80004fe <__aeabi_fmul+0x72>
 80004fc:	e079      	b.n	80005f2 <__aeabi_fmul+0x166>
 80004fe:	4652      	mov	r2, sl
 8000500:	2302      	movs	r3, #2
 8000502:	431a      	orrs	r2, r3
 8000504:	4692      	mov	sl, r2
 8000506:	2002      	movs	r0, #2
 8000508:	e7eb      	b.n	80004e2 <__aeabi_fmul+0x56>
 800050a:	4647      	mov	r7, r8
 800050c:	464c      	mov	r4, r9
 800050e:	4683      	mov	fp, r0
 8000510:	465b      	mov	r3, fp
 8000512:	2b02      	cmp	r3, #2
 8000514:	d028      	beq.n	8000568 <__aeabi_fmul+0xdc>
 8000516:	2b03      	cmp	r3, #3
 8000518:	d100      	bne.n	800051c <__aeabi_fmul+0x90>
 800051a:	e0c6      	b.n	80006aa <__aeabi_fmul+0x21e>
 800051c:	2b01      	cmp	r3, #1
 800051e:	d14f      	bne.n	80005c0 <__aeabi_fmul+0x134>
 8000520:	2000      	movs	r0, #0
 8000522:	2400      	movs	r4, #0
 8000524:	05c0      	lsls	r0, r0, #23
 8000526:	07ff      	lsls	r7, r7, #31
 8000528:	4320      	orrs	r0, r4
 800052a:	4338      	orrs	r0, r7
 800052c:	bcf0      	pop	{r4, r5, r6, r7}
 800052e:	46bb      	mov	fp, r7
 8000530:	46b2      	mov	sl, r6
 8000532:	46a9      	mov	r9, r5
 8000534:	46a0      	mov	r8, r4
 8000536:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000538:	2c00      	cmp	r4, #0
 800053a:	d171      	bne.n	8000620 <__aeabi_fmul+0x194>
 800053c:	2304      	movs	r3, #4
 800053e:	469a      	mov	sl, r3
 8000540:	3b03      	subs	r3, #3
 8000542:	2500      	movs	r5, #0
 8000544:	469b      	mov	fp, r3
 8000546:	e7b9      	b.n	80004bc <__aeabi_fmul+0x30>
 8000548:	2c00      	cmp	r4, #0
 800054a:	d163      	bne.n	8000614 <__aeabi_fmul+0x188>
 800054c:	2308      	movs	r3, #8
 800054e:	469a      	mov	sl, r3
 8000550:	3b06      	subs	r3, #6
 8000552:	25ff      	movs	r5, #255	; 0xff
 8000554:	469b      	mov	fp, r3
 8000556:	e7b1      	b.n	80004bc <__aeabi_fmul+0x30>
 8000558:	2b00      	cmp	r3, #0
 800055a:	d150      	bne.n	80005fe <__aeabi_fmul+0x172>
 800055c:	4652      	mov	r2, sl
 800055e:	3301      	adds	r3, #1
 8000560:	431a      	orrs	r2, r3
 8000562:	4692      	mov	sl, r2
 8000564:	2001      	movs	r0, #1
 8000566:	e7bc      	b.n	80004e2 <__aeabi_fmul+0x56>
 8000568:	20ff      	movs	r0, #255	; 0xff
 800056a:	2400      	movs	r4, #0
 800056c:	e7da      	b.n	8000524 <__aeabi_fmul+0x98>
 800056e:	4648      	mov	r0, r9
 8000570:	0c26      	lsrs	r6, r4, #16
 8000572:	0424      	lsls	r4, r4, #16
 8000574:	0c22      	lsrs	r2, r4, #16
 8000576:	0404      	lsls	r4, r0, #16
 8000578:	0c24      	lsrs	r4, r4, #16
 800057a:	464b      	mov	r3, r9
 800057c:	0020      	movs	r0, r4
 800057e:	0c1b      	lsrs	r3, r3, #16
 8000580:	4350      	muls	r0, r2
 8000582:	4374      	muls	r4, r6
 8000584:	435a      	muls	r2, r3
 8000586:	435e      	muls	r6, r3
 8000588:	1912      	adds	r2, r2, r4
 800058a:	0c03      	lsrs	r3, r0, #16
 800058c:	189b      	adds	r3, r3, r2
 800058e:	429c      	cmp	r4, r3
 8000590:	d903      	bls.n	800059a <__aeabi_fmul+0x10e>
 8000592:	2280      	movs	r2, #128	; 0x80
 8000594:	0252      	lsls	r2, r2, #9
 8000596:	4694      	mov	ip, r2
 8000598:	4466      	add	r6, ip
 800059a:	0400      	lsls	r0, r0, #16
 800059c:	041a      	lsls	r2, r3, #16
 800059e:	0c00      	lsrs	r0, r0, #16
 80005a0:	1812      	adds	r2, r2, r0
 80005a2:	0194      	lsls	r4, r2, #6
 80005a4:	1e60      	subs	r0, r4, #1
 80005a6:	4184      	sbcs	r4, r0
 80005a8:	0c1b      	lsrs	r3, r3, #16
 80005aa:	0e92      	lsrs	r2, r2, #26
 80005ac:	199b      	adds	r3, r3, r6
 80005ae:	4314      	orrs	r4, r2
 80005b0:	019b      	lsls	r3, r3, #6
 80005b2:	431c      	orrs	r4, r3
 80005b4:	011b      	lsls	r3, r3, #4
 80005b6:	d572      	bpl.n	800069e <__aeabi_fmul+0x212>
 80005b8:	2001      	movs	r0, #1
 80005ba:	0863      	lsrs	r3, r4, #1
 80005bc:	4004      	ands	r4, r0
 80005be:	431c      	orrs	r4, r3
 80005c0:	0008      	movs	r0, r1
 80005c2:	307f      	adds	r0, #127	; 0x7f
 80005c4:	2800      	cmp	r0, #0
 80005c6:	dd3c      	ble.n	8000642 <__aeabi_fmul+0x1b6>
 80005c8:	0763      	lsls	r3, r4, #29
 80005ca:	d004      	beq.n	80005d6 <__aeabi_fmul+0x14a>
 80005cc:	230f      	movs	r3, #15
 80005ce:	4023      	ands	r3, r4
 80005d0:	2b04      	cmp	r3, #4
 80005d2:	d000      	beq.n	80005d6 <__aeabi_fmul+0x14a>
 80005d4:	3404      	adds	r4, #4
 80005d6:	0123      	lsls	r3, r4, #4
 80005d8:	d503      	bpl.n	80005e2 <__aeabi_fmul+0x156>
 80005da:	3180      	adds	r1, #128	; 0x80
 80005dc:	0008      	movs	r0, r1
 80005de:	4b37      	ldr	r3, [pc, #220]	; (80006bc <__aeabi_fmul+0x230>)
 80005e0:	401c      	ands	r4, r3
 80005e2:	28fe      	cmp	r0, #254	; 0xfe
 80005e4:	dcc0      	bgt.n	8000568 <__aeabi_fmul+0xdc>
 80005e6:	01a4      	lsls	r4, r4, #6
 80005e8:	0a64      	lsrs	r4, r4, #9
 80005ea:	b2c0      	uxtb	r0, r0
 80005ec:	e79a      	b.n	8000524 <__aeabi_fmul+0x98>
 80005ee:	0037      	movs	r7, r6
 80005f0:	e78e      	b.n	8000510 <__aeabi_fmul+0x84>
 80005f2:	4652      	mov	r2, sl
 80005f4:	2303      	movs	r3, #3
 80005f6:	431a      	orrs	r2, r3
 80005f8:	4692      	mov	sl, r2
 80005fa:	2003      	movs	r0, #3
 80005fc:	e771      	b.n	80004e2 <__aeabi_fmul+0x56>
 80005fe:	4648      	mov	r0, r9
 8000600:	f000 fa0a 	bl	8000a18 <__clzsi2>
 8000604:	464a      	mov	r2, r9
 8000606:	1f43      	subs	r3, r0, #5
 8000608:	409a      	lsls	r2, r3
 800060a:	1a2d      	subs	r5, r5, r0
 800060c:	4691      	mov	r9, r2
 800060e:	2000      	movs	r0, #0
 8000610:	3d76      	subs	r5, #118	; 0x76
 8000612:	e766      	b.n	80004e2 <__aeabi_fmul+0x56>
 8000614:	230c      	movs	r3, #12
 8000616:	469a      	mov	sl, r3
 8000618:	3b09      	subs	r3, #9
 800061a:	25ff      	movs	r5, #255	; 0xff
 800061c:	469b      	mov	fp, r3
 800061e:	e74d      	b.n	80004bc <__aeabi_fmul+0x30>
 8000620:	0020      	movs	r0, r4
 8000622:	f000 f9f9 	bl	8000a18 <__clzsi2>
 8000626:	2576      	movs	r5, #118	; 0x76
 8000628:	1f43      	subs	r3, r0, #5
 800062a:	409c      	lsls	r4, r3
 800062c:	2300      	movs	r3, #0
 800062e:	426d      	negs	r5, r5
 8000630:	469a      	mov	sl, r3
 8000632:	469b      	mov	fp, r3
 8000634:	1a2d      	subs	r5, r5, r0
 8000636:	e741      	b.n	80004bc <__aeabi_fmul+0x30>
 8000638:	2480      	movs	r4, #128	; 0x80
 800063a:	2700      	movs	r7, #0
 800063c:	20ff      	movs	r0, #255	; 0xff
 800063e:	03e4      	lsls	r4, r4, #15
 8000640:	e770      	b.n	8000524 <__aeabi_fmul+0x98>
 8000642:	2301      	movs	r3, #1
 8000644:	1a1b      	subs	r3, r3, r0
 8000646:	2b1b      	cmp	r3, #27
 8000648:	dd00      	ble.n	800064c <__aeabi_fmul+0x1c0>
 800064a:	e769      	b.n	8000520 <__aeabi_fmul+0x94>
 800064c:	319e      	adds	r1, #158	; 0x9e
 800064e:	0020      	movs	r0, r4
 8000650:	408c      	lsls	r4, r1
 8000652:	40d8      	lsrs	r0, r3
 8000654:	1e63      	subs	r3, r4, #1
 8000656:	419c      	sbcs	r4, r3
 8000658:	4304      	orrs	r4, r0
 800065a:	0763      	lsls	r3, r4, #29
 800065c:	d004      	beq.n	8000668 <__aeabi_fmul+0x1dc>
 800065e:	230f      	movs	r3, #15
 8000660:	4023      	ands	r3, r4
 8000662:	2b04      	cmp	r3, #4
 8000664:	d000      	beq.n	8000668 <__aeabi_fmul+0x1dc>
 8000666:	3404      	adds	r4, #4
 8000668:	0163      	lsls	r3, r4, #5
 800066a:	d51a      	bpl.n	80006a2 <__aeabi_fmul+0x216>
 800066c:	2001      	movs	r0, #1
 800066e:	2400      	movs	r4, #0
 8000670:	e758      	b.n	8000524 <__aeabi_fmul+0x98>
 8000672:	2080      	movs	r0, #128	; 0x80
 8000674:	03c0      	lsls	r0, r0, #15
 8000676:	4204      	tst	r4, r0
 8000678:	d009      	beq.n	800068e <__aeabi_fmul+0x202>
 800067a:	464b      	mov	r3, r9
 800067c:	4203      	tst	r3, r0
 800067e:	d106      	bne.n	800068e <__aeabi_fmul+0x202>
 8000680:	464c      	mov	r4, r9
 8000682:	4304      	orrs	r4, r0
 8000684:	0264      	lsls	r4, r4, #9
 8000686:	4647      	mov	r7, r8
 8000688:	20ff      	movs	r0, #255	; 0xff
 800068a:	0a64      	lsrs	r4, r4, #9
 800068c:	e74a      	b.n	8000524 <__aeabi_fmul+0x98>
 800068e:	2080      	movs	r0, #128	; 0x80
 8000690:	03c0      	lsls	r0, r0, #15
 8000692:	4304      	orrs	r4, r0
 8000694:	0264      	lsls	r4, r4, #9
 8000696:	0037      	movs	r7, r6
 8000698:	20ff      	movs	r0, #255	; 0xff
 800069a:	0a64      	lsrs	r4, r4, #9
 800069c:	e742      	b.n	8000524 <__aeabi_fmul+0x98>
 800069e:	0029      	movs	r1, r5
 80006a0:	e78e      	b.n	80005c0 <__aeabi_fmul+0x134>
 80006a2:	01a4      	lsls	r4, r4, #6
 80006a4:	2000      	movs	r0, #0
 80006a6:	0a64      	lsrs	r4, r4, #9
 80006a8:	e73c      	b.n	8000524 <__aeabi_fmul+0x98>
 80006aa:	2080      	movs	r0, #128	; 0x80
 80006ac:	03c0      	lsls	r0, r0, #15
 80006ae:	4304      	orrs	r4, r0
 80006b0:	0264      	lsls	r4, r4, #9
 80006b2:	20ff      	movs	r0, #255	; 0xff
 80006b4:	0a64      	lsrs	r4, r4, #9
 80006b6:	e735      	b.n	8000524 <__aeabi_fmul+0x98>
 80006b8:	08003a00 	.word	0x08003a00
 80006bc:	f7ffffff 	.word	0xf7ffffff

080006c0 <__aeabi_i2f>:
 80006c0:	b570      	push	{r4, r5, r6, lr}
 80006c2:	2800      	cmp	r0, #0
 80006c4:	d013      	beq.n	80006ee <__aeabi_i2f+0x2e>
 80006c6:	17c3      	asrs	r3, r0, #31
 80006c8:	18c5      	adds	r5, r0, r3
 80006ca:	405d      	eors	r5, r3
 80006cc:	0fc4      	lsrs	r4, r0, #31
 80006ce:	0028      	movs	r0, r5
 80006d0:	f000 f9a2 	bl	8000a18 <__clzsi2>
 80006d4:	239e      	movs	r3, #158	; 0x9e
 80006d6:	0001      	movs	r1, r0
 80006d8:	1a1b      	subs	r3, r3, r0
 80006da:	2b96      	cmp	r3, #150	; 0x96
 80006dc:	dc0f      	bgt.n	80006fe <__aeabi_i2f+0x3e>
 80006de:	2808      	cmp	r0, #8
 80006e0:	dd01      	ble.n	80006e6 <__aeabi_i2f+0x26>
 80006e2:	3908      	subs	r1, #8
 80006e4:	408d      	lsls	r5, r1
 80006e6:	026d      	lsls	r5, r5, #9
 80006e8:	0a6d      	lsrs	r5, r5, #9
 80006ea:	b2d8      	uxtb	r0, r3
 80006ec:	e002      	b.n	80006f4 <__aeabi_i2f+0x34>
 80006ee:	2400      	movs	r4, #0
 80006f0:	2000      	movs	r0, #0
 80006f2:	2500      	movs	r5, #0
 80006f4:	05c0      	lsls	r0, r0, #23
 80006f6:	4328      	orrs	r0, r5
 80006f8:	07e4      	lsls	r4, r4, #31
 80006fa:	4320      	orrs	r0, r4
 80006fc:	bd70      	pop	{r4, r5, r6, pc}
 80006fe:	2b99      	cmp	r3, #153	; 0x99
 8000700:	dd0b      	ble.n	800071a <__aeabi_i2f+0x5a>
 8000702:	2205      	movs	r2, #5
 8000704:	002e      	movs	r6, r5
 8000706:	1a12      	subs	r2, r2, r0
 8000708:	40d6      	lsrs	r6, r2
 800070a:	0002      	movs	r2, r0
 800070c:	321b      	adds	r2, #27
 800070e:	4095      	lsls	r5, r2
 8000710:	0028      	movs	r0, r5
 8000712:	1e45      	subs	r5, r0, #1
 8000714:	41a8      	sbcs	r0, r5
 8000716:	0035      	movs	r5, r6
 8000718:	4305      	orrs	r5, r0
 800071a:	2905      	cmp	r1, #5
 800071c:	dd01      	ble.n	8000722 <__aeabi_i2f+0x62>
 800071e:	1f4a      	subs	r2, r1, #5
 8000720:	4095      	lsls	r5, r2
 8000722:	002a      	movs	r2, r5
 8000724:	4e08      	ldr	r6, [pc, #32]	; (8000748 <__aeabi_i2f+0x88>)
 8000726:	4032      	ands	r2, r6
 8000728:	0768      	lsls	r0, r5, #29
 800072a:	d009      	beq.n	8000740 <__aeabi_i2f+0x80>
 800072c:	200f      	movs	r0, #15
 800072e:	4028      	ands	r0, r5
 8000730:	2804      	cmp	r0, #4
 8000732:	d005      	beq.n	8000740 <__aeabi_i2f+0x80>
 8000734:	3204      	adds	r2, #4
 8000736:	0150      	lsls	r0, r2, #5
 8000738:	d502      	bpl.n	8000740 <__aeabi_i2f+0x80>
 800073a:	239f      	movs	r3, #159	; 0x9f
 800073c:	4032      	ands	r2, r6
 800073e:	1a5b      	subs	r3, r3, r1
 8000740:	0192      	lsls	r2, r2, #6
 8000742:	0a55      	lsrs	r5, r2, #9
 8000744:	b2d8      	uxtb	r0, r3
 8000746:	e7d5      	b.n	80006f4 <__aeabi_i2f+0x34>
 8000748:	fbffffff 	.word	0xfbffffff

0800074c <__eqdf2>:
 800074c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800074e:	464f      	mov	r7, r9
 8000750:	4646      	mov	r6, r8
 8000752:	46d6      	mov	lr, sl
 8000754:	4694      	mov	ip, r2
 8000756:	4691      	mov	r9, r2
 8000758:	031a      	lsls	r2, r3, #12
 800075a:	0b12      	lsrs	r2, r2, #12
 800075c:	4d18      	ldr	r5, [pc, #96]	; (80007c0 <__eqdf2+0x74>)
 800075e:	b5c0      	push	{r6, r7, lr}
 8000760:	004c      	lsls	r4, r1, #1
 8000762:	030f      	lsls	r7, r1, #12
 8000764:	4692      	mov	sl, r2
 8000766:	005a      	lsls	r2, r3, #1
 8000768:	0006      	movs	r6, r0
 800076a:	4680      	mov	r8, r0
 800076c:	0b3f      	lsrs	r7, r7, #12
 800076e:	2001      	movs	r0, #1
 8000770:	0d64      	lsrs	r4, r4, #21
 8000772:	0fc9      	lsrs	r1, r1, #31
 8000774:	0d52      	lsrs	r2, r2, #21
 8000776:	0fdb      	lsrs	r3, r3, #31
 8000778:	42ac      	cmp	r4, r5
 800077a:	d00a      	beq.n	8000792 <__eqdf2+0x46>
 800077c:	42aa      	cmp	r2, r5
 800077e:	d003      	beq.n	8000788 <__eqdf2+0x3c>
 8000780:	4294      	cmp	r4, r2
 8000782:	d101      	bne.n	8000788 <__eqdf2+0x3c>
 8000784:	4557      	cmp	r7, sl
 8000786:	d00d      	beq.n	80007a4 <__eqdf2+0x58>
 8000788:	bce0      	pop	{r5, r6, r7}
 800078a:	46ba      	mov	sl, r7
 800078c:	46b1      	mov	r9, r6
 800078e:	46a8      	mov	r8, r5
 8000790:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000792:	003d      	movs	r5, r7
 8000794:	4335      	orrs	r5, r6
 8000796:	d1f7      	bne.n	8000788 <__eqdf2+0x3c>
 8000798:	42a2      	cmp	r2, r4
 800079a:	d1f5      	bne.n	8000788 <__eqdf2+0x3c>
 800079c:	4652      	mov	r2, sl
 800079e:	4665      	mov	r5, ip
 80007a0:	432a      	orrs	r2, r5
 80007a2:	d1f1      	bne.n	8000788 <__eqdf2+0x3c>
 80007a4:	2001      	movs	r0, #1
 80007a6:	45c8      	cmp	r8, r9
 80007a8:	d1ee      	bne.n	8000788 <__eqdf2+0x3c>
 80007aa:	4299      	cmp	r1, r3
 80007ac:	d006      	beq.n	80007bc <__eqdf2+0x70>
 80007ae:	2c00      	cmp	r4, #0
 80007b0:	d1ea      	bne.n	8000788 <__eqdf2+0x3c>
 80007b2:	433e      	orrs	r6, r7
 80007b4:	0030      	movs	r0, r6
 80007b6:	1e46      	subs	r6, r0, #1
 80007b8:	41b0      	sbcs	r0, r6
 80007ba:	e7e5      	b.n	8000788 <__eqdf2+0x3c>
 80007bc:	2000      	movs	r0, #0
 80007be:	e7e3      	b.n	8000788 <__eqdf2+0x3c>
 80007c0:	000007ff 	.word	0x000007ff

080007c4 <__gedf2>:
 80007c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007c6:	464e      	mov	r6, r9
 80007c8:	4645      	mov	r5, r8
 80007ca:	4657      	mov	r7, sl
 80007cc:	46de      	mov	lr, fp
 80007ce:	0004      	movs	r4, r0
 80007d0:	0018      	movs	r0, r3
 80007d2:	b5e0      	push	{r5, r6, r7, lr}
 80007d4:	0016      	movs	r6, r2
 80007d6:	031b      	lsls	r3, r3, #12
 80007d8:	0b1b      	lsrs	r3, r3, #12
 80007da:	4d32      	ldr	r5, [pc, #200]	; (80008a4 <__gedf2+0xe0>)
 80007dc:	030f      	lsls	r7, r1, #12
 80007de:	004a      	lsls	r2, r1, #1
 80007e0:	4699      	mov	r9, r3
 80007e2:	0043      	lsls	r3, r0, #1
 80007e4:	46a4      	mov	ip, r4
 80007e6:	46b0      	mov	r8, r6
 80007e8:	0b3f      	lsrs	r7, r7, #12
 80007ea:	0d52      	lsrs	r2, r2, #21
 80007ec:	0fc9      	lsrs	r1, r1, #31
 80007ee:	0d5b      	lsrs	r3, r3, #21
 80007f0:	0fc0      	lsrs	r0, r0, #31
 80007f2:	42aa      	cmp	r2, r5
 80007f4:	d029      	beq.n	800084a <__gedf2+0x86>
 80007f6:	42ab      	cmp	r3, r5
 80007f8:	d018      	beq.n	800082c <__gedf2+0x68>
 80007fa:	2a00      	cmp	r2, #0
 80007fc:	d12a      	bne.n	8000854 <__gedf2+0x90>
 80007fe:	433c      	orrs	r4, r7
 8000800:	46a3      	mov	fp, r4
 8000802:	4265      	negs	r5, r4
 8000804:	4165      	adcs	r5, r4
 8000806:	2b00      	cmp	r3, #0
 8000808:	d102      	bne.n	8000810 <__gedf2+0x4c>
 800080a:	464c      	mov	r4, r9
 800080c:	4326      	orrs	r6, r4
 800080e:	d027      	beq.n	8000860 <__gedf2+0x9c>
 8000810:	2d00      	cmp	r5, #0
 8000812:	d115      	bne.n	8000840 <__gedf2+0x7c>
 8000814:	4281      	cmp	r1, r0
 8000816:	d028      	beq.n	800086a <__gedf2+0xa6>
 8000818:	2002      	movs	r0, #2
 800081a:	3901      	subs	r1, #1
 800081c:	4008      	ands	r0, r1
 800081e:	3801      	subs	r0, #1
 8000820:	bcf0      	pop	{r4, r5, r6, r7}
 8000822:	46bb      	mov	fp, r7
 8000824:	46b2      	mov	sl, r6
 8000826:	46a9      	mov	r9, r5
 8000828:	46a0      	mov	r8, r4
 800082a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800082c:	464d      	mov	r5, r9
 800082e:	432e      	orrs	r6, r5
 8000830:	d12f      	bne.n	8000892 <__gedf2+0xce>
 8000832:	2a00      	cmp	r2, #0
 8000834:	d1ee      	bne.n	8000814 <__gedf2+0x50>
 8000836:	433c      	orrs	r4, r7
 8000838:	4265      	negs	r5, r4
 800083a:	4165      	adcs	r5, r4
 800083c:	2d00      	cmp	r5, #0
 800083e:	d0e9      	beq.n	8000814 <__gedf2+0x50>
 8000840:	2800      	cmp	r0, #0
 8000842:	d1ed      	bne.n	8000820 <__gedf2+0x5c>
 8000844:	2001      	movs	r0, #1
 8000846:	4240      	negs	r0, r0
 8000848:	e7ea      	b.n	8000820 <__gedf2+0x5c>
 800084a:	003d      	movs	r5, r7
 800084c:	4325      	orrs	r5, r4
 800084e:	d120      	bne.n	8000892 <__gedf2+0xce>
 8000850:	4293      	cmp	r3, r2
 8000852:	d0eb      	beq.n	800082c <__gedf2+0x68>
 8000854:	2b00      	cmp	r3, #0
 8000856:	d1dd      	bne.n	8000814 <__gedf2+0x50>
 8000858:	464c      	mov	r4, r9
 800085a:	4326      	orrs	r6, r4
 800085c:	d1da      	bne.n	8000814 <__gedf2+0x50>
 800085e:	e7db      	b.n	8000818 <__gedf2+0x54>
 8000860:	465b      	mov	r3, fp
 8000862:	2000      	movs	r0, #0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d0db      	beq.n	8000820 <__gedf2+0x5c>
 8000868:	e7d6      	b.n	8000818 <__gedf2+0x54>
 800086a:	429a      	cmp	r2, r3
 800086c:	dc0a      	bgt.n	8000884 <__gedf2+0xc0>
 800086e:	dbe7      	blt.n	8000840 <__gedf2+0x7c>
 8000870:	454f      	cmp	r7, r9
 8000872:	d8d1      	bhi.n	8000818 <__gedf2+0x54>
 8000874:	d010      	beq.n	8000898 <__gedf2+0xd4>
 8000876:	2000      	movs	r0, #0
 8000878:	454f      	cmp	r7, r9
 800087a:	d2d1      	bcs.n	8000820 <__gedf2+0x5c>
 800087c:	2900      	cmp	r1, #0
 800087e:	d0e1      	beq.n	8000844 <__gedf2+0x80>
 8000880:	0008      	movs	r0, r1
 8000882:	e7cd      	b.n	8000820 <__gedf2+0x5c>
 8000884:	4243      	negs	r3, r0
 8000886:	4158      	adcs	r0, r3
 8000888:	2302      	movs	r3, #2
 800088a:	4240      	negs	r0, r0
 800088c:	4018      	ands	r0, r3
 800088e:	3801      	subs	r0, #1
 8000890:	e7c6      	b.n	8000820 <__gedf2+0x5c>
 8000892:	2002      	movs	r0, #2
 8000894:	4240      	negs	r0, r0
 8000896:	e7c3      	b.n	8000820 <__gedf2+0x5c>
 8000898:	45c4      	cmp	ip, r8
 800089a:	d8bd      	bhi.n	8000818 <__gedf2+0x54>
 800089c:	2000      	movs	r0, #0
 800089e:	45c4      	cmp	ip, r8
 80008a0:	d2be      	bcs.n	8000820 <__gedf2+0x5c>
 80008a2:	e7eb      	b.n	800087c <__gedf2+0xb8>
 80008a4:	000007ff 	.word	0x000007ff

080008a8 <__ledf2>:
 80008a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008aa:	464e      	mov	r6, r9
 80008ac:	4645      	mov	r5, r8
 80008ae:	4657      	mov	r7, sl
 80008b0:	46de      	mov	lr, fp
 80008b2:	0004      	movs	r4, r0
 80008b4:	0018      	movs	r0, r3
 80008b6:	b5e0      	push	{r5, r6, r7, lr}
 80008b8:	0016      	movs	r6, r2
 80008ba:	031b      	lsls	r3, r3, #12
 80008bc:	0b1b      	lsrs	r3, r3, #12
 80008be:	4d31      	ldr	r5, [pc, #196]	; (8000984 <__ledf2+0xdc>)
 80008c0:	030f      	lsls	r7, r1, #12
 80008c2:	004a      	lsls	r2, r1, #1
 80008c4:	4699      	mov	r9, r3
 80008c6:	0043      	lsls	r3, r0, #1
 80008c8:	46a4      	mov	ip, r4
 80008ca:	46b0      	mov	r8, r6
 80008cc:	0b3f      	lsrs	r7, r7, #12
 80008ce:	0d52      	lsrs	r2, r2, #21
 80008d0:	0fc9      	lsrs	r1, r1, #31
 80008d2:	0d5b      	lsrs	r3, r3, #21
 80008d4:	0fc0      	lsrs	r0, r0, #31
 80008d6:	42aa      	cmp	r2, r5
 80008d8:	d011      	beq.n	80008fe <__ledf2+0x56>
 80008da:	42ab      	cmp	r3, r5
 80008dc:	d014      	beq.n	8000908 <__ledf2+0x60>
 80008de:	2a00      	cmp	r2, #0
 80008e0:	d12f      	bne.n	8000942 <__ledf2+0x9a>
 80008e2:	433c      	orrs	r4, r7
 80008e4:	46a3      	mov	fp, r4
 80008e6:	4265      	negs	r5, r4
 80008e8:	4165      	adcs	r5, r4
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d114      	bne.n	8000918 <__ledf2+0x70>
 80008ee:	464c      	mov	r4, r9
 80008f0:	4326      	orrs	r6, r4
 80008f2:	d111      	bne.n	8000918 <__ledf2+0x70>
 80008f4:	465b      	mov	r3, fp
 80008f6:	2000      	movs	r0, #0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d017      	beq.n	800092c <__ledf2+0x84>
 80008fc:	e010      	b.n	8000920 <__ledf2+0x78>
 80008fe:	003d      	movs	r5, r7
 8000900:	4325      	orrs	r5, r4
 8000902:	d112      	bne.n	800092a <__ledf2+0x82>
 8000904:	4293      	cmp	r3, r2
 8000906:	d11c      	bne.n	8000942 <__ledf2+0x9a>
 8000908:	464d      	mov	r5, r9
 800090a:	432e      	orrs	r6, r5
 800090c:	d10d      	bne.n	800092a <__ledf2+0x82>
 800090e:	2a00      	cmp	r2, #0
 8000910:	d104      	bne.n	800091c <__ledf2+0x74>
 8000912:	433c      	orrs	r4, r7
 8000914:	4265      	negs	r5, r4
 8000916:	4165      	adcs	r5, r4
 8000918:	2d00      	cmp	r5, #0
 800091a:	d10d      	bne.n	8000938 <__ledf2+0x90>
 800091c:	4281      	cmp	r1, r0
 800091e:	d016      	beq.n	800094e <__ledf2+0xa6>
 8000920:	2002      	movs	r0, #2
 8000922:	3901      	subs	r1, #1
 8000924:	4008      	ands	r0, r1
 8000926:	3801      	subs	r0, #1
 8000928:	e000      	b.n	800092c <__ledf2+0x84>
 800092a:	2002      	movs	r0, #2
 800092c:	bcf0      	pop	{r4, r5, r6, r7}
 800092e:	46bb      	mov	fp, r7
 8000930:	46b2      	mov	sl, r6
 8000932:	46a9      	mov	r9, r5
 8000934:	46a0      	mov	r8, r4
 8000936:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000938:	2800      	cmp	r0, #0
 800093a:	d1f7      	bne.n	800092c <__ledf2+0x84>
 800093c:	2001      	movs	r0, #1
 800093e:	4240      	negs	r0, r0
 8000940:	e7f4      	b.n	800092c <__ledf2+0x84>
 8000942:	2b00      	cmp	r3, #0
 8000944:	d1ea      	bne.n	800091c <__ledf2+0x74>
 8000946:	464c      	mov	r4, r9
 8000948:	4326      	orrs	r6, r4
 800094a:	d1e7      	bne.n	800091c <__ledf2+0x74>
 800094c:	e7e8      	b.n	8000920 <__ledf2+0x78>
 800094e:	429a      	cmp	r2, r3
 8000950:	dd06      	ble.n	8000960 <__ledf2+0xb8>
 8000952:	4243      	negs	r3, r0
 8000954:	4158      	adcs	r0, r3
 8000956:	2302      	movs	r3, #2
 8000958:	4240      	negs	r0, r0
 800095a:	4018      	ands	r0, r3
 800095c:	3801      	subs	r0, #1
 800095e:	e7e5      	b.n	800092c <__ledf2+0x84>
 8000960:	429a      	cmp	r2, r3
 8000962:	dbe9      	blt.n	8000938 <__ledf2+0x90>
 8000964:	454f      	cmp	r7, r9
 8000966:	d8db      	bhi.n	8000920 <__ledf2+0x78>
 8000968:	d006      	beq.n	8000978 <__ledf2+0xd0>
 800096a:	2000      	movs	r0, #0
 800096c:	454f      	cmp	r7, r9
 800096e:	d2dd      	bcs.n	800092c <__ledf2+0x84>
 8000970:	2900      	cmp	r1, #0
 8000972:	d0e3      	beq.n	800093c <__ledf2+0x94>
 8000974:	0008      	movs	r0, r1
 8000976:	e7d9      	b.n	800092c <__ledf2+0x84>
 8000978:	45c4      	cmp	ip, r8
 800097a:	d8d1      	bhi.n	8000920 <__ledf2+0x78>
 800097c:	2000      	movs	r0, #0
 800097e:	45c4      	cmp	ip, r8
 8000980:	d2d4      	bcs.n	800092c <__ledf2+0x84>
 8000982:	e7f5      	b.n	8000970 <__ledf2+0xc8>
 8000984:	000007ff 	.word	0x000007ff

08000988 <__aeabi_f2d>:
 8000988:	b570      	push	{r4, r5, r6, lr}
 800098a:	0043      	lsls	r3, r0, #1
 800098c:	0246      	lsls	r6, r0, #9
 800098e:	0fc4      	lsrs	r4, r0, #31
 8000990:	20fe      	movs	r0, #254	; 0xfe
 8000992:	0e1b      	lsrs	r3, r3, #24
 8000994:	1c59      	adds	r1, r3, #1
 8000996:	0a75      	lsrs	r5, r6, #9
 8000998:	4208      	tst	r0, r1
 800099a:	d00c      	beq.n	80009b6 <__aeabi_f2d+0x2e>
 800099c:	22e0      	movs	r2, #224	; 0xe0
 800099e:	0092      	lsls	r2, r2, #2
 80009a0:	4694      	mov	ip, r2
 80009a2:	076d      	lsls	r5, r5, #29
 80009a4:	0b36      	lsrs	r6, r6, #12
 80009a6:	4463      	add	r3, ip
 80009a8:	051b      	lsls	r3, r3, #20
 80009aa:	4333      	orrs	r3, r6
 80009ac:	07e4      	lsls	r4, r4, #31
 80009ae:	4323      	orrs	r3, r4
 80009b0:	0028      	movs	r0, r5
 80009b2:	0019      	movs	r1, r3
 80009b4:	bd70      	pop	{r4, r5, r6, pc}
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d114      	bne.n	80009e4 <__aeabi_f2d+0x5c>
 80009ba:	2d00      	cmp	r5, #0
 80009bc:	d01b      	beq.n	80009f6 <__aeabi_f2d+0x6e>
 80009be:	0028      	movs	r0, r5
 80009c0:	f000 f82a 	bl	8000a18 <__clzsi2>
 80009c4:	280a      	cmp	r0, #10
 80009c6:	dc1c      	bgt.n	8000a02 <__aeabi_f2d+0x7a>
 80009c8:	230b      	movs	r3, #11
 80009ca:	002a      	movs	r2, r5
 80009cc:	1a1b      	subs	r3, r3, r0
 80009ce:	40da      	lsrs	r2, r3
 80009d0:	0003      	movs	r3, r0
 80009d2:	3315      	adds	r3, #21
 80009d4:	409d      	lsls	r5, r3
 80009d6:	4b0e      	ldr	r3, [pc, #56]	; (8000a10 <__aeabi_f2d+0x88>)
 80009d8:	0312      	lsls	r2, r2, #12
 80009da:	1a1b      	subs	r3, r3, r0
 80009dc:	055b      	lsls	r3, r3, #21
 80009de:	0b16      	lsrs	r6, r2, #12
 80009e0:	0d5b      	lsrs	r3, r3, #21
 80009e2:	e7e1      	b.n	80009a8 <__aeabi_f2d+0x20>
 80009e4:	2d00      	cmp	r5, #0
 80009e6:	d009      	beq.n	80009fc <__aeabi_f2d+0x74>
 80009e8:	0b32      	lsrs	r2, r6, #12
 80009ea:	2680      	movs	r6, #128	; 0x80
 80009ec:	0336      	lsls	r6, r6, #12
 80009ee:	4b09      	ldr	r3, [pc, #36]	; (8000a14 <__aeabi_f2d+0x8c>)
 80009f0:	076d      	lsls	r5, r5, #29
 80009f2:	4316      	orrs	r6, r2
 80009f4:	e7d8      	b.n	80009a8 <__aeabi_f2d+0x20>
 80009f6:	2300      	movs	r3, #0
 80009f8:	2600      	movs	r6, #0
 80009fa:	e7d5      	b.n	80009a8 <__aeabi_f2d+0x20>
 80009fc:	2600      	movs	r6, #0
 80009fe:	4b05      	ldr	r3, [pc, #20]	; (8000a14 <__aeabi_f2d+0x8c>)
 8000a00:	e7d2      	b.n	80009a8 <__aeabi_f2d+0x20>
 8000a02:	0003      	movs	r3, r0
 8000a04:	002a      	movs	r2, r5
 8000a06:	3b0b      	subs	r3, #11
 8000a08:	409a      	lsls	r2, r3
 8000a0a:	2500      	movs	r5, #0
 8000a0c:	e7e3      	b.n	80009d6 <__aeabi_f2d+0x4e>
 8000a0e:	46c0      	nop			; (mov r8, r8)
 8000a10:	00000389 	.word	0x00000389
 8000a14:	000007ff 	.word	0x000007ff

08000a18 <__clzsi2>:
 8000a18:	211c      	movs	r1, #28
 8000a1a:	2301      	movs	r3, #1
 8000a1c:	041b      	lsls	r3, r3, #16
 8000a1e:	4298      	cmp	r0, r3
 8000a20:	d301      	bcc.n	8000a26 <__clzsi2+0xe>
 8000a22:	0c00      	lsrs	r0, r0, #16
 8000a24:	3910      	subs	r1, #16
 8000a26:	0a1b      	lsrs	r3, r3, #8
 8000a28:	4298      	cmp	r0, r3
 8000a2a:	d301      	bcc.n	8000a30 <__clzsi2+0x18>
 8000a2c:	0a00      	lsrs	r0, r0, #8
 8000a2e:	3908      	subs	r1, #8
 8000a30:	091b      	lsrs	r3, r3, #4
 8000a32:	4298      	cmp	r0, r3
 8000a34:	d301      	bcc.n	8000a3a <__clzsi2+0x22>
 8000a36:	0900      	lsrs	r0, r0, #4
 8000a38:	3904      	subs	r1, #4
 8000a3a:	a202      	add	r2, pc, #8	; (adr r2, 8000a44 <__clzsi2+0x2c>)
 8000a3c:	5c10      	ldrb	r0, [r2, r0]
 8000a3e:	1840      	adds	r0, r0, r1
 8000a40:	4770      	bx	lr
 8000a42:	46c0      	nop			; (mov r8, r8)
 8000a44:	02020304 	.word	0x02020304
 8000a48:	01010101 	.word	0x01010101
	...

08000a54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b082      	sub	sp, #8
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	0002      	movs	r2, r0
 8000a5c:	1dfb      	adds	r3, r7, #7
 8000a5e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000a60:	1dfb      	adds	r3, r7, #7
 8000a62:	781b      	ldrb	r3, [r3, #0]
 8000a64:	2b7f      	cmp	r3, #127	; 0x7f
 8000a66:	d809      	bhi.n	8000a7c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a68:	1dfb      	adds	r3, r7, #7
 8000a6a:	781b      	ldrb	r3, [r3, #0]
 8000a6c:	001a      	movs	r2, r3
 8000a6e:	231f      	movs	r3, #31
 8000a70:	401a      	ands	r2, r3
 8000a72:	4b04      	ldr	r3, [pc, #16]	; (8000a84 <__NVIC_EnableIRQ+0x30>)
 8000a74:	2101      	movs	r1, #1
 8000a76:	4091      	lsls	r1, r2
 8000a78:	000a      	movs	r2, r1
 8000a7a:	601a      	str	r2, [r3, #0]
  }
}
 8000a7c:	46c0      	nop			; (mov r8, r8)
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	b002      	add	sp, #8
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	e000e100 	.word	0xe000e100

08000a88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a88:	b590      	push	{r4, r7, lr}
 8000a8a:	b083      	sub	sp, #12
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	0002      	movs	r2, r0
 8000a90:	6039      	str	r1, [r7, #0]
 8000a92:	1dfb      	adds	r3, r7, #7
 8000a94:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000a96:	1dfb      	adds	r3, r7, #7
 8000a98:	781b      	ldrb	r3, [r3, #0]
 8000a9a:	2b7f      	cmp	r3, #127	; 0x7f
 8000a9c:	d828      	bhi.n	8000af0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a9e:	4a2f      	ldr	r2, [pc, #188]	; (8000b5c <__NVIC_SetPriority+0xd4>)
 8000aa0:	1dfb      	adds	r3, r7, #7
 8000aa2:	781b      	ldrb	r3, [r3, #0]
 8000aa4:	b25b      	sxtb	r3, r3
 8000aa6:	089b      	lsrs	r3, r3, #2
 8000aa8:	33c0      	adds	r3, #192	; 0xc0
 8000aaa:	009b      	lsls	r3, r3, #2
 8000aac:	589b      	ldr	r3, [r3, r2]
 8000aae:	1dfa      	adds	r2, r7, #7
 8000ab0:	7812      	ldrb	r2, [r2, #0]
 8000ab2:	0011      	movs	r1, r2
 8000ab4:	2203      	movs	r2, #3
 8000ab6:	400a      	ands	r2, r1
 8000ab8:	00d2      	lsls	r2, r2, #3
 8000aba:	21ff      	movs	r1, #255	; 0xff
 8000abc:	4091      	lsls	r1, r2
 8000abe:	000a      	movs	r2, r1
 8000ac0:	43d2      	mvns	r2, r2
 8000ac2:	401a      	ands	r2, r3
 8000ac4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000ac6:	683b      	ldr	r3, [r7, #0]
 8000ac8:	019b      	lsls	r3, r3, #6
 8000aca:	22ff      	movs	r2, #255	; 0xff
 8000acc:	401a      	ands	r2, r3
 8000ace:	1dfb      	adds	r3, r7, #7
 8000ad0:	781b      	ldrb	r3, [r3, #0]
 8000ad2:	0018      	movs	r0, r3
 8000ad4:	2303      	movs	r3, #3
 8000ad6:	4003      	ands	r3, r0
 8000ad8:	00db      	lsls	r3, r3, #3
 8000ada:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000adc:	481f      	ldr	r0, [pc, #124]	; (8000b5c <__NVIC_SetPriority+0xd4>)
 8000ade:	1dfb      	adds	r3, r7, #7
 8000ae0:	781b      	ldrb	r3, [r3, #0]
 8000ae2:	b25b      	sxtb	r3, r3
 8000ae4:	089b      	lsrs	r3, r3, #2
 8000ae6:	430a      	orrs	r2, r1
 8000ae8:	33c0      	adds	r3, #192	; 0xc0
 8000aea:	009b      	lsls	r3, r3, #2
 8000aec:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000aee:	e031      	b.n	8000b54 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000af0:	4a1b      	ldr	r2, [pc, #108]	; (8000b60 <__NVIC_SetPriority+0xd8>)
 8000af2:	1dfb      	adds	r3, r7, #7
 8000af4:	781b      	ldrb	r3, [r3, #0]
 8000af6:	0019      	movs	r1, r3
 8000af8:	230f      	movs	r3, #15
 8000afa:	400b      	ands	r3, r1
 8000afc:	3b08      	subs	r3, #8
 8000afe:	089b      	lsrs	r3, r3, #2
 8000b00:	3306      	adds	r3, #6
 8000b02:	009b      	lsls	r3, r3, #2
 8000b04:	18d3      	adds	r3, r2, r3
 8000b06:	3304      	adds	r3, #4
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	1dfa      	adds	r2, r7, #7
 8000b0c:	7812      	ldrb	r2, [r2, #0]
 8000b0e:	0011      	movs	r1, r2
 8000b10:	2203      	movs	r2, #3
 8000b12:	400a      	ands	r2, r1
 8000b14:	00d2      	lsls	r2, r2, #3
 8000b16:	21ff      	movs	r1, #255	; 0xff
 8000b18:	4091      	lsls	r1, r2
 8000b1a:	000a      	movs	r2, r1
 8000b1c:	43d2      	mvns	r2, r2
 8000b1e:	401a      	ands	r2, r3
 8000b20:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b22:	683b      	ldr	r3, [r7, #0]
 8000b24:	019b      	lsls	r3, r3, #6
 8000b26:	22ff      	movs	r2, #255	; 0xff
 8000b28:	401a      	ands	r2, r3
 8000b2a:	1dfb      	adds	r3, r7, #7
 8000b2c:	781b      	ldrb	r3, [r3, #0]
 8000b2e:	0018      	movs	r0, r3
 8000b30:	2303      	movs	r3, #3
 8000b32:	4003      	ands	r3, r0
 8000b34:	00db      	lsls	r3, r3, #3
 8000b36:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b38:	4809      	ldr	r0, [pc, #36]	; (8000b60 <__NVIC_SetPriority+0xd8>)
 8000b3a:	1dfb      	adds	r3, r7, #7
 8000b3c:	781b      	ldrb	r3, [r3, #0]
 8000b3e:	001c      	movs	r4, r3
 8000b40:	230f      	movs	r3, #15
 8000b42:	4023      	ands	r3, r4
 8000b44:	3b08      	subs	r3, #8
 8000b46:	089b      	lsrs	r3, r3, #2
 8000b48:	430a      	orrs	r2, r1
 8000b4a:	3306      	adds	r3, #6
 8000b4c:	009b      	lsls	r3, r3, #2
 8000b4e:	18c3      	adds	r3, r0, r3
 8000b50:	3304      	adds	r3, #4
 8000b52:	601a      	str	r2, [r3, #0]
}
 8000b54:	46c0      	nop			; (mov r8, r8)
 8000b56:	46bd      	mov	sp, r7
 8000b58:	b003      	add	sp, #12
 8000b5a:	bd90      	pop	{r4, r7, pc}
 8000b5c:	e000e100 	.word	0xe000e100
 8000b60:	e000ed00 	.word	0xe000ed00

08000b64 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_71CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_239CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTime)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b082      	sub	sp, #8
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
 8000b6c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR, ADC_SMPR_SMP, SamplingTime);
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	695b      	ldr	r3, [r3, #20]
 8000b72:	2207      	movs	r2, #7
 8000b74:	4393      	bics	r3, r2
 8000b76:	001a      	movs	r2, r3
 8000b78:	683b      	ldr	r3, [r7, #0]
 8000b7a:	431a      	orrs	r2, r3
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	615a      	str	r2, [r3, #20]
}
 8000b80:	46c0      	nop			; (mov r8, r8)
 8000b82:	46bd      	mov	sp, r7
 8000b84:	b002      	add	sp, #8
 8000b86:	bd80      	pop	{r7, pc}

08000b88 <LL_ADC_REG_SetSequencerScanDirection>:
  *         @arg @ref LL_ADC_REG_SEQ_SCAN_DIR_FORWARD
  *         @arg @ref LL_ADC_REG_SEQ_SCAN_DIR_BACKWARD
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerScanDirection(ADC_TypeDef *ADCx, uint32_t ScanDirection)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b082      	sub	sp, #8
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
 8000b90:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_SCANDIR, ScanDirection);
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	68db      	ldr	r3, [r3, #12]
 8000b96:	2204      	movs	r2, #4
 8000b98:	4393      	bics	r3, r2
 8000b9a:	001a      	movs	r2, r3
 8000b9c:	683b      	ldr	r3, [r7, #0]
 8000b9e:	431a      	orrs	r2, r3
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	60da      	str	r2, [r3, #12]
}
 8000ba4:	46c0      	nop			; (mov r8, r8)
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	b002      	add	sp, #8
 8000baa:	bd80      	pop	{r7, pc}

08000bac <LL_ADC_REG_SetSequencerChAdd>:
  *         
  *         (1) On STM32F0, parameter not available on all devices: all devices except STM32F030x6, STM32F030x8, STM32F030xC, STM32F070x6, STM32F070xB.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b082      	sub	sp, #8
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
 8000bb4:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000bba:	683b      	ldr	r3, [r7, #0]
 8000bbc:	035b      	lsls	r3, r3, #13
 8000bbe:	0b5b      	lsrs	r3, r3, #13
 8000bc0:	431a      	orrs	r2, r3
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000bc6:	46c0      	nop			; (mov r8, r8)
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	b002      	add	sp, #8
 8000bcc:	bd80      	pop	{r7, pc}
	...

08000bd0 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b084      	sub	sp, #16
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8000bd8:	4b07      	ldr	r3, [pc, #28]	; (8000bf8 <LL_AHB1_GRP1_EnableClock+0x28>)
 8000bda:	6959      	ldr	r1, [r3, #20]
 8000bdc:	4b06      	ldr	r3, [pc, #24]	; (8000bf8 <LL_AHB1_GRP1_EnableClock+0x28>)
 8000bde:	687a      	ldr	r2, [r7, #4]
 8000be0:	430a      	orrs	r2, r1
 8000be2:	615a      	str	r2, [r3, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000be4:	4b04      	ldr	r3, [pc, #16]	; (8000bf8 <LL_AHB1_GRP1_EnableClock+0x28>)
 8000be6:	695b      	ldr	r3, [r3, #20]
 8000be8:	687a      	ldr	r2, [r7, #4]
 8000bea:	4013      	ands	r3, r2
 8000bec:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000bee:	68fb      	ldr	r3, [r7, #12]
}
 8000bf0:	46c0      	nop			; (mov r8, r8)
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	b004      	add	sp, #16
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	40021000 	.word	0x40021000

08000bfc <LL_APB1_GRP2_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b084      	sub	sp, #16
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000c04:	4b07      	ldr	r3, [pc, #28]	; (8000c24 <LL_APB1_GRP2_EnableClock+0x28>)
 8000c06:	6999      	ldr	r1, [r3, #24]
 8000c08:	4b06      	ldr	r3, [pc, #24]	; (8000c24 <LL_APB1_GRP2_EnableClock+0x28>)
 8000c0a:	687a      	ldr	r2, [r7, #4]
 8000c0c:	430a      	orrs	r2, r1
 8000c0e:	619a      	str	r2, [r3, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000c10:	4b04      	ldr	r3, [pc, #16]	; (8000c24 <LL_APB1_GRP2_EnableClock+0x28>)
 8000c12:	699b      	ldr	r3, [r3, #24]
 8000c14:	687a      	ldr	r2, [r7, #4]
 8000c16:	4013      	ands	r3, r2
 8000c18:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000c1a:	68fb      	ldr	r3, [r7, #12]
}
 8000c1c:	46c0      	nop			; (mov r8, r8)
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	b004      	add	sp, #16
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	40021000 	.word	0x40021000

08000c28 <MX_ADC_Init>:
/* USER CODE BEGIN 0 */
/* USER CODE END 0 */

/* ADC init function */
void MX_ADC_Init(void)
{
 8000c28:	b5b0      	push	{r4, r5, r7, lr}
 8000c2a:	b090      	sub	sp, #64	; 0x40
 8000c2c:	af00      	add	r7, sp, #0
  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 8000c2e:	2530      	movs	r5, #48	; 0x30
 8000c30:	197b      	adds	r3, r7, r5
 8000c32:	0018      	movs	r0, r3
 8000c34:	2310      	movs	r3, #16
 8000c36:	001a      	movs	r2, r3
 8000c38:	2100      	movs	r1, #0
 8000c3a:	f002 fecd 	bl	80039d8 <memset>
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8000c3e:	241c      	movs	r4, #28
 8000c40:	193b      	adds	r3, r7, r4
 8000c42:	0018      	movs	r0, r3
 8000c44:	2314      	movs	r3, #20
 8000c46:	001a      	movs	r2, r3
 8000c48:	2100      	movs	r1, #0
 8000c4a:	f002 fec5 	bl	80039d8 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c4e:	1d3b      	adds	r3, r7, #4
 8000c50:	0018      	movs	r0, r3
 8000c52:	2318      	movs	r3, #24
 8000c54:	001a      	movs	r2, r3
 8000c56:	2100      	movs	r1, #0
 8000c58:	f002 febe 	bl	80039d8 <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_ADC1);
 8000c5c:	2380      	movs	r3, #128	; 0x80
 8000c5e:	009b      	lsls	r3, r3, #2
 8000c60:	0018      	movs	r0, r3
 8000c62:	f7ff ffcb 	bl	8000bfc <LL_APB1_GRP2_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000c66:	2380      	movs	r3, #128	; 0x80
 8000c68:	029b      	lsls	r3, r3, #10
 8000c6a:	0018      	movs	r0, r3
 8000c6c:	f7ff ffb0 	bl	8000bd0 <LL_AHB1_GRP1_EnableClock>
  /**ADC GPIO Configuration
  PA2   ------> ADC_IN2
  PA3   ------> ADC_IN3
  PA4   ------> ADC_IN4
  */
  GPIO_InitStruct.Pin = ac_sample_Pin;
 8000c70:	1d3b      	adds	r3, r7, #4
 8000c72:	2204      	movs	r2, #4
 8000c74:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000c76:	1d3b      	adds	r3, r7, #4
 8000c78:	2203      	movs	r2, #3
 8000c7a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000c7c:	1d3b      	adds	r3, r7, #4
 8000c7e:	2200      	movs	r2, #0
 8000c80:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(ac_sample_GPIO_Port, &GPIO_InitStruct);
 8000c82:	1d3a      	adds	r2, r7, #4
 8000c84:	2390      	movs	r3, #144	; 0x90
 8000c86:	05db      	lsls	r3, r3, #23
 8000c88:	0011      	movs	r1, r2
 8000c8a:	0018      	movs	r0, r3
 8000c8c:	f002 fadc 	bl	8003248 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 8000c90:	1d3b      	adds	r3, r7, #4
 8000c92:	2208      	movs	r2, #8
 8000c94:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000c96:	1d3b      	adds	r3, r7, #4
 8000c98:	2203      	movs	r2, #3
 8000c9a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000c9c:	1d3b      	adds	r3, r7, #4
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ca2:	1d3a      	adds	r2, r7, #4
 8000ca4:	2390      	movs	r3, #144	; 0x90
 8000ca6:	05db      	lsls	r3, r3, #23
 8000ca8:	0011      	movs	r1, r2
 8000caa:	0018      	movs	r0, r3
 8000cac:	f002 facc 	bl	8003248 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = bat_adc_Pin;
 8000cb0:	1d3b      	adds	r3, r7, #4
 8000cb2:	2210      	movs	r2, #16
 8000cb4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000cb6:	1d3b      	adds	r3, r7, #4
 8000cb8:	2203      	movs	r2, #3
 8000cba:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000cbc:	1d3b      	adds	r3, r7, #4
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(bat_adc_GPIO_Port, &GPIO_InitStruct);
 8000cc2:	1d3a      	adds	r2, r7, #4
 8000cc4:	2390      	movs	r3, #144	; 0x90
 8000cc6:	05db      	lsls	r3, r3, #23
 8000cc8:	0011      	movs	r1, r2
 8000cca:	0018      	movs	r0, r3
 8000ccc:	f002 fabc 	bl	8003248 <LL_GPIO_Init>

  /* ADC interrupt Init */
  NVIC_SetPriority(ADC1_IRQn, 0);
 8000cd0:	2100      	movs	r1, #0
 8000cd2:	200c      	movs	r0, #12
 8000cd4:	f7ff fed8 	bl	8000a88 <__NVIC_SetPriority>
  NVIC_EnableIRQ(ADC1_IRQn);
 8000cd8:	200c      	movs	r0, #12
 8000cda:	f7ff febb 	bl	8000a54 <__NVIC_EnableIRQ>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerChAdd(ADC1, LL_ADC_CHANNEL_2);
 8000cde:	4a24      	ldr	r2, [pc, #144]	; (8000d70 <MX_ADC_Init+0x148>)
 8000ce0:	4b24      	ldr	r3, [pc, #144]	; (8000d74 <MX_ADC_Init+0x14c>)
 8000ce2:	0011      	movs	r1, r2
 8000ce4:	0018      	movs	r0, r3
 8000ce6:	f7ff ff61 	bl	8000bac <LL_ADC_REG_SetSequencerChAdd>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerChAdd(ADC1, LL_ADC_CHANNEL_3);
 8000cea:	4a23      	ldr	r2, [pc, #140]	; (8000d78 <MX_ADC_Init+0x150>)
 8000cec:	4b21      	ldr	r3, [pc, #132]	; (8000d74 <MX_ADC_Init+0x14c>)
 8000cee:	0011      	movs	r1, r2
 8000cf0:	0018      	movs	r0, r3
 8000cf2:	f7ff ff5b 	bl	8000bac <LL_ADC_REG_SetSequencerChAdd>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerChAdd(ADC1, LL_ADC_CHANNEL_4);
 8000cf6:	4a21      	ldr	r2, [pc, #132]	; (8000d7c <MX_ADC_Init+0x154>)
 8000cf8:	4b1e      	ldr	r3, [pc, #120]	; (8000d74 <MX_ADC_Init+0x14c>)
 8000cfa:	0011      	movs	r1, r2
 8000cfc:	0018      	movs	r0, r3
 8000cfe:	f7ff ff55 	bl	8000bac <LL_ADC_REG_SetSequencerChAdd>
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  ADC_InitStruct.Clock = LL_ADC_CLOCK_ASYNC;
 8000d02:	0029      	movs	r1, r5
 8000d04:	187b      	adds	r3, r7, r1
 8000d06:	2200      	movs	r2, #0
 8000d08:	601a      	str	r2, [r3, #0]
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 8000d0a:	187b      	adds	r3, r7, r1
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	605a      	str	r2, [r3, #4]
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8000d10:	187b      	adds	r3, r7, r1
 8000d12:	2200      	movs	r2, #0
 8000d14:	609a      	str	r2, [r3, #8]
  ADC_InitStruct.LowPowerMode = LL_ADC_LP_MODE_NONE;
 8000d16:	187b      	adds	r3, r7, r1
 8000d18:	2200      	movs	r2, #0
 8000d1a:	60da      	str	r2, [r3, #12]
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 8000d1c:	187b      	adds	r3, r7, r1
 8000d1e:	4a15      	ldr	r2, [pc, #84]	; (8000d74 <MX_ADC_Init+0x14c>)
 8000d20:	0019      	movs	r1, r3
 8000d22:	0010      	movs	r0, r2
 8000d24:	f002 f85e 	bl	8002de4 <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 8000d28:	193b      	adds	r3, r7, r4
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	601a      	str	r2, [r3, #0]
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 8000d2e:	193b      	adds	r3, r7, r4
 8000d30:	2200      	movs	r2, #0
 8000d32:	605a      	str	r2, [r3, #4]
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_CONTINUOUS;
 8000d34:	193b      	adds	r3, r7, r4
 8000d36:	2280      	movs	r2, #128	; 0x80
 8000d38:	0192      	lsls	r2, r2, #6
 8000d3a:	609a      	str	r2, [r3, #8]
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_LIMITED;
 8000d3c:	193b      	adds	r3, r7, r4
 8000d3e:	2201      	movs	r2, #1
 8000d40:	60da      	str	r2, [r3, #12]
  ADC_REG_InitStruct.Overrun = LL_ADC_REG_OVR_DATA_PRESERVED;
 8000d42:	193b      	adds	r3, r7, r4
 8000d44:	2200      	movs	r2, #0
 8000d46:	611a      	str	r2, [r3, #16]
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 8000d48:	193b      	adds	r3, r7, r4
 8000d4a:	4a0a      	ldr	r2, [pc, #40]	; (8000d74 <MX_ADC_Init+0x14c>)
 8000d4c:	0019      	movs	r1, r3
 8000d4e:	0010      	movs	r0, r2
 8000d50:	f002 f87e 	bl	8002e50 <LL_ADC_REG_Init>
  LL_ADC_REG_SetSequencerScanDirection(ADC1, LL_ADC_REG_SEQ_SCAN_DIR_BACKWARD);
 8000d54:	4b07      	ldr	r3, [pc, #28]	; (8000d74 <MX_ADC_Init+0x14c>)
 8000d56:	2104      	movs	r1, #4
 8000d58:	0018      	movs	r0, r3
 8000d5a:	f7ff ff15 	bl	8000b88 <LL_ADC_REG_SetSequencerScanDirection>
  LL_ADC_SetSamplingTimeCommonChannels(ADC1, LL_ADC_SAMPLINGTIME_239CYCLES_5);
 8000d5e:	4b05      	ldr	r3, [pc, #20]	; (8000d74 <MX_ADC_Init+0x14c>)
 8000d60:	2107      	movs	r1, #7
 8000d62:	0018      	movs	r0, r3
 8000d64:	f7ff fefe 	bl	8000b64 <LL_ADC_SetSamplingTimeCommonChannels>

}
 8000d68:	46c0      	nop			; (mov r8, r8)
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	b010      	add	sp, #64	; 0x40
 8000d6e:	bdb0      	pop	{r4, r5, r7, pc}
 8000d70:	08000004 	.word	0x08000004
 8000d74:	40012400 	.word	0x40012400
 8000d78:	0c000008 	.word	0x0c000008
 8000d7c:	10000010 	.word	0x10000010

08000d80 <__NVIC_EnableIRQ>:
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b082      	sub	sp, #8
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	0002      	movs	r2, r0
 8000d88:	1dfb      	adds	r3, r7, #7
 8000d8a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000d8c:	1dfb      	adds	r3, r7, #7
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	2b7f      	cmp	r3, #127	; 0x7f
 8000d92:	d809      	bhi.n	8000da8 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d94:	1dfb      	adds	r3, r7, #7
 8000d96:	781b      	ldrb	r3, [r3, #0]
 8000d98:	001a      	movs	r2, r3
 8000d9a:	231f      	movs	r3, #31
 8000d9c:	401a      	ands	r2, r3
 8000d9e:	4b04      	ldr	r3, [pc, #16]	; (8000db0 <__NVIC_EnableIRQ+0x30>)
 8000da0:	2101      	movs	r1, #1
 8000da2:	4091      	lsls	r1, r2
 8000da4:	000a      	movs	r2, r1
 8000da6:	601a      	str	r2, [r3, #0]
}
 8000da8:	46c0      	nop			; (mov r8, r8)
 8000daa:	46bd      	mov	sp, r7
 8000dac:	b002      	add	sp, #8
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	e000e100 	.word	0xe000e100

08000db4 <__NVIC_SetPriority>:
{
 8000db4:	b590      	push	{r4, r7, lr}
 8000db6:	b083      	sub	sp, #12
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	0002      	movs	r2, r0
 8000dbc:	6039      	str	r1, [r7, #0]
 8000dbe:	1dfb      	adds	r3, r7, #7
 8000dc0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000dc2:	1dfb      	adds	r3, r7, #7
 8000dc4:	781b      	ldrb	r3, [r3, #0]
 8000dc6:	2b7f      	cmp	r3, #127	; 0x7f
 8000dc8:	d828      	bhi.n	8000e1c <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000dca:	4a2f      	ldr	r2, [pc, #188]	; (8000e88 <__NVIC_SetPriority+0xd4>)
 8000dcc:	1dfb      	adds	r3, r7, #7
 8000dce:	781b      	ldrb	r3, [r3, #0]
 8000dd0:	b25b      	sxtb	r3, r3
 8000dd2:	089b      	lsrs	r3, r3, #2
 8000dd4:	33c0      	adds	r3, #192	; 0xc0
 8000dd6:	009b      	lsls	r3, r3, #2
 8000dd8:	589b      	ldr	r3, [r3, r2]
 8000dda:	1dfa      	adds	r2, r7, #7
 8000ddc:	7812      	ldrb	r2, [r2, #0]
 8000dde:	0011      	movs	r1, r2
 8000de0:	2203      	movs	r2, #3
 8000de2:	400a      	ands	r2, r1
 8000de4:	00d2      	lsls	r2, r2, #3
 8000de6:	21ff      	movs	r1, #255	; 0xff
 8000de8:	4091      	lsls	r1, r2
 8000dea:	000a      	movs	r2, r1
 8000dec:	43d2      	mvns	r2, r2
 8000dee:	401a      	ands	r2, r3
 8000df0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	019b      	lsls	r3, r3, #6
 8000df6:	22ff      	movs	r2, #255	; 0xff
 8000df8:	401a      	ands	r2, r3
 8000dfa:	1dfb      	adds	r3, r7, #7
 8000dfc:	781b      	ldrb	r3, [r3, #0]
 8000dfe:	0018      	movs	r0, r3
 8000e00:	2303      	movs	r3, #3
 8000e02:	4003      	ands	r3, r0
 8000e04:	00db      	lsls	r3, r3, #3
 8000e06:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e08:	481f      	ldr	r0, [pc, #124]	; (8000e88 <__NVIC_SetPriority+0xd4>)
 8000e0a:	1dfb      	adds	r3, r7, #7
 8000e0c:	781b      	ldrb	r3, [r3, #0]
 8000e0e:	b25b      	sxtb	r3, r3
 8000e10:	089b      	lsrs	r3, r3, #2
 8000e12:	430a      	orrs	r2, r1
 8000e14:	33c0      	adds	r3, #192	; 0xc0
 8000e16:	009b      	lsls	r3, r3, #2
 8000e18:	501a      	str	r2, [r3, r0]
}
 8000e1a:	e031      	b.n	8000e80 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e1c:	4a1b      	ldr	r2, [pc, #108]	; (8000e8c <__NVIC_SetPriority+0xd8>)
 8000e1e:	1dfb      	adds	r3, r7, #7
 8000e20:	781b      	ldrb	r3, [r3, #0]
 8000e22:	0019      	movs	r1, r3
 8000e24:	230f      	movs	r3, #15
 8000e26:	400b      	ands	r3, r1
 8000e28:	3b08      	subs	r3, #8
 8000e2a:	089b      	lsrs	r3, r3, #2
 8000e2c:	3306      	adds	r3, #6
 8000e2e:	009b      	lsls	r3, r3, #2
 8000e30:	18d3      	adds	r3, r2, r3
 8000e32:	3304      	adds	r3, #4
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	1dfa      	adds	r2, r7, #7
 8000e38:	7812      	ldrb	r2, [r2, #0]
 8000e3a:	0011      	movs	r1, r2
 8000e3c:	2203      	movs	r2, #3
 8000e3e:	400a      	ands	r2, r1
 8000e40:	00d2      	lsls	r2, r2, #3
 8000e42:	21ff      	movs	r1, #255	; 0xff
 8000e44:	4091      	lsls	r1, r2
 8000e46:	000a      	movs	r2, r1
 8000e48:	43d2      	mvns	r2, r2
 8000e4a:	401a      	ands	r2, r3
 8000e4c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	019b      	lsls	r3, r3, #6
 8000e52:	22ff      	movs	r2, #255	; 0xff
 8000e54:	401a      	ands	r2, r3
 8000e56:	1dfb      	adds	r3, r7, #7
 8000e58:	781b      	ldrb	r3, [r3, #0]
 8000e5a:	0018      	movs	r0, r3
 8000e5c:	2303      	movs	r3, #3
 8000e5e:	4003      	ands	r3, r0
 8000e60:	00db      	lsls	r3, r3, #3
 8000e62:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e64:	4809      	ldr	r0, [pc, #36]	; (8000e8c <__NVIC_SetPriority+0xd8>)
 8000e66:	1dfb      	adds	r3, r7, #7
 8000e68:	781b      	ldrb	r3, [r3, #0]
 8000e6a:	001c      	movs	r4, r3
 8000e6c:	230f      	movs	r3, #15
 8000e6e:	4023      	ands	r3, r4
 8000e70:	3b08      	subs	r3, #8
 8000e72:	089b      	lsrs	r3, r3, #2
 8000e74:	430a      	orrs	r2, r1
 8000e76:	3306      	adds	r3, #6
 8000e78:	009b      	lsls	r3, r3, #2
 8000e7a:	18c3      	adds	r3, r0, r3
 8000e7c:	3304      	adds	r3, #4
 8000e7e:	601a      	str	r2, [r3, #0]
}
 8000e80:	46c0      	nop			; (mov r8, r8)
 8000e82:	46bd      	mov	sp, r7
 8000e84:	b003      	add	sp, #12
 8000e86:	bd90      	pop	{r4, r7, pc}
 8000e88:	e000e100 	.word	0xe000e100
 8000e8c:	e000ed00 	.word	0xe000ed00

08000e90 <LL_AHB1_GRP1_EnableClock>:
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b084      	sub	sp, #16
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8000e98:	4b07      	ldr	r3, [pc, #28]	; (8000eb8 <LL_AHB1_GRP1_EnableClock+0x28>)
 8000e9a:	6959      	ldr	r1, [r3, #20]
 8000e9c:	4b06      	ldr	r3, [pc, #24]	; (8000eb8 <LL_AHB1_GRP1_EnableClock+0x28>)
 8000e9e:	687a      	ldr	r2, [r7, #4]
 8000ea0:	430a      	orrs	r2, r1
 8000ea2:	615a      	str	r2, [r3, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000ea4:	4b04      	ldr	r3, [pc, #16]	; (8000eb8 <LL_AHB1_GRP1_EnableClock+0x28>)
 8000ea6:	695b      	ldr	r3, [r3, #20]
 8000ea8:	687a      	ldr	r2, [r7, #4]
 8000eaa:	4013      	ands	r3, r2
 8000eac:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000eae:	68fb      	ldr	r3, [r7, #12]
}
 8000eb0:	46c0      	nop			; (mov r8, r8)
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	b004      	add	sp, #16
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	40021000 	.word	0x40021000

08000ebc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	af00      	add	r7, sp, #0

  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 8000ec0:	2001      	movs	r0, #1
 8000ec2:	f7ff ffe5 	bl	8000e90 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel1_IRQn, 0);
 8000ec6:	2100      	movs	r1, #0
 8000ec8:	2009      	movs	r0, #9
 8000eca:	f7ff ff73 	bl	8000db4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000ece:	2009      	movs	r0, #9
 8000ed0:	f7ff ff56 	bl	8000d80 <__NVIC_EnableIRQ>

}
 8000ed4:	46c0      	nop			; (mov r8, r8)
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
	...

08000edc <LL_AHB1_GRP1_EnableClock>:
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b084      	sub	sp, #16
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8000ee4:	4b07      	ldr	r3, [pc, #28]	; (8000f04 <LL_AHB1_GRP1_EnableClock+0x28>)
 8000ee6:	6959      	ldr	r1, [r3, #20]
 8000ee8:	4b06      	ldr	r3, [pc, #24]	; (8000f04 <LL_AHB1_GRP1_EnableClock+0x28>)
 8000eea:	687a      	ldr	r2, [r7, #4]
 8000eec:	430a      	orrs	r2, r1
 8000eee:	615a      	str	r2, [r3, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000ef0:	4b04      	ldr	r3, [pc, #16]	; (8000f04 <LL_AHB1_GRP1_EnableClock+0x28>)
 8000ef2:	695b      	ldr	r3, [r3, #20]
 8000ef4:	687a      	ldr	r2, [r7, #4]
 8000ef6:	4013      	ands	r3, r2
 8000ef8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000efa:	68fb      	ldr	r3, [r7, #12]
}
 8000efc:	46c0      	nop			; (mov r8, r8)
 8000efe:	46bd      	mov	sp, r7
 8000f00:	b004      	add	sp, #16
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	40021000 	.word	0x40021000

08000f08 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8000f08:	b590      	push	{r4, r7, lr}
 8000f0a:	b083      	sub	sp, #12
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
 8000f10:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], SYSCFG_EXTICR1_EXTI0 << (Line >> 16), Port << (Line >> 16));
 8000f12:	4a0f      	ldr	r2, [pc, #60]	; (8000f50 <LL_SYSCFG_SetEXTISource+0x48>)
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	21ff      	movs	r1, #255	; 0xff
 8000f18:	400b      	ands	r3, r1
 8000f1a:	3302      	adds	r3, #2
 8000f1c:	009b      	lsls	r3, r3, #2
 8000f1e:	589b      	ldr	r3, [r3, r2]
 8000f20:	683a      	ldr	r2, [r7, #0]
 8000f22:	0c12      	lsrs	r2, r2, #16
 8000f24:	210f      	movs	r1, #15
 8000f26:	4091      	lsls	r1, r2
 8000f28:	000a      	movs	r2, r1
 8000f2a:	43d2      	mvns	r2, r2
 8000f2c:	401a      	ands	r2, r3
 8000f2e:	0011      	movs	r1, r2
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	0c1b      	lsrs	r3, r3, #16
 8000f34:	687a      	ldr	r2, [r7, #4]
 8000f36:	409a      	lsls	r2, r3
 8000f38:	4805      	ldr	r0, [pc, #20]	; (8000f50 <LL_SYSCFG_SetEXTISource+0x48>)
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	24ff      	movs	r4, #255	; 0xff
 8000f3e:	4023      	ands	r3, r4
 8000f40:	430a      	orrs	r2, r1
 8000f42:	3302      	adds	r3, #2
 8000f44:	009b      	lsls	r3, r3, #2
 8000f46:	501a      	str	r2, [r3, r0]
}
 8000f48:	46c0      	nop			; (mov r8, r8)
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	b003      	add	sp, #12
 8000f4e:	bd90      	pop	{r4, r7, pc}
 8000f50:	40010000 	.word	0x40010000

08000f54 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b084      	sub	sp, #16
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	60f8      	str	r0, [r7, #12]
 8000f5c:	60b9      	str	r1, [r7, #8]
 8000f5e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODER0), ((Pin * Pin) * Mode));
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	6819      	ldr	r1, [r3, #0]
 8000f64:	68bb      	ldr	r3, [r7, #8]
 8000f66:	435b      	muls	r3, r3
 8000f68:	001a      	movs	r2, r3
 8000f6a:	0013      	movs	r3, r2
 8000f6c:	005b      	lsls	r3, r3, #1
 8000f6e:	189b      	adds	r3, r3, r2
 8000f70:	43db      	mvns	r3, r3
 8000f72:	400b      	ands	r3, r1
 8000f74:	001a      	movs	r2, r3
 8000f76:	68bb      	ldr	r3, [r7, #8]
 8000f78:	435b      	muls	r3, r3
 8000f7a:	6879      	ldr	r1, [r7, #4]
 8000f7c:	434b      	muls	r3, r1
 8000f7e:	431a      	orrs	r2, r3
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	601a      	str	r2, [r3, #0]
}
 8000f84:	46c0      	nop			; (mov r8, r8)
 8000f86:	46bd      	mov	sp, r7
 8000f88:	b004      	add	sp, #16
 8000f8a:	bd80      	pop	{r7, pc}

08000f8c <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b084      	sub	sp, #16
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	60f8      	str	r0, [r7, #12]
 8000f94:	60b9      	str	r1, [r7, #8]
 8000f96:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPDR0), ((Pin * Pin) * Pull));
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	68d9      	ldr	r1, [r3, #12]
 8000f9c:	68bb      	ldr	r3, [r7, #8]
 8000f9e:	435b      	muls	r3, r3
 8000fa0:	001a      	movs	r2, r3
 8000fa2:	0013      	movs	r3, r2
 8000fa4:	005b      	lsls	r3, r3, #1
 8000fa6:	189b      	adds	r3, r3, r2
 8000fa8:	43db      	mvns	r3, r3
 8000faa:	400b      	ands	r3, r1
 8000fac:	001a      	movs	r2, r3
 8000fae:	68bb      	ldr	r3, [r7, #8]
 8000fb0:	435b      	muls	r3, r3
 8000fb2:	6879      	ldr	r1, [r7, #4]
 8000fb4:	434b      	muls	r3, r1
 8000fb6:	431a      	orrs	r2, r3
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	60da      	str	r2, [r3, #12]
}
 8000fbc:	46c0      	nop			; (mov r8, r8)
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	b004      	add	sp, #16
 8000fc2:	bd80      	pop	{r7, pc}

08000fc4 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
 8000fcc:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	683a      	ldr	r2, [r7, #0]
 8000fd2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000fd4:	46c0      	nop			; (mov r8, r8)
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	b002      	add	sp, #8
 8000fda:	bd80      	pop	{r7, pc}

08000fdc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000fdc:	b590      	push	{r4, r7, lr}
 8000fde:	b089      	sub	sp, #36	; 0x24
 8000fe0:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8000fe2:	2418      	movs	r4, #24
 8000fe4:	193b      	adds	r3, r7, r4
 8000fe6:	0018      	movs	r0, r3
 8000fe8:	2308      	movs	r3, #8
 8000fea:	001a      	movs	r2, r3
 8000fec:	2100      	movs	r1, #0
 8000fee:	f002 fcf3 	bl	80039d8 <memset>
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff2:	003b      	movs	r3, r7
 8000ff4:	0018      	movs	r0, r3
 8000ff6:	2318      	movs	r3, #24
 8000ff8:	001a      	movs	r2, r3
 8000ffa:	2100      	movs	r1, #0
 8000ffc:	f002 fcec 	bl	80039d8 <memset>

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8001000:	2380      	movs	r3, #128	; 0x80
 8001002:	031b      	lsls	r3, r3, #12
 8001004:	0018      	movs	r0, r3
 8001006:	f7ff ff69 	bl	8000edc <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800100a:	2380      	movs	r3, #128	; 0x80
 800100c:	029b      	lsls	r3, r3, #10
 800100e:	0018      	movs	r0, r3
 8001010:	f7ff ff64 	bl	8000edc <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001014:	2380      	movs	r3, #128	; 0x80
 8001016:	02db      	lsls	r3, r3, #11
 8001018:	0018      	movs	r0, r3
 800101a:	f7ff ff5f 	bl	8000edc <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(er_GPIO_Port, er_Pin);
 800101e:	2380      	movs	r3, #128	; 0x80
 8001020:	019b      	lsls	r3, r3, #6
 8001022:	4afe      	ldr	r2, [pc, #1016]	; (800141c <MX_GPIO_Init+0x440>)
 8001024:	0019      	movs	r1, r3
 8001026:	0010      	movs	r0, r2
 8001028:	f7ff ffcc 	bl	8000fc4 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(pwr_GPIO_Port, pwr_Pin);
 800102c:	2380      	movs	r3, #128	; 0x80
 800102e:	01db      	lsls	r3, r3, #7
 8001030:	4afa      	ldr	r2, [pc, #1000]	; (800141c <MX_GPIO_Init+0x440>)
 8001032:	0019      	movs	r1, r3
 8001034:	0010      	movs	r0, r2
 8001036:	f7ff ffc5 	bl	8000fc4 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(bat_l_GPIO_Port, bat_l_Pin);
 800103a:	2380      	movs	r3, #128	; 0x80
 800103c:	021b      	lsls	r3, r3, #8
 800103e:	4af7      	ldr	r2, [pc, #988]	; (800141c <MX_GPIO_Init+0x440>)
 8001040:	0019      	movs	r1, r3
 8001042:	0010      	movs	r0, r2
 8001044:	f7ff ffbe 	bl	8000fc4 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(oil_l_GPIO_Port, oil_l_Pin);
 8001048:	4bf5      	ldr	r3, [pc, #980]	; (8001420 <MX_GPIO_Init+0x444>)
 800104a:	2104      	movs	r1, #4
 800104c:	0018      	movs	r0, r3
 800104e:	f7ff ffb9 	bl	8000fc4 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(water_l_GPIO_Port, water_l_Pin);
 8001052:	2380      	movs	r3, #128	; 0x80
 8001054:	00db      	lsls	r3, r3, #3
 8001056:	4af2      	ldr	r2, [pc, #968]	; (8001420 <MX_GPIO_Init+0x444>)
 8001058:	0019      	movs	r1, r3
 800105a:	0010      	movs	r0, r2
 800105c:	f7ff ffb2 	bl	8000fc4 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(ol_l_GPIO_Port, ol_l_Pin);
 8001060:	2380      	movs	r3, #128	; 0x80
 8001062:	011b      	lsls	r3, r3, #4
 8001064:	4aee      	ldr	r2, [pc, #952]	; (8001420 <MX_GPIO_Init+0x444>)
 8001066:	0019      	movs	r1, r3
 8001068:	0010      	movs	r0, r2
 800106a:	f7ff ffab 	bl	8000fc4 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(emr_l_GPIO_Port, emr_l_Pin);
 800106e:	2380      	movs	r3, #128	; 0x80
 8001070:	015b      	lsls	r3, r3, #5
 8001072:	4aeb      	ldr	r2, [pc, #940]	; (8001420 <MX_GPIO_Init+0x444>)
 8001074:	0019      	movs	r1, r3
 8001076:	0010      	movs	r0, r2
 8001078:	f7ff ffa4 	bl	8000fc4 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(feul_l_GPIO_Port, feul_l_Pin);
 800107c:	2380      	movs	r3, #128	; 0x80
 800107e:	019b      	lsls	r3, r3, #6
 8001080:	4ae7      	ldr	r2, [pc, #924]	; (8001420 <MX_GPIO_Init+0x444>)
 8001082:	0019      	movs	r1, r3
 8001084:	0010      	movs	r0, r2
 8001086:	f7ff ff9d 	bl	8000fc4 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(start_GPIO_Port, start_Pin);
 800108a:	4be5      	ldr	r3, [pc, #916]	; (8001420 <MX_GPIO_Init+0x444>)
 800108c:	2110      	movs	r1, #16
 800108e:	0018      	movs	r0, r3
 8001090:	f7ff ff98 	bl	8000fc4 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(gov_GPIO_Port, gov_Pin);
 8001094:	4be2      	ldr	r3, [pc, #904]	; (8001420 <MX_GPIO_Init+0x444>)
 8001096:	2120      	movs	r1, #32
 8001098:	0018      	movs	r0, r3
 800109a:	f7ff ff93 	bl	8000fc4 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(sir_GPIO_Port, sir_Pin);
 800109e:	4be0      	ldr	r3, [pc, #896]	; (8001420 <MX_GPIO_Init+0x444>)
 80010a0:	2140      	movs	r1, #64	; 0x40
 80010a2:	0018      	movs	r0, r3
 80010a4:	f7ff ff8e 	bl	8000fc4 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(freq_l_GPIO_Port, freq_l_Pin);
 80010a8:	4bdd      	ldr	r3, [pc, #884]	; (8001420 <MX_GPIO_Init+0x444>)
 80010aa:	2180      	movs	r1, #128	; 0x80
 80010ac:	0018      	movs	r0, r3
 80010ae:	f7ff ff89 	bl	8000fc4 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(vac_l_GPIO_Port, vac_l_Pin);
 80010b2:	2380      	movs	r3, #128	; 0x80
 80010b4:	005b      	lsls	r3, r3, #1
 80010b6:	4ada      	ldr	r2, [pc, #872]	; (8001420 <MX_GPIO_Init+0x444>)
 80010b8:	0019      	movs	r1, r3
 80010ba:	0010      	movs	r0, r2
 80010bc:	f7ff ff82 	bl	8000fc4 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = er_Pin;
 80010c0:	003b      	movs	r3, r7
 80010c2:	2280      	movs	r2, #128	; 0x80
 80010c4:	0192      	lsls	r2, r2, #6
 80010c6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80010c8:	003b      	movs	r3, r7
 80010ca:	2201      	movs	r2, #1
 80010cc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80010ce:	003b      	movs	r3, r7
 80010d0:	2200      	movs	r2, #0
 80010d2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80010d4:	003b      	movs	r3, r7
 80010d6:	2200      	movs	r2, #0
 80010d8:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80010da:	003b      	movs	r3, r7
 80010dc:	2200      	movs	r2, #0
 80010de:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(er_GPIO_Port, &GPIO_InitStruct);
 80010e0:	003b      	movs	r3, r7
 80010e2:	4ace      	ldr	r2, [pc, #824]	; (800141c <MX_GPIO_Init+0x440>)
 80010e4:	0019      	movs	r1, r3
 80010e6:	0010      	movs	r0, r2
 80010e8:	f002 f8ae 	bl	8003248 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = pwr_Pin;
 80010ec:	003b      	movs	r3, r7
 80010ee:	2280      	movs	r2, #128	; 0x80
 80010f0:	01d2      	lsls	r2, r2, #7
 80010f2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80010f4:	003b      	movs	r3, r7
 80010f6:	2201      	movs	r2, #1
 80010f8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80010fa:	003b      	movs	r3, r7
 80010fc:	2200      	movs	r2, #0
 80010fe:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001100:	003b      	movs	r3, r7
 8001102:	2200      	movs	r2, #0
 8001104:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001106:	003b      	movs	r3, r7
 8001108:	2200      	movs	r2, #0
 800110a:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(pwr_GPIO_Port, &GPIO_InitStruct);
 800110c:	003b      	movs	r3, r7
 800110e:	4ac3      	ldr	r2, [pc, #780]	; (800141c <MX_GPIO_Init+0x440>)
 8001110:	0019      	movs	r1, r3
 8001112:	0010      	movs	r0, r2
 8001114:	f002 f898 	bl	8003248 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = bat_l_Pin;
 8001118:	003b      	movs	r3, r7
 800111a:	2280      	movs	r2, #128	; 0x80
 800111c:	0212      	lsls	r2, r2, #8
 800111e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001120:	003b      	movs	r3, r7
 8001122:	2201      	movs	r2, #1
 8001124:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001126:	003b      	movs	r3, r7
 8001128:	2200      	movs	r2, #0
 800112a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800112c:	003b      	movs	r3, r7
 800112e:	2200      	movs	r2, #0
 8001130:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001132:	003b      	movs	r3, r7
 8001134:	2200      	movs	r2, #0
 8001136:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(bat_l_GPIO_Port, &GPIO_InitStruct);
 8001138:	003b      	movs	r3, r7
 800113a:	4ab8      	ldr	r2, [pc, #736]	; (800141c <MX_GPIO_Init+0x440>)
 800113c:	0019      	movs	r1, r3
 800113e:	0010      	movs	r0, r2
 8001140:	f002 f882 	bl	8003248 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = water_Pin;
 8001144:	003b      	movs	r3, r7
 8001146:	2280      	movs	r2, #128	; 0x80
 8001148:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 800114a:	003b      	movs	r3, r7
 800114c:	2200      	movs	r2, #0
 800114e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001150:	003b      	movs	r3, r7
 8001152:	2200      	movs	r2, #0
 8001154:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(water_GPIO_Port, &GPIO_InitStruct);
 8001156:	003a      	movs	r2, r7
 8001158:	2390      	movs	r3, #144	; 0x90
 800115a:	05db      	lsls	r3, r3, #23
 800115c:	0011      	movs	r1, r2
 800115e:	0018      	movs	r0, r3
 8001160:	f002 f872 	bl	8003248 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = oil_Pin;
 8001164:	003b      	movs	r3, r7
 8001166:	2201      	movs	r2, #1
 8001168:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 800116a:	003b      	movs	r3, r7
 800116c:	2200      	movs	r2, #0
 800116e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001170:	003b      	movs	r3, r7
 8001172:	2200      	movs	r2, #0
 8001174:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(oil_GPIO_Port, &GPIO_InitStruct);
 8001176:	003b      	movs	r3, r7
 8001178:	4aa9      	ldr	r2, [pc, #676]	; (8001420 <MX_GPIO_Init+0x444>)
 800117a:	0019      	movs	r1, r3
 800117c:	0010      	movs	r0, r2
 800117e:	f002 f863 	bl	8003248 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = ol_Pin;
 8001182:	003b      	movs	r3, r7
 8001184:	2202      	movs	r2, #2
 8001186:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001188:	003b      	movs	r3, r7
 800118a:	2200      	movs	r2, #0
 800118c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800118e:	003b      	movs	r3, r7
 8001190:	2200      	movs	r2, #0
 8001192:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(ol_GPIO_Port, &GPIO_InitStruct);
 8001194:	003b      	movs	r3, r7
 8001196:	4aa2      	ldr	r2, [pc, #648]	; (8001420 <MX_GPIO_Init+0x444>)
 8001198:	0019      	movs	r1, r3
 800119a:	0010      	movs	r0, r2
 800119c:	f002 f854 	bl	8003248 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = oil_l_Pin;
 80011a0:	003b      	movs	r3, r7
 80011a2:	2204      	movs	r2, #4
 80011a4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80011a6:	003b      	movs	r3, r7
 80011a8:	2201      	movs	r2, #1
 80011aa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80011ac:	003b      	movs	r3, r7
 80011ae:	2200      	movs	r2, #0
 80011b0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80011b2:	003b      	movs	r3, r7
 80011b4:	2200      	movs	r2, #0
 80011b6:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80011b8:	003b      	movs	r3, r7
 80011ba:	2200      	movs	r2, #0
 80011bc:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(oil_l_GPIO_Port, &GPIO_InitStruct);
 80011be:	003b      	movs	r3, r7
 80011c0:	4a97      	ldr	r2, [pc, #604]	; (8001420 <MX_GPIO_Init+0x444>)
 80011c2:	0019      	movs	r1, r3
 80011c4:	0010      	movs	r0, r2
 80011c6:	f002 f83f 	bl	8003248 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = water_l_Pin;
 80011ca:	003b      	movs	r3, r7
 80011cc:	2280      	movs	r2, #128	; 0x80
 80011ce:	00d2      	lsls	r2, r2, #3
 80011d0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80011d2:	003b      	movs	r3, r7
 80011d4:	2201      	movs	r2, #1
 80011d6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80011d8:	003b      	movs	r3, r7
 80011da:	2200      	movs	r2, #0
 80011dc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80011de:	003b      	movs	r3, r7
 80011e0:	2200      	movs	r2, #0
 80011e2:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80011e4:	003b      	movs	r3, r7
 80011e6:	2200      	movs	r2, #0
 80011e8:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(water_l_GPIO_Port, &GPIO_InitStruct);
 80011ea:	003b      	movs	r3, r7
 80011ec:	4a8c      	ldr	r2, [pc, #560]	; (8001420 <MX_GPIO_Init+0x444>)
 80011ee:	0019      	movs	r1, r3
 80011f0:	0010      	movs	r0, r2
 80011f2:	f002 f829 	bl	8003248 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = ol_l_Pin;
 80011f6:	003b      	movs	r3, r7
 80011f8:	2280      	movs	r2, #128	; 0x80
 80011fa:	0112      	lsls	r2, r2, #4
 80011fc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80011fe:	003b      	movs	r3, r7
 8001200:	2201      	movs	r2, #1
 8001202:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001204:	003b      	movs	r3, r7
 8001206:	2200      	movs	r2, #0
 8001208:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800120a:	003b      	movs	r3, r7
 800120c:	2200      	movs	r2, #0
 800120e:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001210:	003b      	movs	r3, r7
 8001212:	2200      	movs	r2, #0
 8001214:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(ol_l_GPIO_Port, &GPIO_InitStruct);
 8001216:	003b      	movs	r3, r7
 8001218:	4a81      	ldr	r2, [pc, #516]	; (8001420 <MX_GPIO_Init+0x444>)
 800121a:	0019      	movs	r1, r3
 800121c:	0010      	movs	r0, r2
 800121e:	f002 f813 	bl	8003248 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = emr_l_Pin;
 8001222:	003b      	movs	r3, r7
 8001224:	2280      	movs	r2, #128	; 0x80
 8001226:	0152      	lsls	r2, r2, #5
 8001228:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800122a:	003b      	movs	r3, r7
 800122c:	2201      	movs	r2, #1
 800122e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001230:	003b      	movs	r3, r7
 8001232:	2200      	movs	r2, #0
 8001234:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001236:	003b      	movs	r3, r7
 8001238:	2200      	movs	r2, #0
 800123a:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800123c:	003b      	movs	r3, r7
 800123e:	2200      	movs	r2, #0
 8001240:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(emr_l_GPIO_Port, &GPIO_InitStruct);
 8001242:	003b      	movs	r3, r7
 8001244:	4a76      	ldr	r2, [pc, #472]	; (8001420 <MX_GPIO_Init+0x444>)
 8001246:	0019      	movs	r1, r3
 8001248:	0010      	movs	r0, r2
 800124a:	f001 fffd 	bl	8003248 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = feul_l_Pin;
 800124e:	003b      	movs	r3, r7
 8001250:	2280      	movs	r2, #128	; 0x80
 8001252:	0192      	lsls	r2, r2, #6
 8001254:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001256:	003b      	movs	r3, r7
 8001258:	2201      	movs	r2, #1
 800125a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800125c:	003b      	movs	r3, r7
 800125e:	2200      	movs	r2, #0
 8001260:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001262:	003b      	movs	r3, r7
 8001264:	2200      	movs	r2, #0
 8001266:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001268:	003b      	movs	r3, r7
 800126a:	2200      	movs	r2, #0
 800126c:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(feul_l_GPIO_Port, &GPIO_InitStruct);
 800126e:	003b      	movs	r3, r7
 8001270:	4a6b      	ldr	r2, [pc, #428]	; (8001420 <MX_GPIO_Init+0x444>)
 8001272:	0019      	movs	r1, r3
 8001274:	0010      	movs	r0, r2
 8001276:	f001 ffe7 	bl	8003248 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = gen_Pin;
 800127a:	003b      	movs	r3, r7
 800127c:	2280      	movs	r2, #128	; 0x80
 800127e:	01d2      	lsls	r2, r2, #7
 8001280:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001282:	003b      	movs	r3, r7
 8001284:	2200      	movs	r2, #0
 8001286:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001288:	003b      	movs	r3, r7
 800128a:	2200      	movs	r2, #0
 800128c:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(gen_GPIO_Port, &GPIO_InitStruct);
 800128e:	003b      	movs	r3, r7
 8001290:	4a63      	ldr	r2, [pc, #396]	; (8001420 <MX_GPIO_Init+0x444>)
 8001292:	0019      	movs	r1, r3
 8001294:	0010      	movs	r0, r2
 8001296:	f001 ffd7 	bl	8003248 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = feul_Pin;
 800129a:	003b      	movs	r3, r7
 800129c:	2280      	movs	r2, #128	; 0x80
 800129e:	0212      	lsls	r2, r2, #8
 80012a0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80012a2:	003b      	movs	r3, r7
 80012a4:	2200      	movs	r2, #0
 80012a6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80012a8:	003b      	movs	r3, r7
 80012aa:	2200      	movs	r2, #0
 80012ac:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(feul_GPIO_Port, &GPIO_InitStruct);
 80012ae:	003b      	movs	r3, r7
 80012b0:	4a5b      	ldr	r2, [pc, #364]	; (8001420 <MX_GPIO_Init+0x444>)
 80012b2:	0019      	movs	r1, r3
 80012b4:	0010      	movs	r0, r2
 80012b6:	f001 ffc7 	bl	8003248 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = emr_Pin;
 80012ba:	003b      	movs	r3, r7
 80012bc:	2280      	movs	r2, #128	; 0x80
 80012be:	0052      	lsls	r2, r2, #1
 80012c0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80012c2:	003b      	movs	r3, r7
 80012c4:	2200      	movs	r2, #0
 80012c6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80012c8:	003b      	movs	r3, r7
 80012ca:	2200      	movs	r2, #0
 80012cc:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(emr_GPIO_Port, &GPIO_InitStruct);
 80012ce:	003a      	movs	r2, r7
 80012d0:	2390      	movs	r3, #144	; 0x90
 80012d2:	05db      	lsls	r3, r3, #23
 80012d4:	0011      	movs	r1, r2
 80012d6:	0018      	movs	r0, r3
 80012d8:	f001 ffb6 	bl	8003248 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = mute_Pin;
 80012dc:	003b      	movs	r3, r7
 80012de:	2280      	movs	r2, #128	; 0x80
 80012e0:	0212      	lsls	r2, r2, #8
 80012e2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80012e4:	003b      	movs	r3, r7
 80012e6:	2200      	movs	r2, #0
 80012e8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80012ea:	003b      	movs	r3, r7
 80012ec:	2200      	movs	r2, #0
 80012ee:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(mute_GPIO_Port, &GPIO_InitStruct);
 80012f0:	003a      	movs	r2, r7
 80012f2:	2390      	movs	r3, #144	; 0x90
 80012f4:	05db      	lsls	r3, r3, #23
 80012f6:	0011      	movs	r1, r2
 80012f8:	0018      	movs	r0, r3
 80012fa:	f001 ffa5 	bl	8003248 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = btn_start_Pin;
 80012fe:	003b      	movs	r3, r7
 8001300:	2208      	movs	r2, #8
 8001302:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001304:	003b      	movs	r3, r7
 8001306:	2200      	movs	r2, #0
 8001308:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800130a:	003b      	movs	r3, r7
 800130c:	2200      	movs	r2, #0
 800130e:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(btn_start_GPIO_Port, &GPIO_InitStruct);
 8001310:	003b      	movs	r3, r7
 8001312:	4a43      	ldr	r2, [pc, #268]	; (8001420 <MX_GPIO_Init+0x444>)
 8001314:	0019      	movs	r1, r3
 8001316:	0010      	movs	r0, r2
 8001318:	f001 ff96 	bl	8003248 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = start_Pin;
 800131c:	003b      	movs	r3, r7
 800131e:	2210      	movs	r2, #16
 8001320:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001322:	003b      	movs	r3, r7
 8001324:	2201      	movs	r2, #1
 8001326:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001328:	003b      	movs	r3, r7
 800132a:	2200      	movs	r2, #0
 800132c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800132e:	003b      	movs	r3, r7
 8001330:	2200      	movs	r2, #0
 8001332:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001334:	003b      	movs	r3, r7
 8001336:	2200      	movs	r2, #0
 8001338:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(start_GPIO_Port, &GPIO_InitStruct);
 800133a:	003b      	movs	r3, r7
 800133c:	4a38      	ldr	r2, [pc, #224]	; (8001420 <MX_GPIO_Init+0x444>)
 800133e:	0019      	movs	r1, r3
 8001340:	0010      	movs	r0, r2
 8001342:	f001 ff81 	bl	8003248 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = gov_Pin;
 8001346:	003b      	movs	r3, r7
 8001348:	2220      	movs	r2, #32
 800134a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800134c:	003b      	movs	r3, r7
 800134e:	2201      	movs	r2, #1
 8001350:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001352:	003b      	movs	r3, r7
 8001354:	2200      	movs	r2, #0
 8001356:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001358:	003b      	movs	r3, r7
 800135a:	2200      	movs	r2, #0
 800135c:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800135e:	003b      	movs	r3, r7
 8001360:	2200      	movs	r2, #0
 8001362:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(gov_GPIO_Port, &GPIO_InitStruct);
 8001364:	003b      	movs	r3, r7
 8001366:	4a2e      	ldr	r2, [pc, #184]	; (8001420 <MX_GPIO_Init+0x444>)
 8001368:	0019      	movs	r1, r3
 800136a:	0010      	movs	r0, r2
 800136c:	f001 ff6c 	bl	8003248 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = sir_Pin;
 8001370:	003b      	movs	r3, r7
 8001372:	2240      	movs	r2, #64	; 0x40
 8001374:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001376:	003b      	movs	r3, r7
 8001378:	2201      	movs	r2, #1
 800137a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800137c:	003b      	movs	r3, r7
 800137e:	2200      	movs	r2, #0
 8001380:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001382:	003b      	movs	r3, r7
 8001384:	2200      	movs	r2, #0
 8001386:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001388:	003b      	movs	r3, r7
 800138a:	2200      	movs	r2, #0
 800138c:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(sir_GPIO_Port, &GPIO_InitStruct);
 800138e:	003b      	movs	r3, r7
 8001390:	4a23      	ldr	r2, [pc, #140]	; (8001420 <MX_GPIO_Init+0x444>)
 8001392:	0019      	movs	r1, r3
 8001394:	0010      	movs	r0, r2
 8001396:	f001 ff57 	bl	8003248 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = freq_l_Pin;
 800139a:	003b      	movs	r3, r7
 800139c:	2280      	movs	r2, #128	; 0x80
 800139e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80013a0:	003b      	movs	r3, r7
 80013a2:	2201      	movs	r2, #1
 80013a4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80013a6:	003b      	movs	r3, r7
 80013a8:	2200      	movs	r2, #0
 80013aa:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80013ac:	003b      	movs	r3, r7
 80013ae:	2200      	movs	r2, #0
 80013b0:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80013b2:	003b      	movs	r3, r7
 80013b4:	2200      	movs	r2, #0
 80013b6:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(freq_l_GPIO_Port, &GPIO_InitStruct);
 80013b8:	003b      	movs	r3, r7
 80013ba:	4a19      	ldr	r2, [pc, #100]	; (8001420 <MX_GPIO_Init+0x444>)
 80013bc:	0019      	movs	r1, r3
 80013be:	0010      	movs	r0, r2
 80013c0:	f001 ff42 	bl	8003248 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = vac_l_Pin;
 80013c4:	003b      	movs	r3, r7
 80013c6:	2280      	movs	r2, #128	; 0x80
 80013c8:	0052      	lsls	r2, r2, #1
 80013ca:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80013cc:	003b      	movs	r3, r7
 80013ce:	2201      	movs	r2, #1
 80013d0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80013d2:	003b      	movs	r3, r7
 80013d4:	2200      	movs	r2, #0
 80013d6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80013d8:	003b      	movs	r3, r7
 80013da:	2200      	movs	r2, #0
 80013dc:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80013de:	003b      	movs	r3, r7
 80013e0:	2200      	movs	r2, #0
 80013e2:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(vac_l_GPIO_Port, &GPIO_InitStruct);
 80013e4:	003b      	movs	r3, r7
 80013e6:	4a0e      	ldr	r2, [pc, #56]	; (8001420 <MX_GPIO_Init+0x444>)
 80013e8:	0019      	movs	r1, r3
 80013ea:	0010      	movs	r0, r2
 80013ec:	f001 ff2c 	bl	8003248 <LL_GPIO_Init>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTA, LL_SYSCFG_EXTI_LINE1);
 80013f0:	2380      	movs	r3, #128	; 0x80
 80013f2:	02db      	lsls	r3, r3, #11
 80013f4:	0019      	movs	r1, r3
 80013f6:	2000      	movs	r0, #0
 80013f8:	f7ff fd86 	bl	8000f08 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_GPIO_SetPinPull(fr_GPIO_Port, fr_Pin, LL_GPIO_PULL_NO);
 80013fc:	2390      	movs	r3, #144	; 0x90
 80013fe:	05db      	lsls	r3, r3, #23
 8001400:	2200      	movs	r2, #0
 8001402:	2102      	movs	r1, #2
 8001404:	0018      	movs	r0, r3
 8001406:	f7ff fdc1 	bl	8000f8c <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(fr_GPIO_Port, fr_Pin, LL_GPIO_MODE_INPUT);
 800140a:	2390      	movs	r3, #144	; 0x90
 800140c:	05db      	lsls	r3, r3, #23
 800140e:	2200      	movs	r2, #0
 8001410:	2102      	movs	r1, #2
 8001412:	0018      	movs	r0, r3
 8001414:	f7ff fd9e 	bl	8000f54 <LL_GPIO_SetPinMode>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_1;
 8001418:	0021      	movs	r1, r4
 800141a:	e003      	b.n	8001424 <MX_GPIO_Init+0x448>
 800141c:	48000800 	.word	0x48000800
 8001420:	48000400 	.word	0x48000400
 8001424:	187b      	adds	r3, r7, r1
 8001426:	2202      	movs	r2, #2
 8001428:	601a      	str	r2, [r3, #0]
  EXTI_InitStruct.LineCommand = ENABLE;
 800142a:	187b      	adds	r3, r7, r1
 800142c:	2201      	movs	r2, #1
 800142e:	711a      	strb	r2, [r3, #4]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8001430:	187b      	adds	r3, r7, r1
 8001432:	2200      	movs	r2, #0
 8001434:	715a      	strb	r2, [r3, #5]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8001436:	187b      	adds	r3, r7, r1
 8001438:	2201      	movs	r2, #1
 800143a:	719a      	strb	r2, [r3, #6]
  LL_EXTI_Init(&EXTI_InitStruct);
 800143c:	187b      	adds	r3, r7, r1
 800143e:	0018      	movs	r0, r3
 8001440:	f001 fdc0 	bl	8002fc4 <LL_EXTI_Init>

}
 8001444:	46c0      	nop			; (mov r8, r8)
 8001446:	46bd      	mov	sp, r7
 8001448:	b009      	add	sp, #36	; 0x24
 800144a:	bd90      	pop	{r4, r7, pc}

0800144c <LL_ADC_DMA_GetRegAddr>:
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
 8001454:	6039      	str	r1, [r7, #0]
  return (uint32_t)&(ADCx->DR);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	3340      	adds	r3, #64	; 0x40
}
 800145a:	0018      	movs	r0, r3
 800145c:	46bd      	mov	sp, r7
 800145e:	b002      	add	sp, #8
 8001460:	bd80      	pop	{r7, pc}
	...

08001464 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	689b      	ldr	r3, [r3, #8]
 8001470:	4a04      	ldr	r2, [pc, #16]	; (8001484 <LL_ADC_Enable+0x20>)
 8001472:	4013      	ands	r3, r2
 8001474:	2201      	movs	r2, #1
 8001476:	431a      	orrs	r2, r3
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800147c:	46c0      	nop			; (mov r8, r8)
 800147e:	46bd      	mov	sp, r7
 8001480:	b002      	add	sp, #8
 8001482:	bd80      	pop	{r7, pc}
 8001484:	7fffffe8 	.word	0x7fffffe8

08001488 <LL_ADC_StartCalibration>:
  * @rmtoll CR       ADCAL          LL_ADC_StartCalibration
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_StartCalibration(ADC_TypeDef *ADCx)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	689b      	ldr	r3, [r3, #8]
 8001494:	4a05      	ldr	r2, [pc, #20]	; (80014ac <LL_ADC_StartCalibration+0x24>)
 8001496:	4013      	ands	r3, r2
 8001498:	2280      	movs	r2, #128	; 0x80
 800149a:	0612      	lsls	r2, r2, #24
 800149c:	431a      	orrs	r2, r3
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADCAL);
}
 80014a2:	46c0      	nop			; (mov r8, r8)
 80014a4:	46bd      	mov	sp, r7
 80014a6:	b002      	add	sp, #8
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	46c0      	nop			; (mov r8, r8)
 80014ac:	7fffffe8 	.word	0x7fffffe8

080014b0 <LL_ADC_IsCalibrationOnGoing>:
  * @rmtoll CR       ADCAL          LL_ADC_IsCalibrationOnGoing
  * @param  ADCx ADC instance
  * @retval 0: calibration complete, 1: calibration in progress.
  */
__STATIC_INLINE uint32_t LL_ADC_IsCalibrationOnGoing(ADC_TypeDef *ADCx)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b082      	sub	sp, #8
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL));
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	689b      	ldr	r3, [r3, #8]
 80014bc:	0fdb      	lsrs	r3, r3, #31
 80014be:	07db      	lsls	r3, r3, #31
 80014c0:	2280      	movs	r2, #128	; 0x80
 80014c2:	0612      	lsls	r2, r2, #24
 80014c4:	4694      	mov	ip, r2
 80014c6:	4463      	add	r3, ip
 80014c8:	425a      	negs	r2, r3
 80014ca:	4153      	adcs	r3, r2
 80014cc:	b2db      	uxtb	r3, r3
}
 80014ce:	0018      	movs	r0, r3
 80014d0:	46bd      	mov	sp, r7
 80014d2:	b002      	add	sp, #8
 80014d4:	bd80      	pop	{r7, pc}
	...

080014d8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b082      	sub	sp, #8
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	689b      	ldr	r3, [r3, #8]
 80014e4:	4a04      	ldr	r2, [pc, #16]	; (80014f8 <LL_ADC_REG_StartConversion+0x20>)
 80014e6:	4013      	ands	r3, r2
 80014e8:	2204      	movs	r2, #4
 80014ea:	431a      	orrs	r2, r3
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80014f0:	46c0      	nop			; (mov r8, r8)
 80014f2:	46bd      	mov	sp, r7
 80014f4:	b002      	add	sp, #8
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	7fffffe8 	.word	0x7fffffe8

080014fc <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001500:	4b04      	ldr	r3, [pc, #16]	; (8001514 <LL_RCC_HSI_Enable+0x18>)
 8001502:	681a      	ldr	r2, [r3, #0]
 8001504:	4b03      	ldr	r3, [pc, #12]	; (8001514 <LL_RCC_HSI_Enable+0x18>)
 8001506:	2101      	movs	r1, #1
 8001508:	430a      	orrs	r2, r1
 800150a:	601a      	str	r2, [r3, #0]
}
 800150c:	46c0      	nop			; (mov r8, r8)
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
 8001512:	46c0      	nop			; (mov r8, r8)
 8001514:	40021000 	.word	0x40021000

08001518 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 800151c:	4b05      	ldr	r3, [pc, #20]	; (8001534 <LL_RCC_HSI_IsReady+0x1c>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	2202      	movs	r2, #2
 8001522:	4013      	ands	r3, r2
 8001524:	3b02      	subs	r3, #2
 8001526:	425a      	negs	r2, r3
 8001528:	4153      	adcs	r3, r2
 800152a:	b2db      	uxtb	r3, r3
}
 800152c:	0018      	movs	r0, r3
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
 8001532:	46c0      	nop			; (mov r8, r8)
 8001534:	40021000 	.word	0x40021000

08001538 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b082      	sub	sp, #8
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8001540:	4b06      	ldr	r3, [pc, #24]	; (800155c <LL_RCC_HSI_SetCalibTrimming+0x24>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	22f8      	movs	r2, #248	; 0xf8
 8001546:	4393      	bics	r3, r2
 8001548:	0019      	movs	r1, r3
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	00da      	lsls	r2, r3, #3
 800154e:	4b03      	ldr	r3, [pc, #12]	; (800155c <LL_RCC_HSI_SetCalibTrimming+0x24>)
 8001550:	430a      	orrs	r2, r1
 8001552:	601a      	str	r2, [r3, #0]
}
 8001554:	46c0      	nop			; (mov r8, r8)
 8001556:	46bd      	mov	sp, r7
 8001558:	b002      	add	sp, #8
 800155a:	bd80      	pop	{r7, pc}
 800155c:	40021000 	.word	0x40021000

08001560 <LL_RCC_HSI14_Enable>:
  * @brief  Enable HSI14
  * @rmtoll CR2          HSI14ON       LL_RCC_HSI14_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI14_Enable(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR2, RCC_CR2_HSI14ON);
 8001564:	4b04      	ldr	r3, [pc, #16]	; (8001578 <LL_RCC_HSI14_Enable+0x18>)
 8001566:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001568:	4b03      	ldr	r3, [pc, #12]	; (8001578 <LL_RCC_HSI14_Enable+0x18>)
 800156a:	2101      	movs	r1, #1
 800156c:	430a      	orrs	r2, r1
 800156e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001570:	46c0      	nop			; (mov r8, r8)
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
 8001576:	46c0      	nop			; (mov r8, r8)
 8001578:	40021000 	.word	0x40021000

0800157c <LL_RCC_HSI14_IsReady>:
  * @brief  Check if HSI14 oscillator Ready
  * @rmtoll CR2          HSI14RDY      LL_RCC_HSI14_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI14_IsReady(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR2, RCC_CR2_HSI14RDY) == (RCC_CR2_HSI14RDY));
 8001580:	4b05      	ldr	r3, [pc, #20]	; (8001598 <LL_RCC_HSI14_IsReady+0x1c>)
 8001582:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001584:	2202      	movs	r2, #2
 8001586:	4013      	ands	r3, r2
 8001588:	3b02      	subs	r3, #2
 800158a:	425a      	negs	r2, r3
 800158c:	4153      	adcs	r3, r2
 800158e:	b2db      	uxtb	r3, r3
}
 8001590:	0018      	movs	r0, r3
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
 8001596:	46c0      	nop			; (mov r8, r8)
 8001598:	40021000 	.word	0x40021000

0800159c <LL_RCC_HSI14_EnableADCControl>:
  * @brief  ADC interface can turn on the HSI14 oscillator
  * @rmtoll CR2          HSI14DIS      LL_RCC_HSI14_EnableADCControl
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI14_EnableADCControl(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR2, RCC_CR2_HSI14DIS);
 80015a0:	4b04      	ldr	r3, [pc, #16]	; (80015b4 <LL_RCC_HSI14_EnableADCControl+0x18>)
 80015a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80015a4:	4b03      	ldr	r3, [pc, #12]	; (80015b4 <LL_RCC_HSI14_EnableADCControl+0x18>)
 80015a6:	2104      	movs	r1, #4
 80015a8:	438a      	bics	r2, r1
 80015aa:	635a      	str	r2, [r3, #52]	; 0x34
}
 80015ac:	46c0      	nop			; (mov r8, r8)
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	46c0      	nop			; (mov r8, r8)
 80015b4:	40021000 	.word	0x40021000

080015b8 <LL_RCC_HSI14_SetCalibTrimming>:
  * @rmtoll CR2          HSI14TRIM     LL_RCC_HSI14_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0xFF
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI14_SetCalibTrimming(uint32_t Value)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR2, RCC_CR2_HSI14TRIM, Value << RCC_POSITION_HSI14TRIM);
 80015c0:	4b06      	ldr	r3, [pc, #24]	; (80015dc <LL_RCC_HSI14_SetCalibTrimming+0x24>)
 80015c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015c4:	22f8      	movs	r2, #248	; 0xf8
 80015c6:	4393      	bics	r3, r2
 80015c8:	0019      	movs	r1, r3
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	00da      	lsls	r2, r3, #3
 80015ce:	4b03      	ldr	r3, [pc, #12]	; (80015dc <LL_RCC_HSI14_SetCalibTrimming+0x24>)
 80015d0:	430a      	orrs	r2, r1
 80015d2:	635a      	str	r2, [r3, #52]	; 0x34
}
 80015d4:	46c0      	nop			; (mov r8, r8)
 80015d6:	46bd      	mov	sp, r7
 80015d8:	b002      	add	sp, #8
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	40021000 	.word	0x40021000

080015e0 <LL_RCC_SetSysClkSource>:
  *
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80015e8:	4b06      	ldr	r3, [pc, #24]	; (8001604 <LL_RCC_SetSysClkSource+0x24>)
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	2203      	movs	r2, #3
 80015ee:	4393      	bics	r3, r2
 80015f0:	0019      	movs	r1, r3
 80015f2:	4b04      	ldr	r3, [pc, #16]	; (8001604 <LL_RCC_SetSysClkSource+0x24>)
 80015f4:	687a      	ldr	r2, [r7, #4]
 80015f6:	430a      	orrs	r2, r1
 80015f8:	605a      	str	r2, [r3, #4]
}
 80015fa:	46c0      	nop			; (mov r8, r8)
 80015fc:	46bd      	mov	sp, r7
 80015fe:	b002      	add	sp, #8
 8001600:	bd80      	pop	{r7, pc}
 8001602:	46c0      	nop			; (mov r8, r8)
 8001604:	40021000 	.word	0x40021000

08001608 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI48 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800160c:	4b03      	ldr	r3, [pc, #12]	; (800161c <LL_RCC_GetSysClkSource+0x14>)
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	220c      	movs	r2, #12
 8001612:	4013      	ands	r3, r2
}
 8001614:	0018      	movs	r0, r3
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	46c0      	nop			; (mov r8, r8)
 800161c:	40021000 	.word	0x40021000

08001620 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b082      	sub	sp, #8
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001628:	4b06      	ldr	r3, [pc, #24]	; (8001644 <LL_RCC_SetAHBPrescaler+0x24>)
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	22f0      	movs	r2, #240	; 0xf0
 800162e:	4393      	bics	r3, r2
 8001630:	0019      	movs	r1, r3
 8001632:	4b04      	ldr	r3, [pc, #16]	; (8001644 <LL_RCC_SetAHBPrescaler+0x24>)
 8001634:	687a      	ldr	r2, [r7, #4]
 8001636:	430a      	orrs	r2, r1
 8001638:	605a      	str	r2, [r3, #4]
}
 800163a:	46c0      	nop			; (mov r8, r8)
 800163c:	46bd      	mov	sp, r7
 800163e:	b002      	add	sp, #8
 8001640:	bd80      	pop	{r7, pc}
 8001642:	46c0      	nop			; (mov r8, r8)
 8001644:	40021000 	.word	0x40021000

08001648 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b082      	sub	sp, #8
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, Prescaler);
 8001650:	4b06      	ldr	r3, [pc, #24]	; (800166c <LL_RCC_SetAPB1Prescaler+0x24>)
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	4a06      	ldr	r2, [pc, #24]	; (8001670 <LL_RCC_SetAPB1Prescaler+0x28>)
 8001656:	4013      	ands	r3, r2
 8001658:	0019      	movs	r1, r3
 800165a:	4b04      	ldr	r3, [pc, #16]	; (800166c <LL_RCC_SetAPB1Prescaler+0x24>)
 800165c:	687a      	ldr	r2, [r7, #4]
 800165e:	430a      	orrs	r2, r1
 8001660:	605a      	str	r2, [r3, #4]
}
 8001662:	46c0      	nop			; (mov r8, r8)
 8001664:	46bd      	mov	sp, r7
 8001666:	b002      	add	sp, #8
 8001668:	bd80      	pop	{r7, pc}
 800166a:	46c0      	nop			; (mov r8, r8)
 800166c:	40021000 	.word	0x40021000
 8001670:	fffff8ff 	.word	0xfffff8ff

08001674 <LL_RCC_SetUSARTClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetUSARTClockSource(uint32_t USARTxSource)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b082      	sub	sp, #8
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR3, (RCC_CFGR3_USART1SW << ((USARTxSource  & 0xFF000000U) >> 24U)), (USARTxSource & 0x00FFFFFFU));
 800167c:	4b09      	ldr	r3, [pc, #36]	; (80016a4 <LL_RCC_SetUSARTClockSource+0x30>)
 800167e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001680:	687a      	ldr	r2, [r7, #4]
 8001682:	0e12      	lsrs	r2, r2, #24
 8001684:	2103      	movs	r1, #3
 8001686:	4091      	lsls	r1, r2
 8001688:	000a      	movs	r2, r1
 800168a:	43d2      	mvns	r2, r2
 800168c:	401a      	ands	r2, r3
 800168e:	0011      	movs	r1, r2
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	021b      	lsls	r3, r3, #8
 8001694:	0a1a      	lsrs	r2, r3, #8
 8001696:	4b03      	ldr	r3, [pc, #12]	; (80016a4 <LL_RCC_SetUSARTClockSource+0x30>)
 8001698:	430a      	orrs	r2, r1
 800169a:	631a      	str	r2, [r3, #48]	; 0x30
}
 800169c:	46c0      	nop			; (mov r8, r8)
 800169e:	46bd      	mov	sp, r7
 80016a0:	b002      	add	sp, #8
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	40021000 	.word	0x40021000

080016a8 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80016ac:	4b04      	ldr	r3, [pc, #16]	; (80016c0 <LL_RCC_PLL_Enable+0x18>)
 80016ae:	681a      	ldr	r2, [r3, #0]
 80016b0:	4b03      	ldr	r3, [pc, #12]	; (80016c0 <LL_RCC_PLL_Enable+0x18>)
 80016b2:	2180      	movs	r1, #128	; 0x80
 80016b4:	0449      	lsls	r1, r1, #17
 80016b6:	430a      	orrs	r2, r1
 80016b8:	601a      	str	r2, [r3, #0]
}
 80016ba:	46c0      	nop			; (mov r8, r8)
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	40021000 	.word	0x40021000

080016c4 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 80016c8:	4b07      	ldr	r3, [pc, #28]	; (80016e8 <LL_RCC_PLL_IsReady+0x24>)
 80016ca:	681a      	ldr	r2, [r3, #0]
 80016cc:	2380      	movs	r3, #128	; 0x80
 80016ce:	049b      	lsls	r3, r3, #18
 80016d0:	4013      	ands	r3, r2
 80016d2:	22fe      	movs	r2, #254	; 0xfe
 80016d4:	0612      	lsls	r2, r2, #24
 80016d6:	4694      	mov	ip, r2
 80016d8:	4463      	add	r3, ip
 80016da:	425a      	negs	r2, r3
 80016dc:	4153      	adcs	r3, r2
 80016de:	b2db      	uxtb	r3, r3
}
 80016e0:	0018      	movs	r0, r3
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	46c0      	nop			; (mov r8, r8)
 80016e8:	40021000 	.word	0x40021000

080016ec <LL_RCC_PLL_ConfigDomain_SYS>:
  *         @arg @ref LL_RCC_PLL_MUL_15
  *         @arg @ref LL_RCC_PLL_MUL_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLMul)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b082      	sub	sp, #8
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
 80016f4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLMUL, (Source & RCC_CFGR_PLLSRC) | PLLMul);
 80016f6:	4b0e      	ldr	r3, [pc, #56]	; (8001730 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	4a0e      	ldr	r2, [pc, #56]	; (8001734 <LL_RCC_PLL_ConfigDomain_SYS+0x48>)
 80016fc:	4013      	ands	r3, r2
 80016fe:	0019      	movs	r1, r3
 8001700:	687a      	ldr	r2, [r7, #4]
 8001702:	2380      	movs	r3, #128	; 0x80
 8001704:	025b      	lsls	r3, r3, #9
 8001706:	401a      	ands	r2, r3
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	431a      	orrs	r2, r3
 800170c:	4b08      	ldr	r3, [pc, #32]	; (8001730 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 800170e:	430a      	orrs	r2, r1
 8001710:	605a      	str	r2, [r3, #4]
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PREDIV, (Source & RCC_CFGR2_PREDIV));
 8001712:	4b07      	ldr	r3, [pc, #28]	; (8001730 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8001714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001716:	220f      	movs	r2, #15
 8001718:	4393      	bics	r3, r2
 800171a:	0019      	movs	r1, r3
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	220f      	movs	r2, #15
 8001720:	401a      	ands	r2, r3
 8001722:	4b03      	ldr	r3, [pc, #12]	; (8001730 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8001724:	430a      	orrs	r2, r1
 8001726:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8001728:	46c0      	nop			; (mov r8, r8)
 800172a:	46bd      	mov	sp, r7
 800172c:	b002      	add	sp, #8
 800172e:	bd80      	pop	{r7, pc}
 8001730:	40021000 	.word	0x40021000
 8001734:	ffc2ffff 	.word	0xffc2ffff

08001738 <LL_APB1_GRP1_EnableClock>:
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b084      	sub	sp, #16
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8001740:	4b07      	ldr	r3, [pc, #28]	; (8001760 <LL_APB1_GRP1_EnableClock+0x28>)
 8001742:	69d9      	ldr	r1, [r3, #28]
 8001744:	4b06      	ldr	r3, [pc, #24]	; (8001760 <LL_APB1_GRP1_EnableClock+0x28>)
 8001746:	687a      	ldr	r2, [r7, #4]
 8001748:	430a      	orrs	r2, r1
 800174a:	61da      	str	r2, [r3, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800174c:	4b04      	ldr	r3, [pc, #16]	; (8001760 <LL_APB1_GRP1_EnableClock+0x28>)
 800174e:	69db      	ldr	r3, [r3, #28]
 8001750:	687a      	ldr	r2, [r7, #4]
 8001752:	4013      	ands	r3, r2
 8001754:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001756:	68fb      	ldr	r3, [r7, #12]
}
 8001758:	46c0      	nop			; (mov r8, r8)
 800175a:	46bd      	mov	sp, r7
 800175c:	b004      	add	sp, #16
 800175e:	bd80      	pop	{r7, pc}
 8001760:	40021000 	.word	0x40021000

08001764 <LL_APB1_GRP2_EnableClock>:
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b084      	sub	sp, #16
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 800176c:	4b07      	ldr	r3, [pc, #28]	; (800178c <LL_APB1_GRP2_EnableClock+0x28>)
 800176e:	6999      	ldr	r1, [r3, #24]
 8001770:	4b06      	ldr	r3, [pc, #24]	; (800178c <LL_APB1_GRP2_EnableClock+0x28>)
 8001772:	687a      	ldr	r2, [r7, #4]
 8001774:	430a      	orrs	r2, r1
 8001776:	619a      	str	r2, [r3, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001778:	4b04      	ldr	r3, [pc, #16]	; (800178c <LL_APB1_GRP2_EnableClock+0x28>)
 800177a:	699b      	ldr	r3, [r3, #24]
 800177c:	687a      	ldr	r2, [r7, #4]
 800177e:	4013      	ands	r3, r2
 8001780:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001782:	68fb      	ldr	r3, [r7, #12]
}
 8001784:	46c0      	nop			; (mov r8, r8)
 8001786:	46bd      	mov	sp, r7
 8001788:	b004      	add	sp, #16
 800178a:	bd80      	pop	{r7, pc}
 800178c:	40021000 	.word	0x40021000

08001790 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8001798:	4b06      	ldr	r3, [pc, #24]	; (80017b4 <LL_FLASH_SetLatency+0x24>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	2201      	movs	r2, #1
 800179e:	4393      	bics	r3, r2
 80017a0:	0019      	movs	r1, r3
 80017a2:	4b04      	ldr	r3, [pc, #16]	; (80017b4 <LL_FLASH_SetLatency+0x24>)
 80017a4:	687a      	ldr	r2, [r7, #4]
 80017a6:	430a      	orrs	r2, r1
 80017a8:	601a      	str	r2, [r3, #0]
}
 80017aa:	46c0      	nop			; (mov r8, r8)
 80017ac:	46bd      	mov	sp, r7
 80017ae:	b002      	add	sp, #8
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	46c0      	nop			; (mov r8, r8)
 80017b4:	40022000 	.word	0x40022000

080017b8 <LL_FLASH_GetLatency>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80017bc:	4b03      	ldr	r3, [pc, #12]	; (80017cc <LL_FLASH_GetLatency+0x14>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	2201      	movs	r2, #1
 80017c2:	4013      	ands	r3, r2
}
 80017c4:	0018      	movs	r0, r3
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	46c0      	nop			; (mov r8, r8)
 80017cc:	40022000 	.word	0x40022000

080017d0 <LL_DMA_EnableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
 80017d8:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	3b01      	subs	r3, #1
 80017de:	4a0a      	ldr	r2, [pc, #40]	; (8001808 <LL_DMA_EnableChannel+0x38>)
 80017e0:	5cd3      	ldrb	r3, [r2, r3]
 80017e2:	001a      	movs	r2, r3
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	18d3      	adds	r3, r2, r3
 80017e8:	681a      	ldr	r2, [r3, #0]
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	3b01      	subs	r3, #1
 80017ee:	4906      	ldr	r1, [pc, #24]	; (8001808 <LL_DMA_EnableChannel+0x38>)
 80017f0:	5ccb      	ldrb	r3, [r1, r3]
 80017f2:	0019      	movs	r1, r3
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	18cb      	adds	r3, r1, r3
 80017f8:	2101      	movs	r1, #1
 80017fa:	430a      	orrs	r2, r1
 80017fc:	601a      	str	r2, [r3, #0]
}
 80017fe:	46c0      	nop			; (mov r8, r8)
 8001800:	46bd      	mov	sp, r7
 8001802:	b002      	add	sp, #8
 8001804:	bd80      	pop	{r7, pc}
 8001806:	46c0      	nop			; (mov r8, r8)
 8001808:	08003a40 	.word	0x08003a40

0800180c <LL_DMA_SetDataLength>:
  *         @arg @ref LL_DMA_CHANNEL_7
  * @param  NbData Between Min_Data = 0 and Max_Data = 0x0000FFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataLength(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t NbData)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b084      	sub	sp, #16
 8001810:	af00      	add	r7, sp, #0
 8001812:	60f8      	str	r0, [r7, #12]
 8001814:	60b9      	str	r1, [r7, #8]
 8001816:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8001818:	68bb      	ldr	r3, [r7, #8]
 800181a:	3b01      	subs	r3, #1
 800181c:	4a0a      	ldr	r2, [pc, #40]	; (8001848 <LL_DMA_SetDataLength+0x3c>)
 800181e:	5cd3      	ldrb	r3, [r2, r3]
 8001820:	001a      	movs	r2, r3
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	18d3      	adds	r3, r2, r3
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	0c1b      	lsrs	r3, r3, #16
 800182a:	0419      	lsls	r1, r3, #16
 800182c:	68bb      	ldr	r3, [r7, #8]
 800182e:	3b01      	subs	r3, #1
 8001830:	4a05      	ldr	r2, [pc, #20]	; (8001848 <LL_DMA_SetDataLength+0x3c>)
 8001832:	5cd3      	ldrb	r3, [r2, r3]
 8001834:	001a      	movs	r2, r3
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	18d3      	adds	r3, r2, r3
 800183a:	687a      	ldr	r2, [r7, #4]
 800183c:	430a      	orrs	r2, r1
 800183e:	605a      	str	r2, [r3, #4]
             DMA_CNDTR_NDT, NbData);
}
 8001840:	46c0      	nop			; (mov r8, r8)
 8001842:	46bd      	mov	sp, r7
 8001844:	b004      	add	sp, #16
 8001846:	bd80      	pop	{r7, pc}
 8001848:	08003a40 	.word	0x08003a40

0800184c <LL_DMA_SetMemoryAddress>:
  *         @arg @ref LL_DMA_CHANNEL_7
  * @param  MemoryAddress Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryAddress(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryAddress)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b084      	sub	sp, #16
 8001850:	af00      	add	r7, sp, #0
 8001852:	60f8      	str	r0, [r7, #12]
 8001854:	60b9      	str	r1, [r7, #8]
 8001856:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, MemoryAddress);
 8001858:	68bb      	ldr	r3, [r7, #8]
 800185a:	3b01      	subs	r3, #1
 800185c:	4a05      	ldr	r2, [pc, #20]	; (8001874 <LL_DMA_SetMemoryAddress+0x28>)
 800185e:	5cd3      	ldrb	r3, [r2, r3]
 8001860:	001a      	movs	r2, r3
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	18d3      	adds	r3, r2, r3
 8001866:	687a      	ldr	r2, [r7, #4]
 8001868:	60da      	str	r2, [r3, #12]
}
 800186a:	46c0      	nop			; (mov r8, r8)
 800186c:	46bd      	mov	sp, r7
 800186e:	b004      	add	sp, #16
 8001870:	bd80      	pop	{r7, pc}
 8001872:	46c0      	nop			; (mov r8, r8)
 8001874:	08003a40 	.word	0x08003a40

08001878 <LL_DMA_SetPeriphAddress>:
  *         @arg @ref LL_DMA_CHANNEL_7
  * @param  PeriphAddress Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphAddress(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphAddress)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b084      	sub	sp, #16
 800187c:	af00      	add	r7, sp, #0
 800187e:	60f8      	str	r0, [r7, #12]
 8001880:	60b9      	str	r1, [r7, #8]
 8001882:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, PeriphAddress);
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	3b01      	subs	r3, #1
 8001888:	4a05      	ldr	r2, [pc, #20]	; (80018a0 <LL_DMA_SetPeriphAddress+0x28>)
 800188a:	5cd3      	ldrb	r3, [r2, r3]
 800188c:	001a      	movs	r2, r3
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	18d3      	adds	r3, r2, r3
 8001892:	687a      	ldr	r2, [r7, #4]
 8001894:	609a      	str	r2, [r3, #8]
}
 8001896:	46c0      	nop			; (mov r8, r8)
 8001898:	46bd      	mov	sp, r7
 800189a:	b004      	add	sp, #16
 800189c:	bd80      	pop	{r7, pc}
 800189e:	46c0      	nop			; (mov r8, r8)
 80018a0:	08003a40 	.word	0x08003a40

080018a4 <LL_DMA_EnableIT_TC>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b082      	sub	sp, #8
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
 80018ac:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TCIE);
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	3b01      	subs	r3, #1
 80018b2:	4a0a      	ldr	r2, [pc, #40]	; (80018dc <LL_DMA_EnableIT_TC+0x38>)
 80018b4:	5cd3      	ldrb	r3, [r2, r3]
 80018b6:	001a      	movs	r2, r3
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	18d3      	adds	r3, r2, r3
 80018bc:	681a      	ldr	r2, [r3, #0]
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	3b01      	subs	r3, #1
 80018c2:	4906      	ldr	r1, [pc, #24]	; (80018dc <LL_DMA_EnableIT_TC+0x38>)
 80018c4:	5ccb      	ldrb	r3, [r1, r3]
 80018c6:	0019      	movs	r1, r3
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	18cb      	adds	r3, r1, r3
 80018cc:	2102      	movs	r1, #2
 80018ce:	430a      	orrs	r2, r1
 80018d0:	601a      	str	r2, [r3, #0]
}
 80018d2:	46c0      	nop			; (mov r8, r8)
 80018d4:	46bd      	mov	sp, r7
 80018d6:	b002      	add	sp, #8
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	46c0      	nop			; (mov r8, r8)
 80018dc:	08003a40 	.word	0x08003a40

080018e0 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b082      	sub	sp, #8
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	2201      	movs	r2, #1
 80018ee:	431a      	orrs	r2, r3
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	601a      	str	r2, [r3, #0]
}
 80018f4:	46c0      	nop			; (mov r8, r8)
 80018f6:	46bd      	mov	sp, r7
 80018f8:	b002      	add	sp, #8
 80018fa:	bd80      	pop	{r7, pc}

080018fc <LL_TIM_EnableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_EnableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b082      	sub	sp, #8
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	68db      	ldr	r3, [r3, #12]
 8001908:	2201      	movs	r2, #1
 800190a:	431a      	orrs	r2, r3
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	60da      	str	r2, [r3, #12]
}
 8001910:	46c0      	nop			; (mov r8, r8)
 8001912:	46bd      	mov	sp, r7
 8001914:	b002      	add	sp, #8
 8001916:	bd80      	pop	{r7, pc}

08001918 <LL_GPIO_ReadInputPort>:
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b082      	sub	sp, #8
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(GPIOx->IDR));
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	691b      	ldr	r3, [r3, #16]
}
 8001924:	0018      	movs	r0, r3
 8001926:	46bd      	mov	sp, r7
 8001928:	b002      	add	sp, #8
 800192a:	bd80      	pop	{r7, pc}

0800192c <LL_GPIO_SetOutputPin>:
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b082      	sub	sp, #8
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
 8001934:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	683a      	ldr	r2, [r7, #0]
 800193a:	619a      	str	r2, [r3, #24]
}
 800193c:	46c0      	nop			; (mov r8, r8)
 800193e:	46bd      	mov	sp, r7
 8001940:	b002      	add	sp, #8
 8001942:	bd80      	pop	{r7, pc}

08001944 <LL_GPIO_ResetOutputPin>:
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b082      	sub	sp, #8
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
 800194c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	683a      	ldr	r2, [r7, #0]
 8001952:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001954:	46c0      	nop			; (mov r8, r8)
 8001956:	46bd      	mov	sp, r7
 8001958:	b002      	add	sp, #8
 800195a:	bd80      	pop	{r7, pc}

0800195c <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b084      	sub	sp, #16
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
 8001964:	6039      	str	r1, [r7, #0]
  uint32_t odr = READ_REG(GPIOx->ODR);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	695b      	ldr	r3, [r3, #20]
 800196a:	60fb      	str	r3, [r7, #12]
  WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	683a      	ldr	r2, [r7, #0]
 8001970:	4013      	ands	r3, r2
 8001972:	041a      	lsls	r2, r3, #16
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	43db      	mvns	r3, r3
 8001978:	6839      	ldr	r1, [r7, #0]
 800197a:	400b      	ands	r3, r1
 800197c:	431a      	orrs	r2, r3
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	619a      	str	r2, [r3, #24]
}
 8001982:	46c0      	nop			; (mov r8, r8)
 8001984:	46bd      	mov	sp, r7
 8001986:	b004      	add	sp, #16
 8001988:	bd80      	pop	{r7, pc}
	...

0800198c <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 800198c:	b5b0      	push	{r4, r5, r7, lr}
 800198e:	af00      	add	r7, sp, #0

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */

	LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_SYSCFG);
 8001990:	2001      	movs	r0, #1
 8001992:	f7ff fee7 	bl	8001764 <LL_APB1_GRP2_EnableClock>
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8001996:	2380      	movs	r3, #128	; 0x80
 8001998:	055b      	lsls	r3, r3, #21
 800199a:	0018      	movs	r0, r3
 800199c:	f7ff fecc 	bl	8001738 <LL_APB1_GRP1_EnableClock>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80019a0:	f000 fa2e 	bl	8001e00 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80019a4:	f7ff fb1a 	bl	8000fdc <MX_GPIO_Init>
	MX_DMA_Init();
 80019a8:	f7ff fa88 	bl	8000ebc <MX_DMA_Init>
	MX_ADC_Init();
 80019ac:	f7ff f93c 	bl	8000c28 <MX_ADC_Init>
	MX_USART1_UART_Init();
 80019b0:	f001 f958 	bl	8002c64 <MX_USART1_UART_Init>
	MX_TIM3_Init();
 80019b4:	f001 f82c 	bl	8002a10 <MX_TIM3_Init>
	/* USER CODE BEGIN 2 */
	//print("start\r\n");

	leds_test();
 80019b8:	f000 fdc0 	bl	800253c <leds_test>
	adc_init();
 80019bc:	f000 fd74 	bl	80024a8 <adc_init>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		if(is_off){
 80019c0:	4bc7      	ldr	r3, [pc, #796]	; (8001ce0 <main+0x354>)
 80019c2:	781b      	ldrb	r3, [r3, #0]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d014      	beq.n	80019f2 <main+0x66>
			off_delay_cnt++;
 80019c8:	4bc6      	ldr	r3, [pc, #792]	; (8001ce4 <main+0x358>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	1c5a      	adds	r2, r3, #1
 80019ce:	4bc5      	ldr	r3, [pc, #788]	; (8001ce4 <main+0x358>)
 80019d0:	601a      	str	r2, [r3, #0]
			if(off_delay_cnt>20000){
 80019d2:	4bc4      	ldr	r3, [pc, #784]	; (8001ce4 <main+0x358>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4ac4      	ldr	r2, [pc, #784]	; (8001ce8 <main+0x35c>)
 80019d8:	4293      	cmp	r3, r2
 80019da:	d90a      	bls.n	80019f2 <main+0x66>
				gov_off;
 80019dc:	4bc3      	ldr	r3, [pc, #780]	; (8001cec <main+0x360>)
 80019de:	2120      	movs	r1, #32
 80019e0:	0018      	movs	r0, r3
 80019e2:	f7ff ffaf 	bl	8001944 <LL_GPIO_ResetOutputPin>
				//is_off=0;
				working=0;
 80019e6:	4bc2      	ldr	r3, [pc, #776]	; (8001cf0 <main+0x364>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	701a      	strb	r2, [r3, #0]
				off_delay_cnt=0;
 80019ec:	4bbd      	ldr	r3, [pc, #756]	; (8001ce4 <main+0x358>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	601a      	str	r2, [r3, #0]
			}
		}
		if(check_err()){
 80019f2:	f000 fa7b 	bl	8001eec <check_err>
 80019f6:	1e03      	subs	r3, r0, #0
 80019f8:	d100      	bne.n	80019fc <main+0x70>
 80019fa:	e110      	b.n	8001c1e <main+0x292>
			if(mscnt%250==0)
 80019fc:	4bbd      	ldr	r3, [pc, #756]	; (8001cf4 <main+0x368>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	21fa      	movs	r1, #250	; 0xfa
 8001a02:	0018      	movs	r0, r3
 8001a04:	f7fe fc06 	bl	8000214 <__aeabi_uidivmod>
 8001a08:	1e0b      	subs	r3, r1, #0
 8001a0a:	d118      	bne.n	8001a3e <main+0xb2>
			{
				pwr_off;
 8001a0c:	2380      	movs	r3, #128	; 0x80
 8001a0e:	01db      	lsls	r3, r3, #7
 8001a10:	4ab9      	ldr	r2, [pc, #740]	; (8001cf8 <main+0x36c>)
 8001a12:	0019      	movs	r1, r3
 8001a14:	0010      	movs	r0, r2
 8001a16:	f7ff ff95 	bl	8001944 <LL_GPIO_ResetOutputPin>
				er_toggle;
 8001a1a:	2380      	movs	r3, #128	; 0x80
 8001a1c:	019b      	lsls	r3, r3, #6
 8001a1e:	4ab6      	ldr	r2, [pc, #728]	; (8001cf8 <main+0x36c>)
 8001a20:	0019      	movs	r1, r3
 8001a22:	0010      	movs	r0, r2
 8001a24:	f7ff ff9a 	bl	800195c <LL_GPIO_TogglePin>
				if(vac_err_low_flag){
 8001a28:	4bb4      	ldr	r3, [pc, #720]	; (8001cfc <main+0x370>)
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d006      	beq.n	8001a3e <main+0xb2>
					vac_toggle;
 8001a30:	2380      	movs	r3, #128	; 0x80
 8001a32:	005b      	lsls	r3, r3, #1
 8001a34:	4aad      	ldr	r2, [pc, #692]	; (8001cec <main+0x360>)
 8001a36:	0019      	movs	r1, r3
 8001a38:	0010      	movs	r0, r2
 8001a3a:	f7ff ff8f 	bl	800195c <LL_GPIO_TogglePin>
				}
			}
			pwr_off;
 8001a3e:	2380      	movs	r3, #128	; 0x80
 8001a40:	01db      	lsls	r3, r3, #7
 8001a42:	4aad      	ldr	r2, [pc, #692]	; (8001cf8 <main+0x36c>)
 8001a44:	0019      	movs	r1, r3
 8001a46:	0010      	movs	r0, r2
 8001a48:	f7ff ff7c 	bl	8001944 <LL_GPIO_ResetOutputPin>
			if(working){
 8001a4c:	4ba8      	ldr	r3, [pc, #672]	; (8001cf0 <main+0x364>)
 8001a4e:	781b      	ldrb	r3, [r3, #0]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d100      	bne.n	8001a56 <main+0xca>
 8001a54:	e0a1      	b.n	8001b9a <main+0x20e>
				if(!mute)
 8001a56:	4baa      	ldr	r3, [pc, #680]	; (8001d00 <main+0x374>)
 8001a58:	781b      	ldrb	r3, [r3, #0]
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	4053      	eors	r3, r2
 8001a5e:	b2db      	uxtb	r3, r3
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d034      	beq.n	8001ace <main+0x142>
				{
					siren_on;
 8001a64:	4ba1      	ldr	r3, [pc, #644]	; (8001cec <main+0x360>)
 8001a66:	2140      	movs	r1, #64	; 0x40
 8001a68:	0018      	movs	r0, r3
 8001a6a:	f7ff ff5f 	bl	800192c <LL_GPIO_SetOutputPin>
					if(isMutePressed){
 8001a6e:	4b9f      	ldr	r3, [pc, #636]	; (8001cec <main+0x360>)
 8001a70:	0018      	movs	r0, r3
 8001a72:	f7ff ff51 	bl	8001918 <LL_GPIO_ReadInputPort>
 8001a76:	0003      	movs	r3, r0
 8001a78:	2208      	movs	r2, #8
 8001a7a:	4013      	ands	r3, r2
 8001a7c:	d123      	bne.n	8001ac6 <main+0x13a>
						mute_cnt++;
 8001a7e:	4ba1      	ldr	r3, [pc, #644]	; (8001d04 <main+0x378>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	1c5a      	adds	r2, r3, #1
 8001a84:	4b9f      	ldr	r3, [pc, #636]	; (8001d04 <main+0x378>)
 8001a86:	601a      	str	r2, [r3, #0]
						if (mute_cnt>3000){
 8001a88:	4b9e      	ldr	r3, [pc, #632]	; (8001d04 <main+0x378>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a9e      	ldr	r2, [pc, #632]	; (8001d08 <main+0x37c>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d90f      	bls.n	8001ab2 <main+0x126>
							//turn off
							if(!is_off)
 8001a92:	4b93      	ldr	r3, [pc, #588]	; (8001ce0 <main+0x354>)
 8001a94:	781b      	ldrb	r3, [r3, #0]
 8001a96:	2201      	movs	r2, #1
 8001a98:	4053      	eors	r3, r2
 8001a9a:	b2db      	uxtb	r3, r3
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d004      	beq.n	8001aaa <main+0x11e>
								turn_off;
 8001aa0:	4b92      	ldr	r3, [pc, #584]	; (8001cec <main+0x360>)
 8001aa2:	2120      	movs	r1, #32
 8001aa4:	0018      	movs	r0, r3
 8001aa6:	f7ff ff41 	bl	800192c <LL_GPIO_SetOutputPin>
 8001aaa:	4b8d      	ldr	r3, [pc, #564]	; (8001ce0 <main+0x354>)
 8001aac:	2201      	movs	r2, #1
 8001aae:	701a      	strb	r2, [r3, #0]
 8001ab0:	e012      	b.n	8001ad8 <main+0x14c>
						}
						else if(mute_cnt>300){
 8001ab2:	4b94      	ldr	r3, [pc, #592]	; (8001d04 <main+0x378>)
 8001ab4:	681a      	ldr	r2, [r3, #0]
 8001ab6:	2396      	movs	r3, #150	; 0x96
 8001ab8:	005b      	lsls	r3, r3, #1
 8001aba:	429a      	cmp	r2, r3
 8001abc:	d90c      	bls.n	8001ad8 <main+0x14c>
							mute=1;
 8001abe:	4b90      	ldr	r3, [pc, #576]	; (8001d00 <main+0x374>)
 8001ac0:	2201      	movs	r2, #1
 8001ac2:	701a      	strb	r2, [r3, #0]
 8001ac4:	e008      	b.n	8001ad8 <main+0x14c>
						}
					}else{
						mute_cnt=0;
 8001ac6:	4b8f      	ldr	r3, [pc, #572]	; (8001d04 <main+0x378>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	601a      	str	r2, [r3, #0]
 8001acc:	e004      	b.n	8001ad8 <main+0x14c>
					}
				}
				else
				{
					siren_off;
 8001ace:	4b87      	ldr	r3, [pc, #540]	; (8001cec <main+0x360>)
 8001ad0:	2140      	movs	r1, #64	; 0x40
 8001ad2:	0018      	movs	r0, r3
 8001ad4:	f7ff ff36 	bl	8001944 <LL_GPIO_ResetOutputPin>
				}

				if(dyn_err_flag){
 8001ad8:	4b8c      	ldr	r3, [pc, #560]	; (8001d0c <main+0x380>)
 8001ada:	781b      	ldrb	r3, [r3, #0]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d02c      	beq.n	8001b3a <main+0x1ae>
					if(oil_err_flag||water_err_flag||ol_err_flag||emr_err_flag||freq_err_flag||vac_err_high_flag||vac_err_low_flag){
 8001ae0:	4b8b      	ldr	r3, [pc, #556]	; (8001d10 <main+0x384>)
 8001ae2:	781b      	ldrb	r3, [r3, #0]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d118      	bne.n	8001b1a <main+0x18e>
 8001ae8:	4b8a      	ldr	r3, [pc, #552]	; (8001d14 <main+0x388>)
 8001aea:	781b      	ldrb	r3, [r3, #0]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d114      	bne.n	8001b1a <main+0x18e>
 8001af0:	4b89      	ldr	r3, [pc, #548]	; (8001d18 <main+0x38c>)
 8001af2:	781b      	ldrb	r3, [r3, #0]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d110      	bne.n	8001b1a <main+0x18e>
 8001af8:	4b88      	ldr	r3, [pc, #544]	; (8001d1c <main+0x390>)
 8001afa:	781b      	ldrb	r3, [r3, #0]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d10c      	bne.n	8001b1a <main+0x18e>
 8001b00:	4b87      	ldr	r3, [pc, #540]	; (8001d20 <main+0x394>)
 8001b02:	781b      	ldrb	r3, [r3, #0]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d108      	bne.n	8001b1a <main+0x18e>
 8001b08:	4b86      	ldr	r3, [pc, #536]	; (8001d24 <main+0x398>)
 8001b0a:	781b      	ldrb	r3, [r3, #0]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d104      	bne.n	8001b1a <main+0x18e>
 8001b10:	4b7a      	ldr	r3, [pc, #488]	; (8001cfc <main+0x370>)
 8001b12:	781b      	ldrb	r3, [r3, #0]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d100      	bne.n	8001b1a <main+0x18e>
 8001b18:	e14f      	b.n	8001dba <main+0x42e>
						//turn off
						if(!is_off)
 8001b1a:	4b71      	ldr	r3, [pc, #452]	; (8001ce0 <main+0x354>)
 8001b1c:	781b      	ldrb	r3, [r3, #0]
 8001b1e:	2201      	movs	r2, #1
 8001b20:	4053      	eors	r3, r2
 8001b22:	b2db      	uxtb	r3, r3
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d004      	beq.n	8001b32 <main+0x1a6>
							turn_off;
 8001b28:	4b70      	ldr	r3, [pc, #448]	; (8001cec <main+0x360>)
 8001b2a:	2120      	movs	r1, #32
 8001b2c:	0018      	movs	r0, r3
 8001b2e:	f7ff fefd 	bl	800192c <LL_GPIO_SetOutputPin>
 8001b32:	4b6b      	ldr	r3, [pc, #428]	; (8001ce0 <main+0x354>)
 8001b34:	2201      	movs	r2, #1
 8001b36:	701a      	strb	r2, [r3, #0]
 8001b38:	e13f      	b.n	8001dba <main+0x42e>
					}else{

					}
				}else{
					//turn off
					if(oil_err_flag||water_err_flag||ol_err_flag||emr_err_flag||freq_err_flag||vac_err_high_flag||vac_err_low_flag){
 8001b3a:	4b75      	ldr	r3, [pc, #468]	; (8001d10 <main+0x384>)
 8001b3c:	781b      	ldrb	r3, [r3, #0]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d117      	bne.n	8001b72 <main+0x1e6>
 8001b42:	4b74      	ldr	r3, [pc, #464]	; (8001d14 <main+0x388>)
 8001b44:	781b      	ldrb	r3, [r3, #0]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d113      	bne.n	8001b72 <main+0x1e6>
 8001b4a:	4b73      	ldr	r3, [pc, #460]	; (8001d18 <main+0x38c>)
 8001b4c:	781b      	ldrb	r3, [r3, #0]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d10f      	bne.n	8001b72 <main+0x1e6>
 8001b52:	4b72      	ldr	r3, [pc, #456]	; (8001d1c <main+0x390>)
 8001b54:	781b      	ldrb	r3, [r3, #0]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d10b      	bne.n	8001b72 <main+0x1e6>
 8001b5a:	4b71      	ldr	r3, [pc, #452]	; (8001d20 <main+0x394>)
 8001b5c:	781b      	ldrb	r3, [r3, #0]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d107      	bne.n	8001b72 <main+0x1e6>
 8001b62:	4b70      	ldr	r3, [pc, #448]	; (8001d24 <main+0x398>)
 8001b64:	781b      	ldrb	r3, [r3, #0]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d103      	bne.n	8001b72 <main+0x1e6>
 8001b6a:	4b64      	ldr	r3, [pc, #400]	; (8001cfc <main+0x370>)
 8001b6c:	781b      	ldrb	r3, [r3, #0]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d00f      	beq.n	8001b92 <main+0x206>
						if(!is_off)
 8001b72:	4b5b      	ldr	r3, [pc, #364]	; (8001ce0 <main+0x354>)
 8001b74:	781b      	ldrb	r3, [r3, #0]
 8001b76:	2201      	movs	r2, #1
 8001b78:	4053      	eors	r3, r2
 8001b7a:	b2db      	uxtb	r3, r3
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d004      	beq.n	8001b8a <main+0x1fe>
							turn_off;
 8001b80:	4b5a      	ldr	r3, [pc, #360]	; (8001cec <main+0x360>)
 8001b82:	2120      	movs	r1, #32
 8001b84:	0018      	movs	r0, r3
 8001b86:	f7ff fed1 	bl	800192c <LL_GPIO_SetOutputPin>
 8001b8a:	4b55      	ldr	r3, [pc, #340]	; (8001ce0 <main+0x354>)
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	701a      	strb	r2, [r3, #0]
 8001b90:	e113      	b.n	8001dba <main+0x42e>
					}else{
						flag=0;
 8001b92:	4b65      	ldr	r3, [pc, #404]	; (8001d28 <main+0x39c>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	701a      	strb	r2, [r3, #0]
 8001b98:	e10f      	b.n	8001dba <main+0x42e>
					}
				}
			}else{
				if(isStartPressed){
 8001b9a:	2390      	movs	r3, #144	; 0x90
 8001b9c:	05db      	lsls	r3, r3, #23
 8001b9e:	0018      	movs	r0, r3
 8001ba0:	f7ff feba 	bl	8001918 <LL_GPIO_ReadInputPort>
 8001ba4:	0002      	movs	r2, r0
 8001ba6:	2380      	movs	r3, #128	; 0x80
 8001ba8:	021b      	lsls	r3, r3, #8
 8001baa:	4013      	ands	r3, r2
 8001bac:	d10b      	bne.n	8001bc6 <main+0x23a>
					if(!mute)
 8001bae:	4b54      	ldr	r3, [pc, #336]	; (8001d00 <main+0x374>)
 8001bb0:	781b      	ldrb	r3, [r3, #0]
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	4053      	eors	r3, r2
 8001bb6:	b2db      	uxtb	r3, r3
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d004      	beq.n	8001bc6 <main+0x23a>
					{
						siren_on;
 8001bbc:	4b4b      	ldr	r3, [pc, #300]	; (8001cec <main+0x360>)
 8001bbe:	2140      	movs	r1, #64	; 0x40
 8001bc0:	0018      	movs	r0, r3
 8001bc2:	f7ff feb3 	bl	800192c <LL_GPIO_SetOutputPin>
					}
				}


				if(!mute)
 8001bc6:	4b4e      	ldr	r3, [pc, #312]	; (8001d00 <main+0x374>)
 8001bc8:	781b      	ldrb	r3, [r3, #0]
 8001bca:	2201      	movs	r2, #1
 8001bcc:	4053      	eors	r3, r2
 8001bce:	b2db      	uxtb	r3, r3
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d01b      	beq.n	8001c0c <main+0x280>
				{
					if(isMutePressed){
 8001bd4:	4b45      	ldr	r3, [pc, #276]	; (8001cec <main+0x360>)
 8001bd6:	0018      	movs	r0, r3
 8001bd8:	f7ff fe9e 	bl	8001918 <LL_GPIO_ReadInputPort>
 8001bdc:	0003      	movs	r3, r0
 8001bde:	2208      	movs	r2, #8
 8001be0:	4013      	ands	r3, r2
 8001be2:	d10f      	bne.n	8001c04 <main+0x278>
						mute_cnt++;
 8001be4:	4b47      	ldr	r3, [pc, #284]	; (8001d04 <main+0x378>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	1c5a      	adds	r2, r3, #1
 8001bea:	4b46      	ldr	r3, [pc, #280]	; (8001d04 <main+0x378>)
 8001bec:	601a      	str	r2, [r3, #0]
						if(mute_cnt>300){
 8001bee:	4b45      	ldr	r3, [pc, #276]	; (8001d04 <main+0x378>)
 8001bf0:	681a      	ldr	r2, [r3, #0]
 8001bf2:	2396      	movs	r3, #150	; 0x96
 8001bf4:	005b      	lsls	r3, r3, #1
 8001bf6:	429a      	cmp	r2, r3
 8001bf8:	d800      	bhi.n	8001bfc <main+0x270>
 8001bfa:	e0de      	b.n	8001dba <main+0x42e>
							mute=1;
 8001bfc:	4b40      	ldr	r3, [pc, #256]	; (8001d00 <main+0x374>)
 8001bfe:	2201      	movs	r2, #1
 8001c00:	701a      	strb	r2, [r3, #0]
 8001c02:	e0da      	b.n	8001dba <main+0x42e>
						}
					}else{
						mute_cnt=0;
 8001c04:	4b3f      	ldr	r3, [pc, #252]	; (8001d04 <main+0x378>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	601a      	str	r2, [r3, #0]
 8001c0a:	e0d6      	b.n	8001dba <main+0x42e>
					}
				}
				else
				{
					siren_off;
 8001c0c:	4b37      	ldr	r3, [pc, #220]	; (8001cec <main+0x360>)
 8001c0e:	2140      	movs	r1, #64	; 0x40
 8001c10:	0018      	movs	r0, r3
 8001c12:	f7ff fe97 	bl	8001944 <LL_GPIO_ResetOutputPin>
					mute=0;
 8001c16:	4b3a      	ldr	r3, [pc, #232]	; (8001d00 <main+0x374>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	701a      	strb	r2, [r3, #0]
 8001c1c:	e0cd      	b.n	8001dba <main+0x42e>
				}
			}

		}else{
			if(first_check){
 8001c1e:	4b43      	ldr	r3, [pc, #268]	; (8001d2c <main+0x3a0>)
 8001c20:	781b      	ldrb	r3, [r3, #0]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d100      	bne.n	8001c28 <main+0x29c>
 8001c26:	e0c8      	b.n	8001dba <main+0x42e>
				er_off;
 8001c28:	2380      	movs	r3, #128	; 0x80
 8001c2a:	019b      	lsls	r3, r3, #6
 8001c2c:	4a32      	ldr	r2, [pc, #200]	; (8001cf8 <main+0x36c>)
 8001c2e:	0019      	movs	r1, r3
 8001c30:	0010      	movs	r0, r2
 8001c32:	f7ff fe87 	bl	8001944 <LL_GPIO_ResetOutputPin>
				siren_off;
 8001c36:	4b2d      	ldr	r3, [pc, #180]	; (8001cec <main+0x360>)
 8001c38:	2140      	movs	r1, #64	; 0x40
 8001c3a:	0018      	movs	r0, r3
 8001c3c:	f7ff fe82 	bl	8001944 <LL_GPIO_ResetOutputPin>
				mute=0;
 8001c40:	4b2f      	ldr	r3, [pc, #188]	; (8001d00 <main+0x374>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	701a      	strb	r2, [r3, #0]
				if(working){
 8001c46:	4b2a      	ldr	r3, [pc, #168]	; (8001cf0 <main+0x364>)
 8001c48:	781b      	ldrb	r3, [r3, #0]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d00f      	beq.n	8001c6e <main+0x2e2>
					if(mscnt%250==0)
 8001c4e:	4b29      	ldr	r3, [pc, #164]	; (8001cf4 <main+0x368>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	21fa      	movs	r1, #250	; 0xfa
 8001c54:	0018      	movs	r0, r3
 8001c56:	f7fe fadd 	bl	8000214 <__aeabi_uidivmod>
 8001c5a:	1e0b      	subs	r3, r1, #0
 8001c5c:	d10e      	bne.n	8001c7c <main+0x2f0>
					{
						pwr_toggle;
 8001c5e:	2380      	movs	r3, #128	; 0x80
 8001c60:	01db      	lsls	r3, r3, #7
 8001c62:	4a25      	ldr	r2, [pc, #148]	; (8001cf8 <main+0x36c>)
 8001c64:	0019      	movs	r1, r3
 8001c66:	0010      	movs	r0, r2
 8001c68:	f7ff fe78 	bl	800195c <LL_GPIO_TogglePin>
 8001c6c:	e006      	b.n	8001c7c <main+0x2f0>
					}
				}else{
					pwr_on;
 8001c6e:	2380      	movs	r3, #128	; 0x80
 8001c70:	01db      	lsls	r3, r3, #7
 8001c72:	4a21      	ldr	r2, [pc, #132]	; (8001cf8 <main+0x36c>)
 8001c74:	0019      	movs	r1, r3
 8001c76:	0010      	movs	r0, r2
 8001c78:	f7ff fe58 	bl	800192c <LL_GPIO_SetOutputPin>
				}

				if((isStartPressed)&&!(vbat>vdyn_min && freq>150)){//if(vbat>vdyn_min || freq>150)
 8001c7c:	2390      	movs	r3, #144	; 0x90
 8001c7e:	05db      	lsls	r3, r3, #23
 8001c80:	0018      	movs	r0, r3
 8001c82:	f7ff fe49 	bl	8001918 <LL_GPIO_ReadInputPort>
 8001c86:	0002      	movs	r2, r0
 8001c88:	2380      	movs	r3, #128	; 0x80
 8001c8a:	021b      	lsls	r3, r3, #8
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	d16b      	bne.n	8001d68 <main+0x3dc>
 8001c90:	4b27      	ldr	r3, [pc, #156]	; (8001d30 <main+0x3a4>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	1c18      	adds	r0, r3, #0
 8001c96:	f7fe fe77 	bl	8000988 <__aeabi_f2d>
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	1c1c      	adds	r4, r3, #0
 8001c9e:	4a25      	ldr	r2, [pc, #148]	; (8001d34 <main+0x3a8>)
 8001ca0:	4b25      	ldr	r3, [pc, #148]	; (8001d38 <main+0x3ac>)
 8001ca2:	f7fe fae7 	bl	8000274 <__aeabi_dcmpgt>
 8001ca6:	1e03      	subs	r3, r0, #0
 8001ca8:	d101      	bne.n	8001cae <main+0x322>
 8001caa:	2300      	movs	r3, #0
 8001cac:	1c1c      	adds	r4, r3, #0
 8001cae:	b2e3      	uxtb	r3, r4
 8001cb0:	2201      	movs	r2, #1
 8001cb2:	4053      	eors	r3, r2
 8001cb4:	b2db      	uxtb	r3, r3
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d103      	bne.n	8001cc2 <main+0x336>
 8001cba:	4b20      	ldr	r3, [pc, #128]	; (8001d3c <main+0x3b0>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	2b96      	cmp	r3, #150	; 0x96
 8001cc0:	d852      	bhi.n	8001d68 <main+0x3dc>
					if(start_cnt<20000){
 8001cc2:	4b1f      	ldr	r3, [pc, #124]	; (8001d40 <main+0x3b4>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4a1f      	ldr	r2, [pc, #124]	; (8001d44 <main+0x3b8>)
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d83f      	bhi.n	8001d4c <main+0x3c0>
						start_on;
 8001ccc:	4b07      	ldr	r3, [pc, #28]	; (8001cec <main+0x360>)
 8001cce:	2110      	movs	r1, #16
 8001cd0:	0018      	movs	r0, r3
 8001cd2:	f7ff fe2b 	bl	800192c <LL_GPIO_SetOutputPin>
						starting=1;
 8001cd6:	4b1c      	ldr	r3, [pc, #112]	; (8001d48 <main+0x3bc>)
 8001cd8:	2201      	movs	r2, #1
 8001cda:	701a      	strb	r2, [r3, #0]
 8001cdc:	e03e      	b.n	8001d5c <main+0x3d0>
 8001cde:	46c0      	nop			; (mov r8, r8)
 8001ce0:	20000044 	.word	0x20000044
 8001ce4:	20000064 	.word	0x20000064
 8001ce8:	00004e20 	.word	0x00004e20
 8001cec:	48000400 	.word	0x48000400
 8001cf0:	20000070 	.word	0x20000070
 8001cf4:	2000002c 	.word	0x2000002c
 8001cf8:	48000800 	.word	0x48000800
 8001cfc:	20000041 	.word	0x20000041
 8001d00:	20000038 	.word	0x20000038
 8001d04:	20000034 	.word	0x20000034
 8001d08:	00000bb8 	.word	0x00000bb8
 8001d0c:	2000003d 	.word	0x2000003d
 8001d10:	2000003a 	.word	0x2000003a
 8001d14:	2000003e 	.word	0x2000003e
 8001d18:	20000042 	.word	0x20000042
 8001d1c:	2000003c 	.word	0x2000003c
 8001d20:	2000003f 	.word	0x2000003f
 8001d24:	20000040 	.word	0x20000040
 8001d28:	2000006c 	.word	0x2000006c
 8001d2c:	2000006d 	.word	0x2000006d
 8001d30:	2000007c 	.word	0x2000007c
 8001d34:	66666666 	.word	0x66666666
 8001d38:	3ff26666 	.word	0x3ff26666
 8001d3c:	2000005c 	.word	0x2000005c
 8001d40:	20000030 	.word	0x20000030
 8001d44:	00004e1f 	.word	0x00004e1f
 8001d48:	2000006e 	.word	0x2000006e
					}else{
						start_off;
 8001d4c:	4b23      	ldr	r3, [pc, #140]	; (8001ddc <main+0x450>)
 8001d4e:	2110      	movs	r1, #16
 8001d50:	0018      	movs	r0, r3
 8001d52:	f7ff fdf7 	bl	8001944 <LL_GPIO_ResetOutputPin>
						starting=0;
 8001d56:	4b22      	ldr	r3, [pc, #136]	; (8001de0 <main+0x454>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	701a      	strb	r2, [r3, #0]
					}
					start_cnt++;
 8001d5c:	4b21      	ldr	r3, [pc, #132]	; (8001de4 <main+0x458>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	1c5a      	adds	r2, r3, #1
 8001d62:	4b20      	ldr	r3, [pc, #128]	; (8001de4 <main+0x458>)
 8001d64:	601a      	str	r2, [r3, #0]
 8001d66:	e00a      	b.n	8001d7e <main+0x3f2>
				}else{
					start_off;
 8001d68:	4b1c      	ldr	r3, [pc, #112]	; (8001ddc <main+0x450>)
 8001d6a:	2110      	movs	r1, #16
 8001d6c:	0018      	movs	r0, r3
 8001d6e:	f7ff fde9 	bl	8001944 <LL_GPIO_ResetOutputPin>
					start_cnt=0;
 8001d72:	4b1c      	ldr	r3, [pc, #112]	; (8001de4 <main+0x458>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	601a      	str	r2, [r3, #0]
					starting=0;
 8001d78:	4b19      	ldr	r3, [pc, #100]	; (8001de0 <main+0x454>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	701a      	strb	r2, [r3, #0]
				}

				if(isMutePressed){
 8001d7e:	4b17      	ldr	r3, [pc, #92]	; (8001ddc <main+0x450>)
 8001d80:	0018      	movs	r0, r3
 8001d82:	f7ff fdc9 	bl	8001918 <LL_GPIO_ReadInputPort>
 8001d86:	0003      	movs	r3, r0
 8001d88:	2208      	movs	r2, #8
 8001d8a:	4013      	ands	r3, r2
 8001d8c:	d112      	bne.n	8001db4 <main+0x428>
					mute_cnt++;
 8001d8e:	4b16      	ldr	r3, [pc, #88]	; (8001de8 <main+0x45c>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	1c5a      	adds	r2, r3, #1
 8001d94:	4b14      	ldr	r3, [pc, #80]	; (8001de8 <main+0x45c>)
 8001d96:	601a      	str	r2, [r3, #0]
					if(mute_cnt>1500){
 8001d98:	4b13      	ldr	r3, [pc, #76]	; (8001de8 <main+0x45c>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a13      	ldr	r2, [pc, #76]	; (8001dec <main+0x460>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d90b      	bls.n	8001dba <main+0x42e>
						//turn off
						turn_off;
 8001da2:	4b0e      	ldr	r3, [pc, #56]	; (8001ddc <main+0x450>)
 8001da4:	2120      	movs	r1, #32
 8001da6:	0018      	movs	r0, r3
 8001da8:	f7ff fdc0 	bl	800192c <LL_GPIO_SetOutputPin>
 8001dac:	4b10      	ldr	r3, [pc, #64]	; (8001df0 <main+0x464>)
 8001dae:	2201      	movs	r2, #1
 8001db0:	701a      	strb	r2, [r3, #0]
 8001db2:	e002      	b.n	8001dba <main+0x42e>
					}
				}else{
					mute_cnt=0;
 8001db4:	4b0c      	ldr	r3, [pc, #48]	; (8001de8 <main+0x45c>)
 8001db6:	2200      	movs	r2, #0
 8001db8:	601a      	str	r2, [r3, #0]
				}
			}
		}


		while(thick==old_thick);
 8001dba:	46c0      	nop			; (mov r8, r8)
 8001dbc:	4b0d      	ldr	r3, [pc, #52]	; (8001df4 <main+0x468>)
 8001dbe:	681a      	ldr	r2, [r3, #0]
 8001dc0:	4b0d      	ldr	r3, [pc, #52]	; (8001df8 <main+0x46c>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	d0f9      	beq.n	8001dbc <main+0x430>
		old_thick=thick;
 8001dc8:	4b0a      	ldr	r3, [pc, #40]	; (8001df4 <main+0x468>)
 8001dca:	681a      	ldr	r2, [r3, #0]
 8001dcc:	4b0a      	ldr	r3, [pc, #40]	; (8001df8 <main+0x46c>)
 8001dce:	601a      	str	r2, [r3, #0]
		mscnt++;
 8001dd0:	4b0a      	ldr	r3, [pc, #40]	; (8001dfc <main+0x470>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	1c5a      	adds	r2, r3, #1
 8001dd6:	4b09      	ldr	r3, [pc, #36]	; (8001dfc <main+0x470>)
 8001dd8:	601a      	str	r2, [r3, #0]
		if(is_off){
 8001dda:	e5f1      	b.n	80019c0 <main+0x34>
 8001ddc:	48000400 	.word	0x48000400
 8001de0:	2000006e 	.word	0x2000006e
 8001de4:	20000030 	.word	0x20000030
 8001de8:	20000034 	.word	0x20000034
 8001dec:	000005dc 	.word	0x000005dc
 8001df0:	20000044 	.word	0x20000044
 8001df4:	20000074 	.word	0x20000074
 8001df8:	20000028 	.word	0x20000028
 8001dfc:	2000002c 	.word	0x2000002c

08001e00 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	af00      	add	r7, sp, #0
	LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 8001e04:	2000      	movs	r0, #0
 8001e06:	f7ff fcc3 	bl	8001790 <LL_FLASH_SetLatency>
	while(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_0)
 8001e0a:	46c0      	nop			; (mov r8, r8)
 8001e0c:	f7ff fcd4 	bl	80017b8 <LL_FLASH_GetLatency>
 8001e10:	1e03      	subs	r3, r0, #0
 8001e12:	d1fb      	bne.n	8001e0c <SystemClock_Config+0xc>
	{
	}
	LL_RCC_HSI_Enable();
 8001e14:	f7ff fb72 	bl	80014fc <LL_RCC_HSI_Enable>

	/* Wait till HSI is ready */
	while(LL_RCC_HSI_IsReady() != 1)
 8001e18:	46c0      	nop			; (mov r8, r8)
 8001e1a:	f7ff fb7d 	bl	8001518 <LL_RCC_HSI_IsReady>
 8001e1e:	0003      	movs	r3, r0
 8001e20:	2b01      	cmp	r3, #1
 8001e22:	d1fa      	bne.n	8001e1a <SystemClock_Config+0x1a>
	{

	}
	LL_RCC_HSI_SetCalibTrimming(16);
 8001e24:	2010      	movs	r0, #16
 8001e26:	f7ff fb87 	bl	8001538 <LL_RCC_HSI_SetCalibTrimming>
	LL_RCC_HSI14_Enable();
 8001e2a:	f7ff fb99 	bl	8001560 <LL_RCC_HSI14_Enable>

	/* Wait till HSI14 is ready */
	while(LL_RCC_HSI14_IsReady() != 1)
 8001e2e:	46c0      	nop			; (mov r8, r8)
 8001e30:	f7ff fba4 	bl	800157c <LL_RCC_HSI14_IsReady>
 8001e34:	0003      	movs	r3, r0
 8001e36:	2b01      	cmp	r3, #1
 8001e38:	d1fa      	bne.n	8001e30 <SystemClock_Config+0x30>
	{

	}
	LL_RCC_HSI14_SetCalibTrimming(16);
 8001e3a:	2010      	movs	r0, #16
 8001e3c:	f7ff fbbc 	bl	80015b8 <LL_RCC_HSI14_SetCalibTrimming>
	LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI_DIV_2, LL_RCC_PLL_MUL_4);
 8001e40:	2380      	movs	r3, #128	; 0x80
 8001e42:	031b      	lsls	r3, r3, #12
 8001e44:	0019      	movs	r1, r3
 8001e46:	2000      	movs	r0, #0
 8001e48:	f7ff fc50 	bl	80016ec <LL_RCC_PLL_ConfigDomain_SYS>
	LL_RCC_PLL_Enable();
 8001e4c:	f7ff fc2c 	bl	80016a8 <LL_RCC_PLL_Enable>

	/* Wait till PLL is ready */
	while(LL_RCC_PLL_IsReady() != 1)
 8001e50:	46c0      	nop			; (mov r8, r8)
 8001e52:	f7ff fc37 	bl	80016c4 <LL_RCC_PLL_IsReady>
 8001e56:	0003      	movs	r3, r0
 8001e58:	2b01      	cmp	r3, #1
 8001e5a:	d1fa      	bne.n	8001e52 <SystemClock_Config+0x52>
	{

	}
	LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8001e5c:	2000      	movs	r0, #0
 8001e5e:	f7ff fbdf 	bl	8001620 <LL_RCC_SetAHBPrescaler>
	LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8001e62:	2000      	movs	r0, #0
 8001e64:	f7ff fbf0 	bl	8001648 <LL_RCC_SetAPB1Prescaler>
	LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8001e68:	2002      	movs	r0, #2
 8001e6a:	f7ff fbb9 	bl	80015e0 <LL_RCC_SetSysClkSource>

	/* Wait till System clock is ready */
	while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8001e6e:	46c0      	nop			; (mov r8, r8)
 8001e70:	f7ff fbca 	bl	8001608 <LL_RCC_GetSysClkSource>
 8001e74:	0003      	movs	r3, r0
 8001e76:	2b08      	cmp	r3, #8
 8001e78:	d1fa      	bne.n	8001e70 <SystemClock_Config+0x70>
	{

	}
	LL_Init1msTick(16000000);
 8001e7a:	4b08      	ldr	r3, [pc, #32]	; (8001e9c <SystemClock_Config+0x9c>)
 8001e7c:	0018      	movs	r0, r3
 8001e7e:	f001 fd47 	bl	8003910 <LL_Init1msTick>
	LL_SetSystemCoreClock(16000000);
 8001e82:	4b06      	ldr	r3, [pc, #24]	; (8001e9c <SystemClock_Config+0x9c>)
 8001e84:	0018      	movs	r0, r3
 8001e86:	f001 fd75 	bl	8003974 <LL_SetSystemCoreClock>
	LL_RCC_HSI14_EnableADCControl();
 8001e8a:	f7ff fb87 	bl	800159c <LL_RCC_HSI14_EnableADCControl>
	LL_RCC_SetUSARTClockSource(LL_RCC_USART1_CLKSOURCE_PCLK1);
 8001e8e:	2000      	movs	r0, #0
 8001e90:	f7ff fbf0 	bl	8001674 <LL_RCC_SetUSARTClockSource>
}
 8001e94:	46c0      	nop			; (mov r8, r8)
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	46c0      	nop			; (mov r8, r8)
 8001e9c:	00f42400 	.word	0x00f42400

08001ea0 <cal_min>:
	}
}
#endif


float cal_min(float*val){
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b084      	sub	sp, #16
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
	float min=val[0];
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	60fb      	str	r3, [r7, #12]
	for(int i=0;i<200;i++){
 8001eae:	2300      	movs	r3, #0
 8001eb0:	60bb      	str	r3, [r7, #8]
 8001eb2:	e013      	b.n	8001edc <cal_min+0x3c>
		if(min>val[i])min=val[i];
 8001eb4:	68bb      	ldr	r3, [r7, #8]
 8001eb6:	009b      	lsls	r3, r3, #2
 8001eb8:	687a      	ldr	r2, [r7, #4]
 8001eba:	18d3      	adds	r3, r2, r3
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	1c19      	adds	r1, r3, #0
 8001ec0:	68f8      	ldr	r0, [r7, #12]
 8001ec2:	f7fe fa11 	bl	80002e8 <__aeabi_fcmpgt>
 8001ec6:	1e03      	subs	r3, r0, #0
 8001ec8:	d005      	beq.n	8001ed6 <cal_min+0x36>
 8001eca:	68bb      	ldr	r3, [r7, #8]
 8001ecc:	009b      	lsls	r3, r3, #2
 8001ece:	687a      	ldr	r2, [r7, #4]
 8001ed0:	18d3      	adds	r3, r2, r3
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	60fb      	str	r3, [r7, #12]
	for(int i=0;i<200;i++){
 8001ed6:	68bb      	ldr	r3, [r7, #8]
 8001ed8:	3301      	adds	r3, #1
 8001eda:	60bb      	str	r3, [r7, #8]
 8001edc:	68bb      	ldr	r3, [r7, #8]
 8001ede:	2bc7      	cmp	r3, #199	; 0xc7
 8001ee0:	dde8      	ble.n	8001eb4 <cal_min+0x14>
	}
	return min;
 8001ee2:	68fb      	ldr	r3, [r7, #12]
}
 8001ee4:	1c18      	adds	r0, r3, #0
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	b004      	add	sp, #16
 8001eea:	bd80      	pop	{r7, pc}

08001eec <check_err>:

_Bool check_err(){
 8001eec:	b580      	push	{r7, lr}
 8001eee:	af00      	add	r7, sp, #0
	if(!is_off){
 8001ef0:	4baa      	ldr	r3, [pc, #680]	; (800219c <check_err+0x2b0>)
 8001ef2:	781b      	ldrb	r3, [r3, #0]
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	4053      	eors	r3, r2
 8001ef8:	b2db      	uxtb	r3, r3
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d100      	bne.n	8001f00 <check_err+0x14>
 8001efe:	e2a1      	b.n	8002444 <check_err+0x558>
		if(adc){
 8001f00:	4ba7      	ldr	r3, [pc, #668]	; (80021a0 <check_err+0x2b4>)
 8001f02:	781b      	ldrb	r3, [r3, #0]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d05d      	beq.n	8001fc4 <check_err+0xd8>
			new_val=1;
 8001f08:	4ba6      	ldr	r3, [pc, #664]	; (80021a4 <check_err+0x2b8>)
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	701a      	strb	r2, [r3, #0]
			vac_sample=vac_sample_int*(float)(3.3/4096);
 8001f0e:	4ba6      	ldr	r3, [pc, #664]	; (80021a8 <check_err+0x2bc>)
 8001f10:	881b      	ldrh	r3, [r3, #0]
 8001f12:	0018      	movs	r0, r3
 8001f14:	f7fe fbd4 	bl	80006c0 <__aeabi_i2f>
 8001f18:	1c03      	adds	r3, r0, #0
 8001f1a:	49a4      	ldr	r1, [pc, #656]	; (80021ac <check_err+0x2c0>)
 8001f1c:	1c18      	adds	r0, r3, #0
 8001f1e:	f7fe fab5 	bl	800048c <__aeabi_fmul>
 8001f22:	1c03      	adds	r3, r0, #0
 8001f24:	1c1a      	adds	r2, r3, #0
 8001f26:	4ba2      	ldr	r3, [pc, #648]	; (80021b0 <check_err+0x2c4>)
 8001f28:	601a      	str	r2, [r3, #0]
			if(vac_sample<2.0){
 8001f2a:	4ba1      	ldr	r3, [pc, #644]	; (80021b0 <check_err+0x2c4>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	2180      	movs	r1, #128	; 0x80
 8001f30:	05c9      	lsls	r1, r1, #23
 8001f32:	1c18      	adds	r0, r3, #0
 8001f34:	f7fe f9c4 	bl	80002c0 <__aeabi_fcmplt>
 8001f38:	1e03      	subs	r3, r0, #0
 8001f3a:	d003      	beq.n	8001f44 <check_err+0x58>
				pulse=1;
 8001f3c:	4b9d      	ldr	r3, [pc, #628]	; (80021b4 <check_err+0x2c8>)
 8001f3e:	2201      	movs	r2, #1
 8001f40:	601a      	str	r2, [r3, #0]
 8001f42:	e016      	b.n	8001f72 <check_err+0x86>
			}else{
				if(vac_sample>2.7 && pulse){
 8001f44:	4b9a      	ldr	r3, [pc, #616]	; (80021b0 <check_err+0x2c4>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	1c18      	adds	r0, r3, #0
 8001f4a:	f7fe fd1d 	bl	8000988 <__aeabi_f2d>
 8001f4e:	4a9a      	ldr	r2, [pc, #616]	; (80021b8 <check_err+0x2cc>)
 8001f50:	4b9a      	ldr	r3, [pc, #616]	; (80021bc <check_err+0x2d0>)
 8001f52:	f7fe f98f 	bl	8000274 <__aeabi_dcmpgt>
 8001f56:	1e03      	subs	r3, r0, #0
 8001f58:	d00b      	beq.n	8001f72 <check_err+0x86>
 8001f5a:	4b96      	ldr	r3, [pc, #600]	; (80021b4 <check_err+0x2c8>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d007      	beq.n	8001f72 <check_err+0x86>
					fr++;
 8001f62:	4b97      	ldr	r3, [pc, #604]	; (80021c0 <check_err+0x2d4>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	1c5a      	adds	r2, r3, #1
 8001f68:	4b95      	ldr	r3, [pc, #596]	; (80021c0 <check_err+0x2d4>)
 8001f6a:	601a      	str	r2, [r3, #0]
					pulse=0;
 8001f6c:	4b91      	ldr	r3, [pc, #580]	; (80021b4 <check_err+0x2c8>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	601a      	str	r2, [r3, #0]
				}
			}
			samples[sample_cnt++]=vac_sample;
 8001f72:	4b94      	ldr	r3, [pc, #592]	; (80021c4 <check_err+0x2d8>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	1c59      	adds	r1, r3, #1
 8001f78:	4a92      	ldr	r2, [pc, #584]	; (80021c4 <check_err+0x2d8>)
 8001f7a:	6011      	str	r1, [r2, #0]
 8001f7c:	4a8c      	ldr	r2, [pc, #560]	; (80021b0 <check_err+0x2c4>)
 8001f7e:	6811      	ldr	r1, [r2, #0]
 8001f80:	4a91      	ldr	r2, [pc, #580]	; (80021c8 <check_err+0x2dc>)
 8001f82:	009b      	lsls	r3, r3, #2
 8001f84:	5099      	str	r1, [r3, r2]
			if(sample_cnt==sizeof(samples)/4){
 8001f86:	4b8f      	ldr	r3, [pc, #572]	; (80021c4 <check_err+0x2d8>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	2bc8      	cmp	r3, #200	; 0xc8
 8001f8c:	d109      	bne.n	8001fa2 <check_err+0xb6>
				sample_cnt=0;
 8001f8e:	4b8d      	ldr	r3, [pc, #564]	; (80021c4 <check_err+0x2d8>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	601a      	str	r2, [r3, #0]
				min_sample=cal_min(samples);
 8001f94:	4b8c      	ldr	r3, [pc, #560]	; (80021c8 <check_err+0x2dc>)
 8001f96:	0018      	movs	r0, r3
 8001f98:	f7ff ff82 	bl	8001ea0 <cal_min>
 8001f9c:	1c02      	adds	r2, r0, #0
 8001f9e:	4b8b      	ldr	r3, [pc, #556]	; (80021cc <check_err+0x2e0>)
 8001fa0:	601a      	str	r2, [r3, #0]
				//if(min_sample)
			}



			vadc=vadc_int*(float)(3.3/4096);
 8001fa2:	4b8b      	ldr	r3, [pc, #556]	; (80021d0 <check_err+0x2e4>)
 8001fa4:	881b      	ldrh	r3, [r3, #0]
 8001fa6:	0018      	movs	r0, r3
 8001fa8:	f7fe fb8a 	bl	80006c0 <__aeabi_i2f>
 8001fac:	1c03      	adds	r3, r0, #0
 8001fae:	497f      	ldr	r1, [pc, #508]	; (80021ac <check_err+0x2c0>)
 8001fb0:	1c18      	adds	r0, r3, #0
 8001fb2:	f7fe fa6b 	bl	800048c <__aeabi_fmul>
 8001fb6:	1c03      	adds	r3, r0, #0
 8001fb8:	1c1a      	adds	r2, r3, #0
 8001fba:	4b86      	ldr	r3, [pc, #536]	; (80021d4 <check_err+0x2e8>)
 8001fbc:	601a      	str	r2, [r3, #0]
			adc=0;
 8001fbe:	4b78      	ldr	r3, [pc, #480]	; (80021a0 <check_err+0x2b4>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	701a      	strb	r2, [r3, #0]

		}


		if(working){
 8001fc4:	4b84      	ldr	r3, [pc, #528]	; (80021d8 <check_err+0x2ec>)
 8001fc6:	781b      	ldrb	r3, [r3, #0]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d100      	bne.n	8001fce <check_err+0xe2>
 8001fcc:	e0b2      	b.n	8002134 <check_err+0x248>
			if((oil_err)&& working_time>3000){
 8001fce:	2390      	movs	r3, #144	; 0x90
 8001fd0:	05db      	lsls	r3, r3, #23
 8001fd2:	0018      	movs	r0, r3
 8001fd4:	f7ff fca0 	bl	8001918 <LL_GPIO_ReadInputPort>
 8001fd8:	0003      	movs	r3, r0
 8001fda:	2280      	movs	r2, #128	; 0x80
 8001fdc:	4013      	ands	r3, r2
 8001fde:	d10f      	bne.n	8002000 <check_err+0x114>
 8001fe0:	4b7e      	ldr	r3, [pc, #504]	; (80021dc <check_err+0x2f0>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a7e      	ldr	r2, [pc, #504]	; (80021e0 <check_err+0x2f4>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d90a      	bls.n	8002000 <check_err+0x114>
				oil_on;
 8001fea:	4b7e      	ldr	r3, [pc, #504]	; (80021e4 <check_err+0x2f8>)
 8001fec:	2104      	movs	r1, #4
 8001fee:	0018      	movs	r0, r3
 8001ff0:	f7ff fc9c 	bl	800192c <LL_GPIO_SetOutputPin>
				oil_err_flag=1;
 8001ff4:	4b7c      	ldr	r3, [pc, #496]	; (80021e8 <check_err+0x2fc>)
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	701a      	strb	r2, [r3, #0]
				//err_cnt++;
				flag=1;
 8001ffa:	4b7c      	ldr	r3, [pc, #496]	; (80021ec <check_err+0x300>)
 8001ffc:	2201      	movs	r2, #1
 8001ffe:	701a      	strb	r2, [r3, #0]
			}
			//		else{
			//			oil_err_flag=0;
			//			oil_off;
			//		}
			if(new_val){
 8002000:	4b68      	ldr	r3, [pc, #416]	; (80021a4 <check_err+0x2b8>)
 8002002:	781b      	ldrb	r3, [r3, #0]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d010      	beq.n	800202a <check_err+0x13e>
				new_val=0;
 8002008:	4b66      	ldr	r3, [pc, #408]	; (80021a4 <check_err+0x2b8>)
 800200a:	2200      	movs	r2, #0
 800200c:	701a      	strb	r2, [r3, #0]
				vbat=vbat_int*(float)(3.3/4096);
 800200e:	4b78      	ldr	r3, [pc, #480]	; (80021f0 <check_err+0x304>)
 8002010:	881b      	ldrh	r3, [r3, #0]
 8002012:	0018      	movs	r0, r3
 8002014:	f7fe fb54 	bl	80006c0 <__aeabi_i2f>
 8002018:	1c03      	adds	r3, r0, #0
 800201a:	4964      	ldr	r1, [pc, #400]	; (80021ac <check_err+0x2c0>)
 800201c:	1c18      	adds	r0, r3, #0
 800201e:	f7fe fa35 	bl	800048c <__aeabi_fmul>
 8002022:	1c03      	adds	r3, r0, #0
 8002024:	1c1a      	adds	r2, r3, #0
 8002026:	4b73      	ldr	r3, [pc, #460]	; (80021f4 <check_err+0x308>)
 8002028:	601a      	str	r2, [r3, #0]
				//			vbat*=5.54;
				//			vbat+=0.6;
			}
			if((vbat<vdyn_min && working_time>10000) || dyn_err){
 800202a:	4b72      	ldr	r3, [pc, #456]	; (80021f4 <check_err+0x308>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	1c18      	adds	r0, r3, #0
 8002030:	f7fe fcaa 	bl	8000988 <__aeabi_f2d>
 8002034:	4a70      	ldr	r2, [pc, #448]	; (80021f8 <check_err+0x30c>)
 8002036:	4b71      	ldr	r3, [pc, #452]	; (80021fc <check_err+0x310>)
 8002038:	f7fe f908 	bl	800024c <__aeabi_dcmplt>
 800203c:	1e03      	subs	r3, r0, #0
 800203e:	d004      	beq.n	800204a <check_err+0x15e>
 8002040:	4b66      	ldr	r3, [pc, #408]	; (80021dc <check_err+0x2f0>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a6e      	ldr	r2, [pc, #440]	; (8002200 <check_err+0x314>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d808      	bhi.n	800205c <check_err+0x170>
 800204a:	4b66      	ldr	r3, [pc, #408]	; (80021e4 <check_err+0x2f8>)
 800204c:	0018      	movs	r0, r3
 800204e:	f7ff fc63 	bl	8001918 <LL_GPIO_ReadInputPort>
 8002052:	0002      	movs	r2, r0
 8002054:	2380      	movs	r3, #128	; 0x80
 8002056:	01db      	lsls	r3, r3, #7
 8002058:	4013      	ands	r3, r2
 800205a:	d10d      	bne.n	8002078 <check_err+0x18c>
				bat_on;
 800205c:	2380      	movs	r3, #128	; 0x80
 800205e:	011b      	lsls	r3, r3, #4
 8002060:	4a60      	ldr	r2, [pc, #384]	; (80021e4 <check_err+0x2f8>)
 8002062:	0019      	movs	r1, r3
 8002064:	0010      	movs	r0, r2
 8002066:	f7ff fc61 	bl	800192c <LL_GPIO_SetOutputPin>
				dyn_err_flag=1;
 800206a:	4b66      	ldr	r3, [pc, #408]	; (8002204 <check_err+0x318>)
 800206c:	2201      	movs	r2, #1
 800206e:	701a      	strb	r2, [r3, #0]

				flag=1;
 8002070:	4b5e      	ldr	r3, [pc, #376]	; (80021ec <check_err+0x300>)
 8002072:	2201      	movs	r2, #1
 8002074:	701a      	strb	r2, [r3, #0]
 8002076:	e009      	b.n	800208c <check_err+0x1a0>
			}else{
				dyn_err_flag=0;
 8002078:	4b62      	ldr	r3, [pc, #392]	; (8002204 <check_err+0x318>)
 800207a:	2200      	movs	r2, #0
 800207c:	701a      	strb	r2, [r3, #0]
				bat_off;
 800207e:	2380      	movs	r3, #128	; 0x80
 8002080:	011b      	lsls	r3, r3, #4
 8002082:	4a58      	ldr	r2, [pc, #352]	; (80021e4 <check_err+0x2f8>)
 8002084:	0019      	movs	r1, r3
 8002086:	0010      	movs	r0, r2
 8002088:	f7ff fc5c 	bl	8001944 <LL_GPIO_ResetOutputPin>
			}

			if((min_sample<vac_min)&& working_time>200000){
 800208c:	4b4f      	ldr	r3, [pc, #316]	; (80021cc <check_err+0x2e0>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	1c18      	adds	r0, r3, #0
 8002092:	f7fe fc79 	bl	8000988 <__aeabi_f2d>
 8002096:	4a58      	ldr	r2, [pc, #352]	; (80021f8 <check_err+0x30c>)
 8002098:	4b5b      	ldr	r3, [pc, #364]	; (8002208 <check_err+0x31c>)
 800209a:	f7fe f8d7 	bl	800024c <__aeabi_dcmplt>
 800209e:	1e03      	subs	r3, r0, #0
 80020a0:	d007      	beq.n	80020b2 <check_err+0x1c6>
 80020a2:	4b4e      	ldr	r3, [pc, #312]	; (80021dc <check_err+0x2f0>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4a59      	ldr	r2, [pc, #356]	; (800220c <check_err+0x320>)
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d902      	bls.n	80020b2 <check_err+0x1c6>
				//vac_on;
				//flag=1;
				//err_cnt++;
				vac_err_high_flag=1;
 80020ac:	4b58      	ldr	r3, [pc, #352]	; (8002210 <check_err+0x324>)
 80020ae:	2201      	movs	r2, #1
 80020b0:	701a      	strb	r2, [r3, #0]
			}

			if((min_sample>vac_max)&& working_time>200000){
 80020b2:	4b46      	ldr	r3, [pc, #280]	; (80021cc <check_err+0x2e0>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	1c18      	adds	r0, r3, #0
 80020b8:	f7fe fc66 	bl	8000988 <__aeabi_f2d>
 80020bc:	4a55      	ldr	r2, [pc, #340]	; (8002214 <check_err+0x328>)
 80020be:	4b56      	ldr	r3, [pc, #344]	; (8002218 <check_err+0x32c>)
 80020c0:	f7fe f8d8 	bl	8000274 <__aeabi_dcmpgt>
 80020c4:	1e03      	subs	r3, r0, #0
 80020c6:	d007      	beq.n	80020d8 <check_err+0x1ec>
 80020c8:	4b44      	ldr	r3, [pc, #272]	; (80021dc <check_err+0x2f0>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a4f      	ldr	r2, [pc, #316]	; (800220c <check_err+0x320>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d902      	bls.n	80020d8 <check_err+0x1ec>
				//flag=1;
				//err_cnt++;
				vac_err_low_flag=1;
 80020d2:	4b52      	ldr	r3, [pc, #328]	; (800221c <check_err+0x330>)
 80020d4:	2201      	movs	r2, #1
 80020d6:	701a      	strb	r2, [r3, #0]
			}

			if(!(vac_err_high_flag||vac_err_low_flag)){
 80020d8:	4b4d      	ldr	r3, [pc, #308]	; (8002210 <check_err+0x324>)
 80020da:	781b      	ldrb	r3, [r3, #0]
 80020dc:	2201      	movs	r2, #1
 80020de:	4053      	eors	r3, r2
 80020e0:	b2db      	uxtb	r3, r3
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d00a      	beq.n	80020fc <check_err+0x210>
 80020e6:	4b4d      	ldr	r3, [pc, #308]	; (800221c <check_err+0x330>)
 80020e8:	781b      	ldrb	r3, [r3, #0]
 80020ea:	2201      	movs	r2, #1
 80020ec:	4053      	eors	r3, r2
 80020ee:	b2db      	uxtb	r3, r3
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d003      	beq.n	80020fc <check_err+0x210>
				//vac_off;
				vac_err_cnt=0;
 80020f4:	4b4a      	ldr	r3, [pc, #296]	; (8002220 <check_err+0x334>)
 80020f6:	2200      	movs	r2, #0
 80020f8:	601a      	str	r2, [r3, #0]
 80020fa:	e004      	b.n	8002106 <check_err+0x21a>
			}else{
				vac_err_cnt++;
 80020fc:	4b48      	ldr	r3, [pc, #288]	; (8002220 <check_err+0x334>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	1c5a      	adds	r2, r3, #1
 8002102:	4b47      	ldr	r3, [pc, #284]	; (8002220 <check_err+0x334>)
 8002104:	601a      	str	r2, [r3, #0]
			}
			if((freq<192||freq>208)&&(working_time>200000)){//
 8002106:	4b47      	ldr	r3, [pc, #284]	; (8002224 <check_err+0x338>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	2bbf      	cmp	r3, #191	; 0xbf
 800210c:	d903      	bls.n	8002116 <check_err+0x22a>
 800210e:	4b45      	ldr	r3, [pc, #276]	; (8002224 <check_err+0x338>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	2bd0      	cmp	r3, #208	; 0xd0
 8002114:	d90a      	bls.n	800212c <check_err+0x240>
 8002116:	4b31      	ldr	r3, [pc, #196]	; (80021dc <check_err+0x2f0>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a3c      	ldr	r2, [pc, #240]	; (800220c <check_err+0x320>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d905      	bls.n	800212c <check_err+0x240>
				//fr_on;
				fr_err_cnt++;
 8002120:	4b41      	ldr	r3, [pc, #260]	; (8002228 <check_err+0x33c>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	1c5a      	adds	r2, r3, #1
 8002126:	4b40      	ldr	r3, [pc, #256]	; (8002228 <check_err+0x33c>)
 8002128:	601a      	str	r2, [r3, #0]
 800212a:	e09f      	b.n	800226c <check_err+0x380>
				//flag=1;
				//err_cnt++;
				//freq_err_flag=1;
			}else{
				fr_err_cnt=0;
 800212c:	4b3e      	ldr	r3, [pc, #248]	; (8002228 <check_err+0x33c>)
 800212e:	2200      	movs	r2, #0
 8002130:	601a      	str	r2, [r3, #0]
 8002132:	e09b      	b.n	800226c <check_err+0x380>
			}
		}else{
			//not working


			if(new_val){
 8002134:	4b1b      	ldr	r3, [pc, #108]	; (80021a4 <check_err+0x2b8>)
 8002136:	781b      	ldrb	r3, [r3, #0]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d010      	beq.n	800215e <check_err+0x272>

				new_val=0;
 800213c:	4b19      	ldr	r3, [pc, #100]	; (80021a4 <check_err+0x2b8>)
 800213e:	2200      	movs	r2, #0
 8002140:	701a      	strb	r2, [r3, #0]
				vbat=vbat_int*(float)(3.3/4096);
 8002142:	4b2b      	ldr	r3, [pc, #172]	; (80021f0 <check_err+0x304>)
 8002144:	881b      	ldrh	r3, [r3, #0]
 8002146:	0018      	movs	r0, r3
 8002148:	f7fe faba 	bl	80006c0 <__aeabi_i2f>
 800214c:	1c03      	adds	r3, r0, #0
 800214e:	4917      	ldr	r1, [pc, #92]	; (80021ac <check_err+0x2c0>)
 8002150:	1c18      	adds	r0, r3, #0
 8002152:	f7fe f99b 	bl	800048c <__aeabi_fmul>
 8002156:	1c03      	adds	r3, r0, #0
 8002158:	1c1a      	adds	r2, r3, #0
 800215a:	4b26      	ldr	r3, [pc, #152]	; (80021f4 <check_err+0x308>)
 800215c:	601a      	str	r2, [r3, #0]
				//			vbat*=5.54;
				//			vbat+=0.6;
			}


			if(vbat<vbat_min&&!starting){
 800215e:	4b25      	ldr	r3, [pc, #148]	; (80021f4 <check_err+0x308>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	21fe      	movs	r1, #254	; 0xfe
 8002164:	0589      	lsls	r1, r1, #22
 8002166:	1c18      	adds	r0, r3, #0
 8002168:	f7fe f8aa 	bl	80002c0 <__aeabi_fcmplt>
 800216c:	1e03      	subs	r3, r0, #0
 800216e:	d061      	beq.n	8002234 <check_err+0x348>
 8002170:	4b2e      	ldr	r3, [pc, #184]	; (800222c <check_err+0x340>)
 8002172:	781b      	ldrb	r3, [r3, #0]
 8002174:	2201      	movs	r2, #1
 8002176:	4053      	eors	r3, r2
 8002178:	b2db      	uxtb	r3, r3
 800217a:	2b00      	cmp	r3, #0
 800217c:	d05a      	beq.n	8002234 <check_err+0x348>
				bat_on;
 800217e:	2380      	movs	r3, #128	; 0x80
 8002180:	011b      	lsls	r3, r3, #4
 8002182:	4a18      	ldr	r2, [pc, #96]	; (80021e4 <check_err+0x2f8>)
 8002184:	0019      	movs	r1, r3
 8002186:	0010      	movs	r0, r2
 8002188:	f7ff fbd0 	bl	800192c <LL_GPIO_SetOutputPin>
				flag=1;
 800218c:	4b17      	ldr	r3, [pc, #92]	; (80021ec <check_err+0x300>)
 800218e:	2201      	movs	r2, #1
 8002190:	701a      	strb	r2, [r3, #0]
				//err_cnt++;
				bat_err_flag=1;
 8002192:	4b27      	ldr	r3, [pc, #156]	; (8002230 <check_err+0x344>)
 8002194:	2201      	movs	r2, #1
 8002196:	701a      	strb	r2, [r3, #0]
 8002198:	e056      	b.n	8002248 <check_err+0x35c>
 800219a:	46c0      	nop			; (mov r8, r8)
 800219c:	20000044 	.word	0x20000044
 80021a0:	2000006f 	.word	0x2000006f
 80021a4:	20000039 	.word	0x20000039
 80021a8:	200003a8 	.word	0x200003a8
 80021ac:	3a533333 	.word	0x3a533333
 80021b0:	200003a0 	.word	0x200003a0
 80021b4:	20000058 	.word	0x20000058
 80021b8:	9999999a 	.word	0x9999999a
 80021bc:	40059999 	.word	0x40059999
 80021c0:	20000054 	.word	0x20000054
 80021c4:	2000004c 	.word	0x2000004c
 80021c8:	20000080 	.word	0x20000080
 80021cc:	20000048 	.word	0x20000048
 80021d0:	200003aa 	.word	0x200003aa
 80021d4:	200003a4 	.word	0x200003a4
 80021d8:	20000070 	.word	0x20000070
 80021dc:	20000078 	.word	0x20000078
 80021e0:	00000bb8 	.word	0x00000bb8
 80021e4:	48000400 	.word	0x48000400
 80021e8:	2000003a 	.word	0x2000003a
 80021ec:	2000006c 	.word	0x2000006c
 80021f0:	200003ac 	.word	0x200003ac
 80021f4:	2000007c 	.word	0x2000007c
 80021f8:	66666666 	.word	0x66666666
 80021fc:	3ff26666 	.word	0x3ff26666
 8002200:	00002710 	.word	0x00002710
 8002204:	2000003d 	.word	0x2000003d
 8002208:	3fd66666 	.word	0x3fd66666
 800220c:	00030d40 	.word	0x00030d40
 8002210:	20000040 	.word	0x20000040
 8002214:	851eb852 	.word	0x851eb852
 8002218:	3ff451eb 	.word	0x3ff451eb
 800221c:	20000041 	.word	0x20000041
 8002220:	20000068 	.word	0x20000068
 8002224:	2000005c 	.word	0x2000005c
 8002228:	20000060 	.word	0x20000060
 800222c:	2000006e 	.word	0x2000006e
 8002230:	20000043 	.word	0x20000043
			}else{
				bat_off;
 8002234:	2380      	movs	r3, #128	; 0x80
 8002236:	011b      	lsls	r3, r3, #4
 8002238:	4a85      	ldr	r2, [pc, #532]	; (8002450 <check_err+0x564>)
 800223a:	0019      	movs	r1, r3
 800223c:	0010      	movs	r0, r2
 800223e:	f7ff fb81 	bl	8001944 <LL_GPIO_ResetOutputPin>
				bat_err_flag=0;
 8002242:	4b84      	ldr	r3, [pc, #528]	; (8002454 <check_err+0x568>)
 8002244:	2200      	movs	r2, #0
 8002246:	701a      	strb	r2, [r3, #0]
			}

			if(vbat>vdyn_min || freq>150){
 8002248:	4b83      	ldr	r3, [pc, #524]	; (8002458 <check_err+0x56c>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	1c18      	adds	r0, r3, #0
 800224e:	f7fe fb9b 	bl	8000988 <__aeabi_f2d>
 8002252:	4a82      	ldr	r2, [pc, #520]	; (800245c <check_err+0x570>)
 8002254:	4b82      	ldr	r3, [pc, #520]	; (8002460 <check_err+0x574>)
 8002256:	f7fe f80d 	bl	8000274 <__aeabi_dcmpgt>
 800225a:	1e03      	subs	r3, r0, #0
 800225c:	d103      	bne.n	8002266 <check_err+0x37a>
 800225e:	4b81      	ldr	r3, [pc, #516]	; (8002464 <check_err+0x578>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	2b96      	cmp	r3, #150	; 0x96
 8002264:	d902      	bls.n	800226c <check_err+0x380>
				working=1;
 8002266:	4b80      	ldr	r3, [pc, #512]	; (8002468 <check_err+0x57c>)
 8002268:	2201      	movs	r2, #1
 800226a:	701a      	strb	r2, [r3, #0]
			}

		}

		if(water_err){
 800226c:	4b78      	ldr	r3, [pc, #480]	; (8002450 <check_err+0x564>)
 800226e:	0018      	movs	r0, r3
 8002270:	f7ff fb52 	bl	8001918 <LL_GPIO_ReadInputPort>
 8002274:	0003      	movs	r3, r0
 8002276:	2201      	movs	r2, #1
 8002278:	4013      	ands	r3, r2
 800227a:	d10c      	bne.n	8002296 <check_err+0x3aa>
			water_on;
 800227c:	2380      	movs	r3, #128	; 0x80
 800227e:	00db      	lsls	r3, r3, #3
 8002280:	4a73      	ldr	r2, [pc, #460]	; (8002450 <check_err+0x564>)
 8002282:	0019      	movs	r1, r3
 8002284:	0010      	movs	r0, r2
 8002286:	f7ff fb51 	bl	800192c <LL_GPIO_SetOutputPin>
			water_err_flag=1;
 800228a:	4b78      	ldr	r3, [pc, #480]	; (800246c <check_err+0x580>)
 800228c:	2201      	movs	r2, #1
 800228e:	701a      	strb	r2, [r3, #0]
			flag=1;
 8002290:	4b77      	ldr	r3, [pc, #476]	; (8002470 <check_err+0x584>)
 8002292:	2201      	movs	r2, #1
 8002294:	701a      	strb	r2, [r3, #0]
			//err_cnt++;
		}

		if(feul_err){
 8002296:	4b6e      	ldr	r3, [pc, #440]	; (8002450 <check_err+0x564>)
 8002298:	0018      	movs	r0, r3
 800229a:	f7ff fb3d 	bl	8001918 <LL_GPIO_ReadInputPort>
 800229e:	0002      	movs	r2, r0
 80022a0:	2380      	movs	r3, #128	; 0x80
 80022a2:	021b      	lsls	r3, r3, #8
 80022a4:	4013      	ands	r3, r2
 80022a6:	d10c      	bne.n	80022c2 <check_err+0x3d6>
			feul_on;
 80022a8:	2380      	movs	r3, #128	; 0x80
 80022aa:	019b      	lsls	r3, r3, #6
 80022ac:	4a68      	ldr	r2, [pc, #416]	; (8002450 <check_err+0x564>)
 80022ae:	0019      	movs	r1, r3
 80022b0:	0010      	movs	r0, r2
 80022b2:	f7ff fb3b 	bl	800192c <LL_GPIO_SetOutputPin>
			flag=1;
 80022b6:	4b6e      	ldr	r3, [pc, #440]	; (8002470 <check_err+0x584>)
 80022b8:	2201      	movs	r2, #1
 80022ba:	701a      	strb	r2, [r3, #0]
			//err_cnt++;
			feul_err_flag=1;
 80022bc:	4b6d      	ldr	r3, [pc, #436]	; (8002474 <check_err+0x588>)
 80022be:	2201      	movs	r2, #1
 80022c0:	701a      	strb	r2, [r3, #0]
		}

		if(emr_err){
 80022c2:	2390      	movs	r3, #144	; 0x90
 80022c4:	05db      	lsls	r3, r3, #23
 80022c6:	0018      	movs	r0, r3
 80022c8:	f7ff fb26 	bl	8001918 <LL_GPIO_ReadInputPort>
 80022cc:	0002      	movs	r2, r0
 80022ce:	2380      	movs	r3, #128	; 0x80
 80022d0:	005b      	lsls	r3, r3, #1
 80022d2:	4013      	ands	r3, r2
 80022d4:	d10c      	bne.n	80022f0 <check_err+0x404>
			emr_on;
 80022d6:	2380      	movs	r3, #128	; 0x80
 80022d8:	015b      	lsls	r3, r3, #5
 80022da:	4a5d      	ldr	r2, [pc, #372]	; (8002450 <check_err+0x564>)
 80022dc:	0019      	movs	r1, r3
 80022de:	0010      	movs	r0, r2
 80022e0:	f7ff fb24 	bl	800192c <LL_GPIO_SetOutputPin>
			flag=1;
 80022e4:	4b62      	ldr	r3, [pc, #392]	; (8002470 <check_err+0x584>)
 80022e6:	2201      	movs	r2, #1
 80022e8:	701a      	strb	r2, [r3, #0]
			//err_cnt++;
			emr_err_flag=1;
 80022ea:	4b63      	ldr	r3, [pc, #396]	; (8002478 <check_err+0x58c>)
 80022ec:	2201      	movs	r2, #1
 80022ee:	701a      	strb	r2, [r3, #0]
		}


		if(ol_err){
 80022f0:	4b57      	ldr	r3, [pc, #348]	; (8002450 <check_err+0x564>)
 80022f2:	0018      	movs	r0, r3
 80022f4:	f7ff fb10 	bl	8001918 <LL_GPIO_ReadInputPort>
 80022f8:	0003      	movs	r3, r0
 80022fa:	2202      	movs	r2, #2
 80022fc:	4013      	ands	r3, r2
 80022fe:	d10c      	bne.n	800231a <check_err+0x42e>
			ol_err_flag=1;
 8002300:	4b5e      	ldr	r3, [pc, #376]	; (800247c <check_err+0x590>)
 8002302:	2201      	movs	r2, #1
 8002304:	701a      	strb	r2, [r3, #0]
			ol_on;
 8002306:	2380      	movs	r3, #128	; 0x80
 8002308:	021b      	lsls	r3, r3, #8
 800230a:	4a5d      	ldr	r2, [pc, #372]	; (8002480 <check_err+0x594>)
 800230c:	0019      	movs	r1, r3
 800230e:	0010      	movs	r0, r2
 8002310:	f7ff fb0c 	bl	800192c <LL_GPIO_SetOutputPin>
			flag=1;
 8002314:	4b56      	ldr	r3, [pc, #344]	; (8002470 <check_err+0x584>)
 8002316:	2201      	movs	r2, #1
 8002318:	701a      	strb	r2, [r3, #0]
			//err_cnt++;
		}

		if(vac_err_cnt>100){
 800231a:	4b5a      	ldr	r3, [pc, #360]	; (8002484 <check_err+0x598>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	2b64      	cmp	r3, #100	; 0x64
 8002320:	d913      	bls.n	800234a <check_err+0x45e>
			flag=1;
 8002322:	4b53      	ldr	r3, [pc, #332]	; (8002470 <check_err+0x584>)
 8002324:	2201      	movs	r2, #1
 8002326:	701a      	strb	r2, [r3, #0]
			err_cnt++;
 8002328:	4b57      	ldr	r3, [pc, #348]	; (8002488 <check_err+0x59c>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	1c5a      	adds	r2, r3, #1
 800232e:	4b56      	ldr	r3, [pc, #344]	; (8002488 <check_err+0x59c>)
 8002330:	601a      	str	r2, [r3, #0]
			//freq_err_flag=1;
			if(vac_err_high_flag){
 8002332:	4b56      	ldr	r3, [pc, #344]	; (800248c <check_err+0x5a0>)
 8002334:	781b      	ldrb	r3, [r3, #0]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d014      	beq.n	8002364 <check_err+0x478>
				vac_on;
 800233a:	2380      	movs	r3, #128	; 0x80
 800233c:	005b      	lsls	r3, r3, #1
 800233e:	4a44      	ldr	r2, [pc, #272]	; (8002450 <check_err+0x564>)
 8002340:	0019      	movs	r1, r3
 8002342:	0010      	movs	r0, r2
 8002344:	f7ff faf2 	bl	800192c <LL_GPIO_SetOutputPin>
 8002348:	e00c      	b.n	8002364 <check_err+0x478>
			}
		}else{
			vac_err_high_flag=0;
 800234a:	4b50      	ldr	r3, [pc, #320]	; (800248c <check_err+0x5a0>)
 800234c:	2200      	movs	r2, #0
 800234e:	701a      	strb	r2, [r3, #0]
			vac_err_low_flag=0;
 8002350:	4b4f      	ldr	r3, [pc, #316]	; (8002490 <check_err+0x5a4>)
 8002352:	2200      	movs	r2, #0
 8002354:	701a      	strb	r2, [r3, #0]
			vac_off;
 8002356:	2380      	movs	r3, #128	; 0x80
 8002358:	005b      	lsls	r3, r3, #1
 800235a:	4a3d      	ldr	r2, [pc, #244]	; (8002450 <check_err+0x564>)
 800235c:	0019      	movs	r1, r3
 800235e:	0010      	movs	r0, r2
 8002360:	f7ff faf0 	bl	8001944 <LL_GPIO_ResetOutputPin>
		}

		if(fr_err_cnt>3000){
 8002364:	4b4b      	ldr	r3, [pc, #300]	; (8002494 <check_err+0x5a8>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a4b      	ldr	r2, [pc, #300]	; (8002498 <check_err+0x5ac>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d90f      	bls.n	800238e <check_err+0x4a2>
			flag=1;
 800236e:	4b40      	ldr	r3, [pc, #256]	; (8002470 <check_err+0x584>)
 8002370:	2201      	movs	r2, #1
 8002372:	701a      	strb	r2, [r3, #0]
			err_cnt++;
 8002374:	4b44      	ldr	r3, [pc, #272]	; (8002488 <check_err+0x59c>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	1c5a      	adds	r2, r3, #1
 800237a:	4b43      	ldr	r3, [pc, #268]	; (8002488 <check_err+0x59c>)
 800237c:	601a      	str	r2, [r3, #0]
			fr_on;
 800237e:	4b34      	ldr	r3, [pc, #208]	; (8002450 <check_err+0x564>)
 8002380:	2180      	movs	r1, #128	; 0x80
 8002382:	0018      	movs	r0, r3
 8002384:	f7ff fad2 	bl	800192c <LL_GPIO_SetOutputPin>
			freq_err_flag=1;
 8002388:	4b44      	ldr	r3, [pc, #272]	; (800249c <check_err+0x5b0>)
 800238a:	2201      	movs	r2, #1
 800238c:	701a      	strb	r2, [r3, #0]
		}

		if(!flag){
 800238e:	4b38      	ldr	r3, [pc, #224]	; (8002470 <check_err+0x584>)
 8002390:	781b      	ldrb	r3, [r3, #0]
 8002392:	2201      	movs	r2, #1
 8002394:	4053      	eors	r3, r2
 8002396:	b2db      	uxtb	r3, r3
 8002398:	2b00      	cmp	r3, #0
 800239a:	d003      	beq.n	80023a4 <check_err+0x4b8>
			err_cnt=0;
 800239c:	4b3a      	ldr	r3, [pc, #232]	; (8002488 <check_err+0x59c>)
 800239e:	2200      	movs	r2, #0
 80023a0:	601a      	str	r2, [r3, #0]
 80023a2:	e00b      	b.n	80023bc <check_err+0x4d0>
		}else{
			err_cnt++;
 80023a4:	4b38      	ldr	r3, [pc, #224]	; (8002488 <check_err+0x59c>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	1c5a      	adds	r2, r3, #1
 80023aa:	4b37      	ldr	r3, [pc, #220]	; (8002488 <check_err+0x59c>)
 80023ac:	601a      	str	r2, [r3, #0]
			if(err_cnt<200){
 80023ae:	4b36      	ldr	r3, [pc, #216]	; (8002488 <check_err+0x59c>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	2bc7      	cmp	r3, #199	; 0xc7
 80023b4:	d802      	bhi.n	80023bc <check_err+0x4d0>
				flag=0;
 80023b6:	4b2e      	ldr	r3, [pc, #184]	; (8002470 <check_err+0x584>)
 80023b8:	2200      	movs	r2, #0
 80023ba:	701a      	strb	r2, [r3, #0]
			}
		}
		if(mscnt>1000){
 80023bc:	4b38      	ldr	r3, [pc, #224]	; (80024a0 <check_err+0x5b4>)
 80023be:	681a      	ldr	r2, [r3, #0]
 80023c0:	23fa      	movs	r3, #250	; 0xfa
 80023c2:	009b      	lsls	r3, r3, #2
 80023c4:	429a      	cmp	r2, r3
 80023c6:	d902      	bls.n	80023ce <check_err+0x4e2>
			first_check=1;
 80023c8:	4b36      	ldr	r3, [pc, #216]	; (80024a4 <check_err+0x5b8>)
 80023ca:	2201      	movs	r2, #1
 80023cc:	701a      	strb	r2, [r3, #0]
		}
		if(!flag){
 80023ce:	4b28      	ldr	r3, [pc, #160]	; (8002470 <check_err+0x584>)
 80023d0:	781b      	ldrb	r3, [r3, #0]
 80023d2:	2201      	movs	r2, #1
 80023d4:	4053      	eors	r3, r2
 80023d6:	b2db      	uxtb	r3, r3
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d033      	beq.n	8002444 <check_err+0x558>
			oil_off;
 80023dc:	4b1c      	ldr	r3, [pc, #112]	; (8002450 <check_err+0x564>)
 80023de:	2104      	movs	r1, #4
 80023e0:	0018      	movs	r0, r3
 80023e2:	f7ff faaf 	bl	8001944 <LL_GPIO_ResetOutputPin>
			water_off;
 80023e6:	2380      	movs	r3, #128	; 0x80
 80023e8:	00db      	lsls	r3, r3, #3
 80023ea:	4a19      	ldr	r2, [pc, #100]	; (8002450 <check_err+0x564>)
 80023ec:	0019      	movs	r1, r3
 80023ee:	0010      	movs	r0, r2
 80023f0:	f7ff faa8 	bl	8001944 <LL_GPIO_ResetOutputPin>
			emr_off;
 80023f4:	2380      	movs	r3, #128	; 0x80
 80023f6:	015b      	lsls	r3, r3, #5
 80023f8:	4a15      	ldr	r2, [pc, #84]	; (8002450 <check_err+0x564>)
 80023fa:	0019      	movs	r1, r3
 80023fc:	0010      	movs	r0, r2
 80023fe:	f7ff faa1 	bl	8001944 <LL_GPIO_ResetOutputPin>
			ol_off;
 8002402:	2380      	movs	r3, #128	; 0x80
 8002404:	021b      	lsls	r3, r3, #8
 8002406:	4a1e      	ldr	r2, [pc, #120]	; (8002480 <check_err+0x594>)
 8002408:	0019      	movs	r1, r3
 800240a:	0010      	movs	r0, r2
 800240c:	f7ff fa9a 	bl	8001944 <LL_GPIO_ResetOutputPin>
			feul_off;
 8002410:	2380      	movs	r3, #128	; 0x80
 8002412:	019b      	lsls	r3, r3, #6
 8002414:	4a0e      	ldr	r2, [pc, #56]	; (8002450 <check_err+0x564>)
 8002416:	0019      	movs	r1, r3
 8002418:	0010      	movs	r0, r2
 800241a:	f7ff fa93 	bl	8001944 <LL_GPIO_ResetOutputPin>
			bat_off;
 800241e:	2380      	movs	r3, #128	; 0x80
 8002420:	011b      	lsls	r3, r3, #4
 8002422:	4a0b      	ldr	r2, [pc, #44]	; (8002450 <check_err+0x564>)
 8002424:	0019      	movs	r1, r3
 8002426:	0010      	movs	r0, r2
 8002428:	f7ff fa8c 	bl	8001944 <LL_GPIO_ResetOutputPin>
			fr_off;
 800242c:	4b08      	ldr	r3, [pc, #32]	; (8002450 <check_err+0x564>)
 800242e:	2180      	movs	r1, #128	; 0x80
 8002430:	0018      	movs	r0, r3
 8002432:	f7ff fa87 	bl	8001944 <LL_GPIO_ResetOutputPin>
			vac_off;
 8002436:	2380      	movs	r3, #128	; 0x80
 8002438:	005b      	lsls	r3, r3, #1
 800243a:	4a05      	ldr	r2, [pc, #20]	; (8002450 <check_err+0x564>)
 800243c:	0019      	movs	r1, r3
 800243e:	0010      	movs	r0, r2
 8002440:	f7ff fa80 	bl	8001944 <LL_GPIO_ResetOutputPin>
		}
	}
	return flag;
 8002444:	4b0a      	ldr	r3, [pc, #40]	; (8002470 <check_err+0x584>)
 8002446:	781b      	ldrb	r3, [r3, #0]
}
 8002448:	0018      	movs	r0, r3
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}
 800244e:	46c0      	nop			; (mov r8, r8)
 8002450:	48000400 	.word	0x48000400
 8002454:	20000043 	.word	0x20000043
 8002458:	2000007c 	.word	0x2000007c
 800245c:	66666666 	.word	0x66666666
 8002460:	3ff26666 	.word	0x3ff26666
 8002464:	2000005c 	.word	0x2000005c
 8002468:	20000070 	.word	0x20000070
 800246c:	2000003e 	.word	0x2000003e
 8002470:	2000006c 	.word	0x2000006c
 8002474:	2000003b 	.word	0x2000003b
 8002478:	2000003c 	.word	0x2000003c
 800247c:	20000042 	.word	0x20000042
 8002480:	48000800 	.word	0x48000800
 8002484:	20000068 	.word	0x20000068
 8002488:	20000050 	.word	0x20000050
 800248c:	20000040 	.word	0x20000040
 8002490:	20000041 	.word	0x20000041
 8002494:	20000060 	.word	0x20000060
 8002498:	00000bb8 	.word	0x00000bb8
 800249c:	2000003f 	.word	0x2000003f
 80024a0:	2000002c 	.word	0x2000002c
 80024a4:	2000006d 	.word	0x2000006d

080024a8 <adc_init>:
void adc_init() {
 80024a8:	b580      	push	{r7, lr}
 80024aa:	af00      	add	r7, sp, #0
	LL_TIM_EnableCounter(TIM3);
 80024ac:	4b1f      	ldr	r3, [pc, #124]	; (800252c <adc_init+0x84>)
 80024ae:	0018      	movs	r0, r3
 80024b0:	f7ff fa16 	bl	80018e0 <LL_TIM_EnableCounter>
	LL_TIM_EnableIT_UPDATE(TIM3);
 80024b4:	4b1d      	ldr	r3, [pc, #116]	; (800252c <adc_init+0x84>)
 80024b6:	0018      	movs	r0, r3
 80024b8:	f7ff fa20 	bl	80018fc <LL_TIM_EnableIT_UPDATE>
	LL_ADC_StartCalibration(ADC1);
 80024bc:	4b1c      	ldr	r3, [pc, #112]	; (8002530 <adc_init+0x88>)
 80024be:	0018      	movs	r0, r3
 80024c0:	f7fe ffe2 	bl	8001488 <LL_ADC_StartCalibration>
	while (LL_ADC_IsCalibrationOnGoing(ADC1));
 80024c4:	46c0      	nop			; (mov r8, r8)
 80024c6:	4b1a      	ldr	r3, [pc, #104]	; (8002530 <adc_init+0x88>)
 80024c8:	0018      	movs	r0, r3
 80024ca:	f7fe fff1 	bl	80014b0 <LL_ADC_IsCalibrationOnGoing>
 80024ce:	1e03      	subs	r3, r0, #0
 80024d0:	d1f9      	bne.n	80024c6 <adc_init+0x1e>

	LL_ADC_Enable(ADC1);
 80024d2:	4b17      	ldr	r3, [pc, #92]	; (8002530 <adc_init+0x88>)
 80024d4:	0018      	movs	r0, r3
 80024d6:	f7fe ffc5 	bl	8001464 <LL_ADC_Enable>
	LL_ADC_REG_StartConversion(ADC1);
 80024da:	4b15      	ldr	r3, [pc, #84]	; (8002530 <adc_init+0x88>)
 80024dc:	0018      	movs	r0, r3
 80024de:	f7fe fffb 	bl	80014d8 <LL_ADC_REG_StartConversion>
	LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_1, 3);
 80024e2:	4b14      	ldr	r3, [pc, #80]	; (8002534 <adc_init+0x8c>)
 80024e4:	2203      	movs	r2, #3
 80024e6:	2101      	movs	r1, #1
 80024e8:	0018      	movs	r0, r3
 80024ea:	f7ff f98f 	bl	800180c <LL_DMA_SetDataLength>
	LL_DMA_SetPeriphAddress(DMA1, LL_DMA_CHANNEL_1,
 80024ee:	4b10      	ldr	r3, [pc, #64]	; (8002530 <adc_init+0x88>)
 80024f0:	2100      	movs	r1, #0
 80024f2:	0018      	movs	r0, r3
 80024f4:	f7fe ffaa 	bl	800144c <LL_ADC_DMA_GetRegAddr>
 80024f8:	0003      	movs	r3, r0
 80024fa:	480e      	ldr	r0, [pc, #56]	; (8002534 <adc_init+0x8c>)
 80024fc:	001a      	movs	r2, r3
 80024fe:	2101      	movs	r1, #1
 8002500:	f7ff f9ba 	bl	8001878 <LL_DMA_SetPeriphAddress>
			LL_ADC_DMA_GetRegAddr(ADC1, LL_ADC_DMA_REG_REGULAR_DATA));
	LL_DMA_SetMemoryAddress(DMA1, LL_DMA_CHANNEL_1,(uint32_t)adc_val);
 8002504:	4b0c      	ldr	r3, [pc, #48]	; (8002538 <adc_init+0x90>)
 8002506:	480b      	ldr	r0, [pc, #44]	; (8002534 <adc_init+0x8c>)
 8002508:	001a      	movs	r2, r3
 800250a:	2101      	movs	r1, #1
 800250c:	f7ff f99e 	bl	800184c <LL_DMA_SetMemoryAddress>
	LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_1);
 8002510:	4b08      	ldr	r3, [pc, #32]	; (8002534 <adc_init+0x8c>)
 8002512:	2101      	movs	r1, #1
 8002514:	0018      	movs	r0, r3
 8002516:	f7ff f95b 	bl	80017d0 <LL_DMA_EnableChannel>
	LL_DMA_EnableIT_TC(DMA1, LL_DMA_CHANNEL_1);
 800251a:	4b06      	ldr	r3, [pc, #24]	; (8002534 <adc_init+0x8c>)
 800251c:	2101      	movs	r1, #1
 800251e:	0018      	movs	r0, r3
 8002520:	f7ff f9c0 	bl	80018a4 <LL_DMA_EnableIT_TC>
}
 8002524:	46c0      	nop			; (mov r8, r8)
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}
 800252a:	46c0      	nop			; (mov r8, r8)
 800252c:	40000400 	.word	0x40000400
 8002530:	40012400 	.word	0x40012400
 8002534:	40020000 	.word	0x40020000
 8002538:	20000020 	.word	0x20000020

0800253c <leds_test>:

void leds_test() {
 800253c:	b580      	push	{r7, lr}
 800253e:	b082      	sub	sp, #8
 8002540:	af00      	add	r7, sp, #0
	for (int i = 0; i < 5; i++) {
 8002542:	2300      	movs	r3, #0
 8002544:	607b      	str	r3, [r7, #4]
 8002546:	e0a4      	b.n	8002692 <leds_test+0x156>
		vac_off;
 8002548:	2380      	movs	r3, #128	; 0x80
 800254a:	005b      	lsls	r3, r3, #1
 800254c:	4a58      	ldr	r2, [pc, #352]	; (80026b0 <leds_test+0x174>)
 800254e:	0019      	movs	r1, r3
 8002550:	0010      	movs	r0, r2
 8002552:	f7ff f9f7 	bl	8001944 <LL_GPIO_ResetOutputPin>
		oil_on;
 8002556:	4b56      	ldr	r3, [pc, #344]	; (80026b0 <leds_test+0x174>)
 8002558:	2104      	movs	r1, #4
 800255a:	0018      	movs	r0, r3
 800255c:	f7ff f9e6 	bl	800192c <LL_GPIO_SetOutputPin>
		ms_delay(250);
 8002560:	20fa      	movs	r0, #250	; 0xfa
 8002562:	f001 f9e5 	bl	8003930 <LL_mDelay>
		oil_off;
 8002566:	4b52      	ldr	r3, [pc, #328]	; (80026b0 <leds_test+0x174>)
 8002568:	2104      	movs	r1, #4
 800256a:	0018      	movs	r0, r3
 800256c:	f7ff f9ea 	bl	8001944 <LL_GPIO_ResetOutputPin>
		water_on;
 8002570:	2380      	movs	r3, #128	; 0x80
 8002572:	00db      	lsls	r3, r3, #3
 8002574:	4a4e      	ldr	r2, [pc, #312]	; (80026b0 <leds_test+0x174>)
 8002576:	0019      	movs	r1, r3
 8002578:	0010      	movs	r0, r2
 800257a:	f7ff f9d7 	bl	800192c <LL_GPIO_SetOutputPin>
		ms_delay(250);
 800257e:	20fa      	movs	r0, #250	; 0xfa
 8002580:	f001 f9d6 	bl	8003930 <LL_mDelay>
		feul_on;
 8002584:	2380      	movs	r3, #128	; 0x80
 8002586:	019b      	lsls	r3, r3, #6
 8002588:	4a49      	ldr	r2, [pc, #292]	; (80026b0 <leds_test+0x174>)
 800258a:	0019      	movs	r1, r3
 800258c:	0010      	movs	r0, r2
 800258e:	f7ff f9cd 	bl	800192c <LL_GPIO_SetOutputPin>
		water_off;
 8002592:	2380      	movs	r3, #128	; 0x80
 8002594:	00db      	lsls	r3, r3, #3
 8002596:	4a46      	ldr	r2, [pc, #280]	; (80026b0 <leds_test+0x174>)
 8002598:	0019      	movs	r1, r3
 800259a:	0010      	movs	r0, r2
 800259c:	f7ff f9d2 	bl	8001944 <LL_GPIO_ResetOutputPin>
		ms_delay(250);
 80025a0:	20fa      	movs	r0, #250	; 0xfa
 80025a2:	f001 f9c5 	bl	8003930 <LL_mDelay>
		feul_off;
 80025a6:	2380      	movs	r3, #128	; 0x80
 80025a8:	019b      	lsls	r3, r3, #6
 80025aa:	4a41      	ldr	r2, [pc, #260]	; (80026b0 <leds_test+0x174>)
 80025ac:	0019      	movs	r1, r3
 80025ae:	0010      	movs	r0, r2
 80025b0:	f7ff f9c8 	bl	8001944 <LL_GPIO_ResetOutputPin>
		emr_on;
 80025b4:	2380      	movs	r3, #128	; 0x80
 80025b6:	015b      	lsls	r3, r3, #5
 80025b8:	4a3d      	ldr	r2, [pc, #244]	; (80026b0 <leds_test+0x174>)
 80025ba:	0019      	movs	r1, r3
 80025bc:	0010      	movs	r0, r2
 80025be:	f7ff f9b5 	bl	800192c <LL_GPIO_SetOutputPin>
		ms_delay(250);
 80025c2:	20fa      	movs	r0, #250	; 0xfa
 80025c4:	f001 f9b4 	bl	8003930 <LL_mDelay>
		bat_on;
 80025c8:	2380      	movs	r3, #128	; 0x80
 80025ca:	011b      	lsls	r3, r3, #4
 80025cc:	4a38      	ldr	r2, [pc, #224]	; (80026b0 <leds_test+0x174>)
 80025ce:	0019      	movs	r1, r3
 80025d0:	0010      	movs	r0, r2
 80025d2:	f7ff f9ab 	bl	800192c <LL_GPIO_SetOutputPin>
		emr_off;
 80025d6:	2380      	movs	r3, #128	; 0x80
 80025d8:	015b      	lsls	r3, r3, #5
 80025da:	4a35      	ldr	r2, [pc, #212]	; (80026b0 <leds_test+0x174>)
 80025dc:	0019      	movs	r1, r3
 80025de:	0010      	movs	r0, r2
 80025e0:	f7ff f9b0 	bl	8001944 <LL_GPIO_ResetOutputPin>
		ms_delay(250);
 80025e4:	20fa      	movs	r0, #250	; 0xfa
 80025e6:	f001 f9a3 	bl	8003930 <LL_mDelay>
		bat_off;
 80025ea:	2380      	movs	r3, #128	; 0x80
 80025ec:	011b      	lsls	r3, r3, #4
 80025ee:	4a30      	ldr	r2, [pc, #192]	; (80026b0 <leds_test+0x174>)
 80025f0:	0019      	movs	r1, r3
 80025f2:	0010      	movs	r0, r2
 80025f4:	f7ff f9a6 	bl	8001944 <LL_GPIO_ResetOutputPin>
		ol_on;
 80025f8:	2380      	movs	r3, #128	; 0x80
 80025fa:	021b      	lsls	r3, r3, #8
 80025fc:	4a2d      	ldr	r2, [pc, #180]	; (80026b4 <leds_test+0x178>)
 80025fe:	0019      	movs	r1, r3
 8002600:	0010      	movs	r0, r2
 8002602:	f7ff f993 	bl	800192c <LL_GPIO_SetOutputPin>
		ms_delay(250);
 8002606:	20fa      	movs	r0, #250	; 0xfa
 8002608:	f001 f992 	bl	8003930 <LL_mDelay>
		ol_off;
 800260c:	2380      	movs	r3, #128	; 0x80
 800260e:	021b      	lsls	r3, r3, #8
 8002610:	4a28      	ldr	r2, [pc, #160]	; (80026b4 <leds_test+0x178>)
 8002612:	0019      	movs	r1, r3
 8002614:	0010      	movs	r0, r2
 8002616:	f7ff f995 	bl	8001944 <LL_GPIO_ResetOutputPin>
		pwr_on;
 800261a:	2380      	movs	r3, #128	; 0x80
 800261c:	01db      	lsls	r3, r3, #7
 800261e:	4a25      	ldr	r2, [pc, #148]	; (80026b4 <leds_test+0x178>)
 8002620:	0019      	movs	r1, r3
 8002622:	0010      	movs	r0, r2
 8002624:	f7ff f982 	bl	800192c <LL_GPIO_SetOutputPin>
		ms_delay(250);
 8002628:	20fa      	movs	r0, #250	; 0xfa
 800262a:	f001 f981 	bl	8003930 <LL_mDelay>
		pwr_off;
 800262e:	2380      	movs	r3, #128	; 0x80
 8002630:	01db      	lsls	r3, r3, #7
 8002632:	4a20      	ldr	r2, [pc, #128]	; (80026b4 <leds_test+0x178>)
 8002634:	0019      	movs	r1, r3
 8002636:	0010      	movs	r0, r2
 8002638:	f7ff f984 	bl	8001944 <LL_GPIO_ResetOutputPin>
		er_on;
 800263c:	2380      	movs	r3, #128	; 0x80
 800263e:	019b      	lsls	r3, r3, #6
 8002640:	4a1c      	ldr	r2, [pc, #112]	; (80026b4 <leds_test+0x178>)
 8002642:	0019      	movs	r1, r3
 8002644:	0010      	movs	r0, r2
 8002646:	f7ff f971 	bl	800192c <LL_GPIO_SetOutputPin>
		ms_delay(250);
 800264a:	20fa      	movs	r0, #250	; 0xfa
 800264c:	f001 f970 	bl	8003930 <LL_mDelay>
		fr_on;
 8002650:	4b17      	ldr	r3, [pc, #92]	; (80026b0 <leds_test+0x174>)
 8002652:	2180      	movs	r1, #128	; 0x80
 8002654:	0018      	movs	r0, r3
 8002656:	f7ff f969 	bl	800192c <LL_GPIO_SetOutputPin>
		er_off;
 800265a:	2380      	movs	r3, #128	; 0x80
 800265c:	019b      	lsls	r3, r3, #6
 800265e:	4a15      	ldr	r2, [pc, #84]	; (80026b4 <leds_test+0x178>)
 8002660:	0019      	movs	r1, r3
 8002662:	0010      	movs	r0, r2
 8002664:	f7ff f96e 	bl	8001944 <LL_GPIO_ResetOutputPin>
		ms_delay(250);
 8002668:	20fa      	movs	r0, #250	; 0xfa
 800266a:	f001 f961 	bl	8003930 <LL_mDelay>
		vac_on;
 800266e:	2380      	movs	r3, #128	; 0x80
 8002670:	005b      	lsls	r3, r3, #1
 8002672:	4a0f      	ldr	r2, [pc, #60]	; (80026b0 <leds_test+0x174>)
 8002674:	0019      	movs	r1, r3
 8002676:	0010      	movs	r0, r2
 8002678:	f7ff f958 	bl	800192c <LL_GPIO_SetOutputPin>
		fr_off;
 800267c:	4b0c      	ldr	r3, [pc, #48]	; (80026b0 <leds_test+0x174>)
 800267e:	2180      	movs	r1, #128	; 0x80
 8002680:	0018      	movs	r0, r3
 8002682:	f7ff f95f 	bl	8001944 <LL_GPIO_ResetOutputPin>
		ms_delay(250);
 8002686:	20fa      	movs	r0, #250	; 0xfa
 8002688:	f001 f952 	bl	8003930 <LL_mDelay>
	for (int i = 0; i < 5; i++) {
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	3301      	adds	r3, #1
 8002690:	607b      	str	r3, [r7, #4]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2b04      	cmp	r3, #4
 8002696:	dc00      	bgt.n	800269a <leds_test+0x15e>
 8002698:	e756      	b.n	8002548 <leds_test+0xc>
	}
	vac_off;
 800269a:	2380      	movs	r3, #128	; 0x80
 800269c:	005b      	lsls	r3, r3, #1
 800269e:	4a04      	ldr	r2, [pc, #16]	; (80026b0 <leds_test+0x174>)
 80026a0:	0019      	movs	r1, r3
 80026a2:	0010      	movs	r0, r2
 80026a4:	f7ff f94e 	bl	8001944 <LL_GPIO_ResetOutputPin>
}
 80026a8:	46c0      	nop			; (mov r8, r8)
 80026aa:	46bd      	mov	sp, r7
 80026ac:	b002      	add	sp, #8
 80026ae:	bd80      	pop	{r7, pc}
 80026b0:	48000400 	.word	0x48000400
 80026b4:	48000800 	.word	0x48000800

080026b8 <LL_DMA_IsActiveFlag_TC1>:
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b082      	sub	sp, #8
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF1) == (DMA_ISR_TCIF1));
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	2202      	movs	r2, #2
 80026c6:	4013      	ands	r3, r2
 80026c8:	3b02      	subs	r3, #2
 80026ca:	425a      	negs	r2, r3
 80026cc:	4153      	adcs	r3, r2
 80026ce:	b2db      	uxtb	r3, r3
}
 80026d0:	0018      	movs	r0, r3
 80026d2:	46bd      	mov	sp, r7
 80026d4:	b002      	add	sp, #8
 80026d6:	bd80      	pop	{r7, pc}

080026d8 <LL_DMA_ClearFlag_TC1>:
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b082      	sub	sp, #8
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF1);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2202      	movs	r2, #2
 80026e4:	605a      	str	r2, [r3, #4]
}
 80026e6:	46c0      	nop			; (mov r8, r8)
 80026e8:	46bd      	mov	sp, r7
 80026ea:	b002      	add	sp, #8
 80026ec:	bd80      	pop	{r7, pc}

080026ee <LL_TIM_ClearFlag_UPDATE>:
{
 80026ee:	b580      	push	{r7, lr}
 80026f0:	b082      	sub	sp, #8
 80026f2:	af00      	add	r7, sp, #0
 80026f4:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2202      	movs	r2, #2
 80026fa:	4252      	negs	r2, r2
 80026fc:	611a      	str	r2, [r3, #16]
}
 80026fe:	46c0      	nop			; (mov r8, r8)
 8002700:	46bd      	mov	sp, r7
 8002702:	b002      	add	sp, #8
 8002704:	bd80      	pop	{r7, pc}

08002706 <LL_TIM_IsActiveFlag_UPDATE>:
{
 8002706:	b580      	push	{r7, lr}
 8002708:	b082      	sub	sp, #8
 800270a:	af00      	add	r7, sp, #0
 800270c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	691b      	ldr	r3, [r3, #16]
 8002712:	2201      	movs	r2, #1
 8002714:	4013      	ands	r3, r2
 8002716:	2b01      	cmp	r3, #1
 8002718:	d101      	bne.n	800271e <LL_TIM_IsActiveFlag_UPDATE+0x18>
 800271a:	2301      	movs	r3, #1
 800271c:	e000      	b.n	8002720 <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 800271e:	2300      	movs	r3, #0
}
 8002720:	0018      	movs	r0, r3
 8002722:	46bd      	mov	sp, r7
 8002724:	b002      	add	sp, #8
 8002726:	bd80      	pop	{r7, pc}

08002728 <NMI_Handler>:
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN NonMaskableInt_IRQn 0 */

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 800272c:	e7fe      	b.n	800272c <NMI_Handler+0x4>

0800272e <HardFault_Handler>:

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void)
{
 800272e:	b580      	push	{r7, lr}
 8002730:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN HardFault_IRQn 0 */

	/* USER CODE END HardFault_IRQn 0 */
	while (1)
 8002732:	e7fe      	b.n	8002732 <HardFault_Handler+0x4>

08002734 <SVC_Handler>:

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	af00      	add	r7, sp, #0

	/* USER CODE END SVC_IRQn 0 */
	/* USER CODE BEGIN SVC_IRQn 1 */

	/* USER CODE END SVC_IRQn 1 */
}
 8002738:	46c0      	nop			; (mov r8, r8)
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}

0800273e <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void)
{
 800273e:	b580      	push	{r7, lr}
 8002740:	af00      	add	r7, sp, #0

	/* USER CODE END PendSV_IRQn 0 */
	/* USER CODE BEGIN PendSV_IRQn 1 */

	/* USER CODE END PendSV_IRQn 1 */
}
 8002742:	46c0      	nop			; (mov r8, r8)
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}

08002748 <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	af00      	add	r7, sp, #0
	/* USER CODE END SysTick_IRQn 0 */

	/* USER CODE BEGIN SysTick_IRQn 1 */

	/* USER CODE END SysTick_IRQn 1 */
}
 800274c:	46c0      	nop			; (mov r8, r8)
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}
	...

08002754 <DMA1_Channel1_IRQHandler>:

/**
 * @brief This function handles DMA1 channel 1 interrupt.
 */
void DMA1_Channel1_IRQHandler(void)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

	if(LL_DMA_IsActiveFlag_TC1(DMA1) == 1)
 8002758:	4b11      	ldr	r3, [pc, #68]	; (80027a0 <DMA1_Channel1_IRQHandler+0x4c>)
 800275a:	0018      	movs	r0, r3
 800275c:	f7ff ffac 	bl	80026b8 <LL_DMA_IsActiveFlag_TC1>
 8002760:	0003      	movs	r3, r0
 8002762:	2b01      	cmp	r3, #1
 8002764:	d119      	bne.n	800279a <DMA1_Channel1_IRQHandler+0x46>
	{
		if(!adc)
 8002766:	4b0f      	ldr	r3, [pc, #60]	; (80027a4 <DMA1_Channel1_IRQHandler+0x50>)
 8002768:	781b      	ldrb	r3, [r3, #0]
 800276a:	2201      	movs	r2, #1
 800276c:	4053      	eors	r3, r2
 800276e:	b2db      	uxtb	r3, r3
 8002770:	2b00      	cmp	r3, #0
 8002772:	d00e      	beq.n	8002792 <DMA1_Channel1_IRQHandler+0x3e>
		{
			adc=1;
 8002774:	4b0b      	ldr	r3, [pc, #44]	; (80027a4 <DMA1_Channel1_IRQHandler+0x50>)
 8002776:	2201      	movs	r2, #1
 8002778:	701a      	strb	r2, [r3, #0]
			vac_sample_int=adc_val[2];
 800277a:	4b0b      	ldr	r3, [pc, #44]	; (80027a8 <DMA1_Channel1_IRQHandler+0x54>)
 800277c:	889a      	ldrh	r2, [r3, #4]
 800277e:	4b0b      	ldr	r3, [pc, #44]	; (80027ac <DMA1_Channel1_IRQHandler+0x58>)
 8002780:	801a      	strh	r2, [r3, #0]
			vadc_int=adc_val[1];
 8002782:	4b09      	ldr	r3, [pc, #36]	; (80027a8 <DMA1_Channel1_IRQHandler+0x54>)
 8002784:	885a      	ldrh	r2, [r3, #2]
 8002786:	4b0a      	ldr	r3, [pc, #40]	; (80027b0 <DMA1_Channel1_IRQHandler+0x5c>)
 8002788:	801a      	strh	r2, [r3, #0]
			vbat_int=adc_val[0];
 800278a:	4b07      	ldr	r3, [pc, #28]	; (80027a8 <DMA1_Channel1_IRQHandler+0x54>)
 800278c:	881a      	ldrh	r2, [r3, #0]
 800278e:	4b09      	ldr	r3, [pc, #36]	; (80027b4 <DMA1_Channel1_IRQHandler+0x60>)
 8002790:	801a      	strh	r2, [r3, #0]
		}
		/* Clear flag DMA transfer complete */
		LL_DMA_ClearFlag_TC1(DMA1);
 8002792:	4b03      	ldr	r3, [pc, #12]	; (80027a0 <DMA1_Channel1_IRQHandler+0x4c>)
 8002794:	0018      	movs	r0, r3
 8002796:	f7ff ff9f 	bl	80026d8 <LL_DMA_ClearFlag_TC1>
	/* USER CODE END DMA1_Channel1_IRQn 0 */

	/* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

	/* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800279a:	46c0      	nop			; (mov r8, r8)
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}
 80027a0:	40020000 	.word	0x40020000
 80027a4:	2000006f 	.word	0x2000006f
 80027a8:	20000020 	.word	0x20000020
 80027ac:	200003a8 	.word	0x200003a8
 80027b0:	200003aa 	.word	0x200003aa
 80027b4:	200003ac 	.word	0x200003ac

080027b8 <TIM3_IRQHandler>:

/**
 * @brief This function handles TIM3 global interrupt.
 */
void TIM3_IRQHandler(void)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM3_IRQn 0 */
	if(LL_TIM_IsActiveFlag_UPDATE(TIM3) == 1)
 80027bc:	4b17      	ldr	r3, [pc, #92]	; (800281c <TIM3_IRQHandler+0x64>)
 80027be:	0018      	movs	r0, r3
 80027c0:	f7ff ffa1 	bl	8002706 <LL_TIM_IsActiveFlag_UPDATE>
 80027c4:	0003      	movs	r3, r0
 80027c6:	2b01      	cmp	r3, #1
 80027c8:	d125      	bne.n	8002816 <TIM3_IRQHandler+0x5e>
	{
		/* Clear the update interrupt flag*/
		LL_TIM_ClearFlag_UPDATE(TIM3);
 80027ca:	4b14      	ldr	r3, [pc, #80]	; (800281c <TIM3_IRQHandler+0x64>)
 80027cc:	0018      	movs	r0, r3
 80027ce:	f7ff ff8e 	bl	80026ee <LL_TIM_ClearFlag_UPDATE>
		thick++;
 80027d2:	4b13      	ldr	r3, [pc, #76]	; (8002820 <TIM3_IRQHandler+0x68>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	1c5a      	adds	r2, r3, #1
 80027d8:	4b11      	ldr	r3, [pc, #68]	; (8002820 <TIM3_IRQHandler+0x68>)
 80027da:	601a      	str	r2, [r3, #0]
		if(thick%2000==0){
 80027dc:	4b10      	ldr	r3, [pc, #64]	; (8002820 <TIM3_IRQHandler+0x68>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	22fa      	movs	r2, #250	; 0xfa
 80027e2:	00d1      	lsls	r1, r2, #3
 80027e4:	0018      	movs	r0, r3
 80027e6:	f7fd fd15 	bl	8000214 <__aeabi_uidivmod>
 80027ea:	1e0b      	subs	r3, r1, #0
 80027ec:	d106      	bne.n	80027fc <TIM3_IRQHandler+0x44>
			freq=fr;
 80027ee:	4b0d      	ldr	r3, [pc, #52]	; (8002824 <TIM3_IRQHandler+0x6c>)
 80027f0:	681a      	ldr	r2, [r3, #0]
 80027f2:	4b0d      	ldr	r3, [pc, #52]	; (8002828 <TIM3_IRQHandler+0x70>)
 80027f4:	601a      	str	r2, [r3, #0]
			fr=0;
 80027f6:	4b0b      	ldr	r3, [pc, #44]	; (8002824 <TIM3_IRQHandler+0x6c>)
 80027f8:	2200      	movs	r2, #0
 80027fa:	601a      	str	r2, [r3, #0]
		}
		if(working){
 80027fc:	4b0b      	ldr	r3, [pc, #44]	; (800282c <TIM3_IRQHandler+0x74>)
 80027fe:	781b      	ldrb	r3, [r3, #0]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d005      	beq.n	8002810 <TIM3_IRQHandler+0x58>
			working_time++;
 8002804:	4b0a      	ldr	r3, [pc, #40]	; (8002830 <TIM3_IRQHandler+0x78>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	1c5a      	adds	r2, r3, #1
 800280a:	4b09      	ldr	r3, [pc, #36]	; (8002830 <TIM3_IRQHandler+0x78>)
 800280c:	601a      	str	r2, [r3, #0]
	}
	/* USER CODE END TIM3_IRQn 0 */
	/* USER CODE BEGIN TIM3_IRQn 1 */

	/* USER CODE END TIM3_IRQn 1 */
}
 800280e:	e002      	b.n	8002816 <TIM3_IRQHandler+0x5e>
			working_time=0;
 8002810:	4b07      	ldr	r3, [pc, #28]	; (8002830 <TIM3_IRQHandler+0x78>)
 8002812:	2200      	movs	r2, #0
 8002814:	601a      	str	r2, [r3, #0]
}
 8002816:	46c0      	nop			; (mov r8, r8)
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}
 800281c:	40000400 	.word	0x40000400
 8002820:	20000074 	.word	0x20000074
 8002824:	20000054 	.word	0x20000054
 8002828:	2000005c 	.word	0x2000005c
 800282c:	20000070 	.word	0x20000070
 8002830:	20000078 	.word	0x20000078

08002834 <USART1_IRQHandler>:

/**
 * @brief This function handles USART1 global interrupt.
 */
void USART1_IRQHandler(void)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	af00      	add	r7, sp, #0

	/* USER CODE END USART1_IRQn 0 */
	/* USER CODE BEGIN USART1_IRQn 1 */

	/* USER CODE END USART1_IRQn 1 */
}
 8002838:	46c0      	nop			; (mov r8, r8)
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}

0800283e <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800283e:	b580      	push	{r7, lr}
 8002840:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8002842:	46c0      	nop			; (mov r8, r8)
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}

08002848 <__NVIC_EnableIRQ>:
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b082      	sub	sp, #8
 800284c:	af00      	add	r7, sp, #0
 800284e:	0002      	movs	r2, r0
 8002850:	1dfb      	adds	r3, r7, #7
 8002852:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002854:	1dfb      	adds	r3, r7, #7
 8002856:	781b      	ldrb	r3, [r3, #0]
 8002858:	2b7f      	cmp	r3, #127	; 0x7f
 800285a:	d809      	bhi.n	8002870 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800285c:	1dfb      	adds	r3, r7, #7
 800285e:	781b      	ldrb	r3, [r3, #0]
 8002860:	001a      	movs	r2, r3
 8002862:	231f      	movs	r3, #31
 8002864:	401a      	ands	r2, r3
 8002866:	4b04      	ldr	r3, [pc, #16]	; (8002878 <__NVIC_EnableIRQ+0x30>)
 8002868:	2101      	movs	r1, #1
 800286a:	4091      	lsls	r1, r2
 800286c:	000a      	movs	r2, r1
 800286e:	601a      	str	r2, [r3, #0]
}
 8002870:	46c0      	nop			; (mov r8, r8)
 8002872:	46bd      	mov	sp, r7
 8002874:	b002      	add	sp, #8
 8002876:	bd80      	pop	{r7, pc}
 8002878:	e000e100 	.word	0xe000e100

0800287c <__NVIC_SetPriority>:
{
 800287c:	b590      	push	{r4, r7, lr}
 800287e:	b083      	sub	sp, #12
 8002880:	af00      	add	r7, sp, #0
 8002882:	0002      	movs	r2, r0
 8002884:	6039      	str	r1, [r7, #0]
 8002886:	1dfb      	adds	r3, r7, #7
 8002888:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800288a:	1dfb      	adds	r3, r7, #7
 800288c:	781b      	ldrb	r3, [r3, #0]
 800288e:	2b7f      	cmp	r3, #127	; 0x7f
 8002890:	d828      	bhi.n	80028e4 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002892:	4a2f      	ldr	r2, [pc, #188]	; (8002950 <__NVIC_SetPriority+0xd4>)
 8002894:	1dfb      	adds	r3, r7, #7
 8002896:	781b      	ldrb	r3, [r3, #0]
 8002898:	b25b      	sxtb	r3, r3
 800289a:	089b      	lsrs	r3, r3, #2
 800289c:	33c0      	adds	r3, #192	; 0xc0
 800289e:	009b      	lsls	r3, r3, #2
 80028a0:	589b      	ldr	r3, [r3, r2]
 80028a2:	1dfa      	adds	r2, r7, #7
 80028a4:	7812      	ldrb	r2, [r2, #0]
 80028a6:	0011      	movs	r1, r2
 80028a8:	2203      	movs	r2, #3
 80028aa:	400a      	ands	r2, r1
 80028ac:	00d2      	lsls	r2, r2, #3
 80028ae:	21ff      	movs	r1, #255	; 0xff
 80028b0:	4091      	lsls	r1, r2
 80028b2:	000a      	movs	r2, r1
 80028b4:	43d2      	mvns	r2, r2
 80028b6:	401a      	ands	r2, r3
 80028b8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	019b      	lsls	r3, r3, #6
 80028be:	22ff      	movs	r2, #255	; 0xff
 80028c0:	401a      	ands	r2, r3
 80028c2:	1dfb      	adds	r3, r7, #7
 80028c4:	781b      	ldrb	r3, [r3, #0]
 80028c6:	0018      	movs	r0, r3
 80028c8:	2303      	movs	r3, #3
 80028ca:	4003      	ands	r3, r0
 80028cc:	00db      	lsls	r3, r3, #3
 80028ce:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80028d0:	481f      	ldr	r0, [pc, #124]	; (8002950 <__NVIC_SetPriority+0xd4>)
 80028d2:	1dfb      	adds	r3, r7, #7
 80028d4:	781b      	ldrb	r3, [r3, #0]
 80028d6:	b25b      	sxtb	r3, r3
 80028d8:	089b      	lsrs	r3, r3, #2
 80028da:	430a      	orrs	r2, r1
 80028dc:	33c0      	adds	r3, #192	; 0xc0
 80028de:	009b      	lsls	r3, r3, #2
 80028e0:	501a      	str	r2, [r3, r0]
}
 80028e2:	e031      	b.n	8002948 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80028e4:	4a1b      	ldr	r2, [pc, #108]	; (8002954 <__NVIC_SetPriority+0xd8>)
 80028e6:	1dfb      	adds	r3, r7, #7
 80028e8:	781b      	ldrb	r3, [r3, #0]
 80028ea:	0019      	movs	r1, r3
 80028ec:	230f      	movs	r3, #15
 80028ee:	400b      	ands	r3, r1
 80028f0:	3b08      	subs	r3, #8
 80028f2:	089b      	lsrs	r3, r3, #2
 80028f4:	3306      	adds	r3, #6
 80028f6:	009b      	lsls	r3, r3, #2
 80028f8:	18d3      	adds	r3, r2, r3
 80028fa:	3304      	adds	r3, #4
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	1dfa      	adds	r2, r7, #7
 8002900:	7812      	ldrb	r2, [r2, #0]
 8002902:	0011      	movs	r1, r2
 8002904:	2203      	movs	r2, #3
 8002906:	400a      	ands	r2, r1
 8002908:	00d2      	lsls	r2, r2, #3
 800290a:	21ff      	movs	r1, #255	; 0xff
 800290c:	4091      	lsls	r1, r2
 800290e:	000a      	movs	r2, r1
 8002910:	43d2      	mvns	r2, r2
 8002912:	401a      	ands	r2, r3
 8002914:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	019b      	lsls	r3, r3, #6
 800291a:	22ff      	movs	r2, #255	; 0xff
 800291c:	401a      	ands	r2, r3
 800291e:	1dfb      	adds	r3, r7, #7
 8002920:	781b      	ldrb	r3, [r3, #0]
 8002922:	0018      	movs	r0, r3
 8002924:	2303      	movs	r3, #3
 8002926:	4003      	ands	r3, r0
 8002928:	00db      	lsls	r3, r3, #3
 800292a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800292c:	4809      	ldr	r0, [pc, #36]	; (8002954 <__NVIC_SetPriority+0xd8>)
 800292e:	1dfb      	adds	r3, r7, #7
 8002930:	781b      	ldrb	r3, [r3, #0]
 8002932:	001c      	movs	r4, r3
 8002934:	230f      	movs	r3, #15
 8002936:	4023      	ands	r3, r4
 8002938:	3b08      	subs	r3, #8
 800293a:	089b      	lsrs	r3, r3, #2
 800293c:	430a      	orrs	r2, r1
 800293e:	3306      	adds	r3, #6
 8002940:	009b      	lsls	r3, r3, #2
 8002942:	18c3      	adds	r3, r0, r3
 8002944:	3304      	adds	r3, #4
 8002946:	601a      	str	r2, [r3, #0]
}
 8002948:	46c0      	nop			; (mov r8, r8)
 800294a:	46bd      	mov	sp, r7
 800294c:	b003      	add	sp, #12
 800294e:	bd90      	pop	{r4, r7, pc}
 8002950:	e000e100 	.word	0xe000e100
 8002954:	e000ed00 	.word	0xe000ed00

08002958 <LL_APB1_GRP1_EnableClock>:
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b084      	sub	sp, #16
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8002960:	4b07      	ldr	r3, [pc, #28]	; (8002980 <LL_APB1_GRP1_EnableClock+0x28>)
 8002962:	69d9      	ldr	r1, [r3, #28]
 8002964:	4b06      	ldr	r3, [pc, #24]	; (8002980 <LL_APB1_GRP1_EnableClock+0x28>)
 8002966:	687a      	ldr	r2, [r7, #4]
 8002968:	430a      	orrs	r2, r1
 800296a:	61da      	str	r2, [r3, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800296c:	4b04      	ldr	r3, [pc, #16]	; (8002980 <LL_APB1_GRP1_EnableClock+0x28>)
 800296e:	69db      	ldr	r3, [r3, #28]
 8002970:	687a      	ldr	r2, [r7, #4]
 8002972:	4013      	ands	r3, r2
 8002974:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002976:	68fb      	ldr	r3, [r7, #12]
}
 8002978:	46c0      	nop			; (mov r8, r8)
 800297a:	46bd      	mov	sp, r7
 800297c:	b004      	add	sp, #16
 800297e:	bd80      	pop	{r7, pc}
 8002980:	40021000 	.word	0x40021000

08002984 <LL_TIM_DisableARRPreload>:
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b082      	sub	sp, #8
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	2280      	movs	r2, #128	; 0x80
 8002992:	4393      	bics	r3, r2
 8002994:	001a      	movs	r2, r3
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	601a      	str	r2, [r3, #0]
}
 800299a:	46c0      	nop			; (mov r8, r8)
 800299c:	46bd      	mov	sp, r7
 800299e:	b002      	add	sp, #8
 80029a0:	bd80      	pop	{r7, pc}
	...

080029a4 <LL_TIM_SetClockSource>:
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b082      	sub	sp, #8
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
 80029ac:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	689b      	ldr	r3, [r3, #8]
 80029b2:	4a05      	ldr	r2, [pc, #20]	; (80029c8 <LL_TIM_SetClockSource+0x24>)
 80029b4:	401a      	ands	r2, r3
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	431a      	orrs	r2, r3
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	609a      	str	r2, [r3, #8]
}
 80029be:	46c0      	nop			; (mov r8, r8)
 80029c0:	46bd      	mov	sp, r7
 80029c2:	b002      	add	sp, #8
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	46c0      	nop			; (mov r8, r8)
 80029c8:	ffffbff8 	.word	0xffffbff8

080029cc <LL_TIM_SetTriggerOutput>:
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b082      	sub	sp, #8
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
 80029d4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	2270      	movs	r2, #112	; 0x70
 80029dc:	4393      	bics	r3, r2
 80029de:	001a      	movs	r2, r3
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	431a      	orrs	r2, r3
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	605a      	str	r2, [r3, #4]
}
 80029e8:	46c0      	nop			; (mov r8, r8)
 80029ea:	46bd      	mov	sp, r7
 80029ec:	b002      	add	sp, #8
 80029ee:	bd80      	pop	{r7, pc}

080029f0 <LL_TIM_DisableMasterSlaveMode>:
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b082      	sub	sp, #8
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	689b      	ldr	r3, [r3, #8]
 80029fc:	2280      	movs	r2, #128	; 0x80
 80029fe:	4393      	bics	r3, r2
 8002a00:	001a      	movs	r2, r3
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	609a      	str	r2, [r3, #8]
}
 8002a06:	46c0      	nop			; (mov r8, r8)
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	b002      	add	sp, #8
 8002a0c:	bd80      	pop	{r7, pc}
	...

08002a10 <MX_TIM3_Init>:

/* USER CODE END 0 */

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b086      	sub	sp, #24
 8002a14:	af00      	add	r7, sp, #0
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8002a16:	1d3b      	adds	r3, r7, #4
 8002a18:	0018      	movs	r0, r3
 8002a1a:	2314      	movs	r3, #20
 8002a1c:	001a      	movs	r2, r3
 8002a1e:	2100      	movs	r1, #0
 8002a20:	f000 ffda 	bl	80039d8 <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 8002a24:	2002      	movs	r0, #2
 8002a26:	f7ff ff97 	bl	8002958 <LL_APB1_GRP1_EnableClock>

  /* TIM3 interrupt Init */
  NVIC_SetPriority(TIM3_IRQn, 0);
 8002a2a:	2100      	movs	r1, #0
 8002a2c:	2010      	movs	r0, #16
 8002a2e:	f7ff ff25 	bl	800287c <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM3_IRQn);
 8002a32:	2010      	movs	r0, #16
 8002a34:	f7ff ff08 	bl	8002848 <__NVIC_EnableIRQ>

  TIM_InitStruct.Prescaler = 799;
 8002a38:	1d3b      	adds	r3, r7, #4
 8002a3a:	4a13      	ldr	r2, [pc, #76]	; (8002a88 <MX_TIM3_Init+0x78>)
 8002a3c:	801a      	strh	r2, [r3, #0]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8002a3e:	1d3b      	adds	r3, r7, #4
 8002a40:	2200      	movs	r2, #0
 8002a42:	605a      	str	r2, [r3, #4]
  TIM_InitStruct.Autoreload = 9;
 8002a44:	1d3b      	adds	r3, r7, #4
 8002a46:	2209      	movs	r2, #9
 8002a48:	609a      	str	r2, [r3, #8]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8002a4a:	1d3b      	adds	r3, r7, #4
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	60da      	str	r2, [r3, #12]
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 8002a50:	1d3b      	adds	r3, r7, #4
 8002a52:	4a0e      	ldr	r2, [pc, #56]	; (8002a8c <MX_TIM3_Init+0x7c>)
 8002a54:	0019      	movs	r1, r3
 8002a56:	0010      	movs	r0, r2
 8002a58:	f000 fdea 	bl	8003630 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM3);
 8002a5c:	4b0b      	ldr	r3, [pc, #44]	; (8002a8c <MX_TIM3_Init+0x7c>)
 8002a5e:	0018      	movs	r0, r3
 8002a60:	f7ff ff90 	bl	8002984 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM3, LL_TIM_CLOCKSOURCE_INTERNAL);
 8002a64:	4b09      	ldr	r3, [pc, #36]	; (8002a8c <MX_TIM3_Init+0x7c>)
 8002a66:	2100      	movs	r1, #0
 8002a68:	0018      	movs	r0, r3
 8002a6a:	f7ff ff9b 	bl	80029a4 <LL_TIM_SetClockSource>
  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 8002a6e:	4b07      	ldr	r3, [pc, #28]	; (8002a8c <MX_TIM3_Init+0x7c>)
 8002a70:	2100      	movs	r1, #0
 8002a72:	0018      	movs	r0, r3
 8002a74:	f7ff ffaa 	bl	80029cc <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 8002a78:	4b04      	ldr	r3, [pc, #16]	; (8002a8c <MX_TIM3_Init+0x7c>)
 8002a7a:	0018      	movs	r0, r3
 8002a7c:	f7ff ffb8 	bl	80029f0 <LL_TIM_DisableMasterSlaveMode>

}
 8002a80:	46c0      	nop			; (mov r8, r8)
 8002a82:	46bd      	mov	sp, r7
 8002a84:	b006      	add	sp, #24
 8002a86:	bd80      	pop	{r7, pc}
 8002a88:	0000031f 	.word	0x0000031f
 8002a8c:	40000400 	.word	0x40000400

08002a90 <__NVIC_EnableIRQ>:
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b082      	sub	sp, #8
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	0002      	movs	r2, r0
 8002a98:	1dfb      	adds	r3, r7, #7
 8002a9a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002a9c:	1dfb      	adds	r3, r7, #7
 8002a9e:	781b      	ldrb	r3, [r3, #0]
 8002aa0:	2b7f      	cmp	r3, #127	; 0x7f
 8002aa2:	d809      	bhi.n	8002ab8 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002aa4:	1dfb      	adds	r3, r7, #7
 8002aa6:	781b      	ldrb	r3, [r3, #0]
 8002aa8:	001a      	movs	r2, r3
 8002aaa:	231f      	movs	r3, #31
 8002aac:	401a      	ands	r2, r3
 8002aae:	4b04      	ldr	r3, [pc, #16]	; (8002ac0 <__NVIC_EnableIRQ+0x30>)
 8002ab0:	2101      	movs	r1, #1
 8002ab2:	4091      	lsls	r1, r2
 8002ab4:	000a      	movs	r2, r1
 8002ab6:	601a      	str	r2, [r3, #0]
}
 8002ab8:	46c0      	nop			; (mov r8, r8)
 8002aba:	46bd      	mov	sp, r7
 8002abc:	b002      	add	sp, #8
 8002abe:	bd80      	pop	{r7, pc}
 8002ac0:	e000e100 	.word	0xe000e100

08002ac4 <__NVIC_SetPriority>:
{
 8002ac4:	b590      	push	{r4, r7, lr}
 8002ac6:	b083      	sub	sp, #12
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	0002      	movs	r2, r0
 8002acc:	6039      	str	r1, [r7, #0]
 8002ace:	1dfb      	adds	r3, r7, #7
 8002ad0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002ad2:	1dfb      	adds	r3, r7, #7
 8002ad4:	781b      	ldrb	r3, [r3, #0]
 8002ad6:	2b7f      	cmp	r3, #127	; 0x7f
 8002ad8:	d828      	bhi.n	8002b2c <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002ada:	4a2f      	ldr	r2, [pc, #188]	; (8002b98 <__NVIC_SetPriority+0xd4>)
 8002adc:	1dfb      	adds	r3, r7, #7
 8002ade:	781b      	ldrb	r3, [r3, #0]
 8002ae0:	b25b      	sxtb	r3, r3
 8002ae2:	089b      	lsrs	r3, r3, #2
 8002ae4:	33c0      	adds	r3, #192	; 0xc0
 8002ae6:	009b      	lsls	r3, r3, #2
 8002ae8:	589b      	ldr	r3, [r3, r2]
 8002aea:	1dfa      	adds	r2, r7, #7
 8002aec:	7812      	ldrb	r2, [r2, #0]
 8002aee:	0011      	movs	r1, r2
 8002af0:	2203      	movs	r2, #3
 8002af2:	400a      	ands	r2, r1
 8002af4:	00d2      	lsls	r2, r2, #3
 8002af6:	21ff      	movs	r1, #255	; 0xff
 8002af8:	4091      	lsls	r1, r2
 8002afa:	000a      	movs	r2, r1
 8002afc:	43d2      	mvns	r2, r2
 8002afe:	401a      	ands	r2, r3
 8002b00:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	019b      	lsls	r3, r3, #6
 8002b06:	22ff      	movs	r2, #255	; 0xff
 8002b08:	401a      	ands	r2, r3
 8002b0a:	1dfb      	adds	r3, r7, #7
 8002b0c:	781b      	ldrb	r3, [r3, #0]
 8002b0e:	0018      	movs	r0, r3
 8002b10:	2303      	movs	r3, #3
 8002b12:	4003      	ands	r3, r0
 8002b14:	00db      	lsls	r3, r3, #3
 8002b16:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002b18:	481f      	ldr	r0, [pc, #124]	; (8002b98 <__NVIC_SetPriority+0xd4>)
 8002b1a:	1dfb      	adds	r3, r7, #7
 8002b1c:	781b      	ldrb	r3, [r3, #0]
 8002b1e:	b25b      	sxtb	r3, r3
 8002b20:	089b      	lsrs	r3, r3, #2
 8002b22:	430a      	orrs	r2, r1
 8002b24:	33c0      	adds	r3, #192	; 0xc0
 8002b26:	009b      	lsls	r3, r3, #2
 8002b28:	501a      	str	r2, [r3, r0]
}
 8002b2a:	e031      	b.n	8002b90 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002b2c:	4a1b      	ldr	r2, [pc, #108]	; (8002b9c <__NVIC_SetPriority+0xd8>)
 8002b2e:	1dfb      	adds	r3, r7, #7
 8002b30:	781b      	ldrb	r3, [r3, #0]
 8002b32:	0019      	movs	r1, r3
 8002b34:	230f      	movs	r3, #15
 8002b36:	400b      	ands	r3, r1
 8002b38:	3b08      	subs	r3, #8
 8002b3a:	089b      	lsrs	r3, r3, #2
 8002b3c:	3306      	adds	r3, #6
 8002b3e:	009b      	lsls	r3, r3, #2
 8002b40:	18d3      	adds	r3, r2, r3
 8002b42:	3304      	adds	r3, #4
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	1dfa      	adds	r2, r7, #7
 8002b48:	7812      	ldrb	r2, [r2, #0]
 8002b4a:	0011      	movs	r1, r2
 8002b4c:	2203      	movs	r2, #3
 8002b4e:	400a      	ands	r2, r1
 8002b50:	00d2      	lsls	r2, r2, #3
 8002b52:	21ff      	movs	r1, #255	; 0xff
 8002b54:	4091      	lsls	r1, r2
 8002b56:	000a      	movs	r2, r1
 8002b58:	43d2      	mvns	r2, r2
 8002b5a:	401a      	ands	r2, r3
 8002b5c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	019b      	lsls	r3, r3, #6
 8002b62:	22ff      	movs	r2, #255	; 0xff
 8002b64:	401a      	ands	r2, r3
 8002b66:	1dfb      	adds	r3, r7, #7
 8002b68:	781b      	ldrb	r3, [r3, #0]
 8002b6a:	0018      	movs	r0, r3
 8002b6c:	2303      	movs	r3, #3
 8002b6e:	4003      	ands	r3, r0
 8002b70:	00db      	lsls	r3, r3, #3
 8002b72:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002b74:	4809      	ldr	r0, [pc, #36]	; (8002b9c <__NVIC_SetPriority+0xd8>)
 8002b76:	1dfb      	adds	r3, r7, #7
 8002b78:	781b      	ldrb	r3, [r3, #0]
 8002b7a:	001c      	movs	r4, r3
 8002b7c:	230f      	movs	r3, #15
 8002b7e:	4023      	ands	r3, r4
 8002b80:	3b08      	subs	r3, #8
 8002b82:	089b      	lsrs	r3, r3, #2
 8002b84:	430a      	orrs	r2, r1
 8002b86:	3306      	adds	r3, #6
 8002b88:	009b      	lsls	r3, r3, #2
 8002b8a:	18c3      	adds	r3, r0, r3
 8002b8c:	3304      	adds	r3, #4
 8002b8e:	601a      	str	r2, [r3, #0]
}
 8002b90:	46c0      	nop			; (mov r8, r8)
 8002b92:	46bd      	mov	sp, r7
 8002b94:	b003      	add	sp, #12
 8002b96:	bd90      	pop	{r4, r7, pc}
 8002b98:	e000e100 	.word	0xe000e100
 8002b9c:	e000ed00 	.word	0xe000ed00

08002ba0 <LL_AHB1_GRP1_EnableClock>:
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b084      	sub	sp, #16
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8002ba8:	4b07      	ldr	r3, [pc, #28]	; (8002bc8 <LL_AHB1_GRP1_EnableClock+0x28>)
 8002baa:	6959      	ldr	r1, [r3, #20]
 8002bac:	4b06      	ldr	r3, [pc, #24]	; (8002bc8 <LL_AHB1_GRP1_EnableClock+0x28>)
 8002bae:	687a      	ldr	r2, [r7, #4]
 8002bb0:	430a      	orrs	r2, r1
 8002bb2:	615a      	str	r2, [r3, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8002bb4:	4b04      	ldr	r3, [pc, #16]	; (8002bc8 <LL_AHB1_GRP1_EnableClock+0x28>)
 8002bb6:	695b      	ldr	r3, [r3, #20]
 8002bb8:	687a      	ldr	r2, [r7, #4]
 8002bba:	4013      	ands	r3, r2
 8002bbc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
}
 8002bc0:	46c0      	nop			; (mov r8, r8)
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	b004      	add	sp, #16
 8002bc6:	bd80      	pop	{r7, pc}
 8002bc8:	40021000 	.word	0x40021000

08002bcc <LL_APB1_GRP2_EnableClock>:
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b084      	sub	sp, #16
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8002bd4:	4b07      	ldr	r3, [pc, #28]	; (8002bf4 <LL_APB1_GRP2_EnableClock+0x28>)
 8002bd6:	6999      	ldr	r1, [r3, #24]
 8002bd8:	4b06      	ldr	r3, [pc, #24]	; (8002bf4 <LL_APB1_GRP2_EnableClock+0x28>)
 8002bda:	687a      	ldr	r2, [r7, #4]
 8002bdc:	430a      	orrs	r2, r1
 8002bde:	619a      	str	r2, [r3, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002be0:	4b04      	ldr	r3, [pc, #16]	; (8002bf4 <LL_APB1_GRP2_EnableClock+0x28>)
 8002be2:	699b      	ldr	r3, [r3, #24]
 8002be4:	687a      	ldr	r2, [r7, #4]
 8002be6:	4013      	ands	r3, r2
 8002be8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002bea:	68fb      	ldr	r3, [r7, #12]
}
 8002bec:	46c0      	nop			; (mov r8, r8)
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	b004      	add	sp, #16
 8002bf2:	bd80      	pop	{r7, pc}
 8002bf4:	40021000 	.word	0x40021000

08002bf8 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b082      	sub	sp, #8
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	2201      	movs	r2, #1
 8002c06:	431a      	orrs	r2, r3
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	601a      	str	r2, [r3, #0]
}
 8002c0c:	46c0      	nop			; (mov r8, r8)
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	b002      	add	sp, #8
 8002c12:	bd80      	pop	{r7, pc}

08002c14 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b082      	sub	sp, #8
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  - SCEN (if Smartcard feature is supported), IREN (if Irda feature is supported) and HDSEL bits in the USART_CR3 register.
  */
#if defined(USART_LIN_SUPPORT)
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(USARTx->CR2, USART_CR2_CLKEN);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	4a07      	ldr	r2, [pc, #28]	; (8002c40 <LL_USART_ConfigAsyncMode+0x2c>)
 8002c22:	401a      	ands	r2, r3
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	605a      	str	r2, [r3, #4]
#endif /* USART_IRDA_SUPPORT */
#else
#if defined(USART_IRDA_SUPPORT)
  CLEAR_BIT(USARTx->CR3, (USART_CR3_IREN | USART_CR3_HDSEL));
#else
  CLEAR_BIT(USARTx->CR3, USART_CR3_HDSEL);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	2208      	movs	r2, #8
 8002c2e:	4393      	bics	r3, r2
 8002c30:	001a      	movs	r2, r3
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	609a      	str	r2, [r3, #8]
#endif /* USART_IRDA_SUPPORT */
#endif /* USART_SMARTCARD_SUPPORT */
}
 8002c36:	46c0      	nop			; (mov r8, r8)
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	b002      	add	sp, #8
 8002c3c:	bd80      	pop	{r7, pc}
 8002c3e:	46c0      	nop			; (mov r8, r8)
 8002c40:	fffff7ff 	.word	0xfffff7ff

08002c44 <LL_USART_DisableIT_CTS>:
  * @rmtoll CR3          CTSIE         LL_USART_DisableIT_CTS
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_CTS(USART_TypeDef *USARTx)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b082      	sub	sp, #8
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR3, USART_CR3_CTSIE);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	4a03      	ldr	r2, [pc, #12]	; (8002c60 <LL_USART_DisableIT_CTS+0x1c>)
 8002c52:	401a      	ands	r2, r3
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	609a      	str	r2, [r3, #8]
}
 8002c58:	46c0      	nop			; (mov r8, r8)
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	b002      	add	sp, #8
 8002c5e:	bd80      	pop	{r7, pc}
 8002c60:	fffffbff 	.word	0xfffffbff

08002c64 <MX_USART1_UART_Init>:
/* USER CODE END 0 */

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002c64:	b590      	push	{r4, r7, lr}
 8002c66:	b08f      	sub	sp, #60	; 0x3c
 8002c68:	af00      	add	r7, sp, #0
  LL_USART_InitTypeDef USART_InitStruct = {0};
 8002c6a:	241c      	movs	r4, #28
 8002c6c:	193b      	adds	r3, r7, r4
 8002c6e:	0018      	movs	r0, r3
 8002c70:	231c      	movs	r3, #28
 8002c72:	001a      	movs	r2, r3
 8002c74:	2100      	movs	r1, #0
 8002c76:	f000 feaf 	bl	80039d8 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c7a:	1d3b      	adds	r3, r7, #4
 8002c7c:	0018      	movs	r0, r3
 8002c7e:	2318      	movs	r3, #24
 8002c80:	001a      	movs	r2, r3
 8002c82:	2100      	movs	r1, #0
 8002c84:	f000 fea8 	bl	80039d8 <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_USART1);
 8002c88:	2380      	movs	r3, #128	; 0x80
 8002c8a:	01db      	lsls	r3, r3, #7
 8002c8c:	0018      	movs	r0, r3
 8002c8e:	f7ff ff9d 	bl	8002bcc <LL_APB1_GRP2_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8002c92:	2380      	movs	r3, #128	; 0x80
 8002c94:	029b      	lsls	r3, r3, #10
 8002c96:	0018      	movs	r0, r3
 8002c98:	f7ff ff82 	bl	8002ba0 <LL_AHB1_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PA9   ------> USART1_TX
  PA10   ------> USART1_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 8002c9c:	1d3b      	adds	r3, r7, #4
 8002c9e:	2280      	movs	r2, #128	; 0x80
 8002ca0:	0092      	lsls	r2, r2, #2
 8002ca2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002ca4:	1d3b      	adds	r3, r7, #4
 8002ca6:	2202      	movs	r2, #2
 8002ca8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8002caa:	1d3b      	adds	r3, r7, #4
 8002cac:	2203      	movs	r2, #3
 8002cae:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002cb0:	1d3b      	adds	r3, r7, #4
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002cb6:	1d3b      	adds	r3, r7, #4
 8002cb8:	2200      	movs	r2, #0
 8002cba:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8002cbc:	1d3b      	adds	r3, r7, #4
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cc2:	1d3a      	adds	r2, r7, #4
 8002cc4:	2390      	movs	r3, #144	; 0x90
 8002cc6:	05db      	lsls	r3, r3, #23
 8002cc8:	0011      	movs	r1, r2
 8002cca:	0018      	movs	r0, r3
 8002ccc:	f000 fabc 	bl	8003248 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 8002cd0:	1d3b      	adds	r3, r7, #4
 8002cd2:	2280      	movs	r2, #128	; 0x80
 8002cd4:	00d2      	lsls	r2, r2, #3
 8002cd6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002cd8:	1d3b      	adds	r3, r7, #4
 8002cda:	2202      	movs	r2, #2
 8002cdc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8002cde:	1d3b      	adds	r3, r7, #4
 8002ce0:	2203      	movs	r2, #3
 8002ce2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002ce4:	1d3b      	adds	r3, r7, #4
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002cea:	1d3b      	adds	r3, r7, #4
 8002cec:	2200      	movs	r2, #0
 8002cee:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8002cf0:	1d3b      	adds	r3, r7, #4
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cf6:	1d3a      	adds	r2, r7, #4
 8002cf8:	2390      	movs	r3, #144	; 0x90
 8002cfa:	05db      	lsls	r3, r3, #23
 8002cfc:	0011      	movs	r1, r2
 8002cfe:	0018      	movs	r0, r3
 8002d00:	f000 faa2 	bl	8003248 <LL_GPIO_Init>

  /* USART1 interrupt Init */
  NVIC_SetPriority(USART1_IRQn, 0);
 8002d04:	2100      	movs	r1, #0
 8002d06:	201b      	movs	r0, #27
 8002d08:	f7ff fedc 	bl	8002ac4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART1_IRQn);
 8002d0c:	201b      	movs	r0, #27
 8002d0e:	f7ff febf 	bl	8002a90 <__NVIC_EnableIRQ>

  USART_InitStruct.BaudRate = 115200;
 8002d12:	193b      	adds	r3, r7, r4
 8002d14:	22e1      	movs	r2, #225	; 0xe1
 8002d16:	0252      	lsls	r2, r2, #9
 8002d18:	601a      	str	r2, [r3, #0]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8002d1a:	0021      	movs	r1, r4
 8002d1c:	187b      	adds	r3, r7, r1
 8002d1e:	2200      	movs	r2, #0
 8002d20:	605a      	str	r2, [r3, #4]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8002d22:	187b      	adds	r3, r7, r1
 8002d24:	2200      	movs	r2, #0
 8002d26:	609a      	str	r2, [r3, #8]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8002d28:	187b      	adds	r3, r7, r1
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	60da      	str	r2, [r3, #12]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8002d2e:	187b      	adds	r3, r7, r1
 8002d30:	220c      	movs	r2, #12
 8002d32:	611a      	str	r2, [r3, #16]
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8002d34:	187b      	adds	r3, r7, r1
 8002d36:	2200      	movs	r2, #0
 8002d38:	615a      	str	r2, [r3, #20]
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8002d3a:	187b      	adds	r3, r7, r1
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	619a      	str	r2, [r3, #24]
  LL_USART_Init(USART1, &USART_InitStruct);
 8002d40:	187b      	adds	r3, r7, r1
 8002d42:	4a0a      	ldr	r2, [pc, #40]	; (8002d6c <MX_USART1_UART_Init+0x108>)
 8002d44:	0019      	movs	r1, r3
 8002d46:	0010      	movs	r0, r2
 8002d48:	f000 fd60 	bl	800380c <LL_USART_Init>
  LL_USART_DisableIT_CTS(USART1);
 8002d4c:	4b07      	ldr	r3, [pc, #28]	; (8002d6c <MX_USART1_UART_Init+0x108>)
 8002d4e:	0018      	movs	r0, r3
 8002d50:	f7ff ff78 	bl	8002c44 <LL_USART_DisableIT_CTS>
  LL_USART_ConfigAsyncMode(USART1);
 8002d54:	4b05      	ldr	r3, [pc, #20]	; (8002d6c <MX_USART1_UART_Init+0x108>)
 8002d56:	0018      	movs	r0, r3
 8002d58:	f7ff ff5c 	bl	8002c14 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART1);
 8002d5c:	4b03      	ldr	r3, [pc, #12]	; (8002d6c <MX_USART1_UART_Init+0x108>)
 8002d5e:	0018      	movs	r0, r3
 8002d60:	f7ff ff4a 	bl	8002bf8 <LL_USART_Enable>

}
 8002d64:	46c0      	nop			; (mov r8, r8)
 8002d66:	46bd      	mov	sp, r7
 8002d68:	b00f      	add	sp, #60	; 0x3c
 8002d6a:	bd90      	pop	{r4, r7, pc}
 8002d6c:	40013800 	.word	0x40013800

08002d70 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002d70:	480d      	ldr	r0, [pc, #52]	; (8002da8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002d72:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002d74:	480d      	ldr	r0, [pc, #52]	; (8002dac <LoopForever+0x6>)
  ldr r1, =_edata
 8002d76:	490e      	ldr	r1, [pc, #56]	; (8002db0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002d78:	4a0e      	ldr	r2, [pc, #56]	; (8002db4 <LoopForever+0xe>)
  movs r3, #0
 8002d7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d7c:	e002      	b.n	8002d84 <LoopCopyDataInit>

08002d7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d82:	3304      	adds	r3, #4

08002d84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d88:	d3f9      	bcc.n	8002d7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d8a:	4a0b      	ldr	r2, [pc, #44]	; (8002db8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002d8c:	4c0b      	ldr	r4, [pc, #44]	; (8002dbc <LoopForever+0x16>)
  movs r3, #0
 8002d8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d90:	e001      	b.n	8002d96 <LoopFillZerobss>

08002d92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d94:	3204      	adds	r2, #4

08002d96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d98:	d3fb      	bcc.n	8002d92 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002d9a:	f7ff fd50 	bl	800283e <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8002d9e:	f000 fdf7 	bl	8003990 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002da2:	f7fe fdf3 	bl	800198c <main>

08002da6 <LoopForever>:

LoopForever:
    b LoopForever
 8002da6:	e7fe      	b.n	8002da6 <LoopForever>
  ldr   r0, =_estack
 8002da8:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8002dac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002db0:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8002db4:	08003a68 	.word	0x08003a68
  ldr r2, =_sbss
 8002db8:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8002dbc:	200003b0 	.word	0x200003b0

08002dc0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002dc0:	e7fe      	b.n	8002dc0 <ADC1_IRQHandler>

08002dc2 <LL_ADC_IsEnabled>:
{
 8002dc2:	b580      	push	{r7, lr}
 8002dc4:	b082      	sub	sp, #8
 8002dc6:	af00      	add	r7, sp, #0
 8002dc8:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN));
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	689b      	ldr	r3, [r3, #8]
 8002dce:	2201      	movs	r2, #1
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	3b01      	subs	r3, #1
 8002dd4:	425a      	negs	r2, r3
 8002dd6:	4153      	adcs	r3, r2
 8002dd8:	b2db      	uxtb	r3, r3
}
 8002dda:	0018      	movs	r0, r3
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	b002      	add	sp, #8
 8002de0:	bd80      	pop	{r7, pc}
	...

08002de4 <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b084      	sub	sp, #16
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
 8002dec:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8002dee:	230f      	movs	r3, #15
 8002df0:	18fb      	adds	r3, r7, r3
 8002df2:	2200      	movs	r2, #0
 8002df4:	701a      	strb	r2, [r3, #0]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_LOW_POWER(ADC_InitStruct->LowPowerMode));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	0018      	movs	r0, r3
 8002dfa:	f7ff ffe2 	bl	8002dc2 <LL_ADC_IsEnabled>
 8002dfe:	1e03      	subs	r3, r0, #0
 8002e00:	d118      	bne.n	8002e34 <LL_ADC_Init+0x50>
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC data resolution                                           */
    /*    - Set ADC conversion data alignment                                 */
    /*    - Set ADC low power mode                                            */
    MODIFY_REG(ADCx->CFGR1,
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	68db      	ldr	r3, [r3, #12]
 8002e06:	4a11      	ldr	r2, [pc, #68]	; (8002e4c <LL_ADC_Init+0x68>)
 8002e08:	401a      	ands	r2, r3
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	6859      	ldr	r1, [r3, #4]
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	689b      	ldr	r3, [r3, #8]
 8002e12:	4319      	orrs	r1, r3
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	68db      	ldr	r3, [r3, #12]
 8002e18:	430b      	orrs	r3, r1
 8002e1a:	431a      	orrs	r2, r3
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	60da      	str	r2, [r3, #12]
                 ADC_InitStruct->Resolution
               | ADC_InitStruct->DataAlignment
               | ADC_InitStruct->LowPowerMode
              );

    MODIFY_REG(ADCx->CFGR2,
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	691b      	ldr	r3, [r3, #16]
 8002e24:	009b      	lsls	r3, r3, #2
 8002e26:	089a      	lsrs	r2, r3, #2
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	431a      	orrs	r2, r3
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	611a      	str	r2, [r3, #16]
 8002e32:	e003      	b.n	8002e3c <LL_ADC_Init+0x58>
              );
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8002e34:	230f      	movs	r3, #15
 8002e36:	18fb      	adds	r3, r7, r3
 8002e38:	2201      	movs	r2, #1
 8002e3a:	701a      	strb	r2, [r3, #0]
  }
  return status;
 8002e3c:	230f      	movs	r3, #15
 8002e3e:	18fb      	adds	r3, r7, r3
 8002e40:	781b      	ldrb	r3, [r3, #0]
}
 8002e42:	0018      	movs	r0, r3
 8002e44:	46bd      	mov	sp, r7
 8002e46:	b004      	add	sp, #16
 8002e48:	bd80      	pop	{r7, pc}
 8002e4a:	46c0      	nop			; (mov r8, r8)
 8002e4c:	ffff3fc7 	.word	0xffff3fc7

08002e50 <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b084      	sub	sp, #16
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
 8002e58:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8002e5a:	230f      	movs	r3, #15
 8002e5c:	18fb      	adds	r3, r7, r3
 8002e5e:	2200      	movs	r2, #0
 8002e60:	701a      	strb	r2, [r3, #0]
  assert_param((ADC_REG_InitStruct->ContinuousMode == LL_ADC_REG_CONV_SINGLE)
               || (ADC_REG_InitStruct->SequencerDiscont == LL_ADC_REG_SEQ_DISCONT_DISABLE));

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	0018      	movs	r0, r3
 8002e66:	f7ff ffac 	bl	8002dc2 <LL_ADC_IsEnabled>
 8002e6a:	1e03      	subs	r3, r0, #0
 8002e6c:	d115      	bne.n	8002e9a <LL_ADC_REG_Init+0x4a>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /*    - Set ADC group regular overrun behavior                            */
    /* Note: On this STM32 serie, ADC trigger edge is set to value 0x0 by     */
    /*       setting of trigger source to SW start.                           */
    MODIFY_REG(ADCx->CFGR1,
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	68db      	ldr	r3, [r3, #12]
 8002e72:	4a0f      	ldr	r2, [pc, #60]	; (8002eb0 <LL_ADC_REG_Init+0x60>)
 8002e74:	401a      	ands	r2, r3
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	6819      	ldr	r1, [r3, #0]
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	4319      	orrs	r1, r3
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	689b      	ldr	r3, [r3, #8]
 8002e84:	4319      	orrs	r1, r3
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	68db      	ldr	r3, [r3, #12]
 8002e8a:	4319      	orrs	r1, r3
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	691b      	ldr	r3, [r3, #16]
 8002e90:	430b      	orrs	r3, r1
 8002e92:	431a      	orrs	r2, r3
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	60da      	str	r2, [r3, #12]
 8002e98:	e003      	b.n	8002ea2 <LL_ADC_REG_Init+0x52>

  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8002e9a:	230f      	movs	r3, #15
 8002e9c:	18fb      	adds	r3, r7, r3
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	701a      	strb	r2, [r3, #0]
  }
  return status;
 8002ea2:	230f      	movs	r3, #15
 8002ea4:	18fb      	adds	r3, r7, r3
 8002ea6:	781b      	ldrb	r3, [r3, #0]
}
 8002ea8:	0018      	movs	r0, r3
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	b004      	add	sp, #16
 8002eae:	bd80      	pop	{r7, pc}
 8002eb0:	fffec23c 	.word	0xfffec23c

08002eb4 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b082      	sub	sp, #8
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 8002ebc:	4b04      	ldr	r3, [pc, #16]	; (8002ed0 <LL_EXTI_EnableIT_0_31+0x1c>)
 8002ebe:	6819      	ldr	r1, [r3, #0]
 8002ec0:	4b03      	ldr	r3, [pc, #12]	; (8002ed0 <LL_EXTI_EnableIT_0_31+0x1c>)
 8002ec2:	687a      	ldr	r2, [r7, #4]
 8002ec4:	430a      	orrs	r2, r1
 8002ec6:	601a      	str	r2, [r3, #0]
}
 8002ec8:	46c0      	nop			; (mov r8, r8)
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	b002      	add	sp, #8
 8002ece:	bd80      	pop	{r7, pc}
 8002ed0:	40010400 	.word	0x40010400

08002ed4 <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b082      	sub	sp, #8
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8002edc:	4b05      	ldr	r3, [pc, #20]	; (8002ef4 <LL_EXTI_DisableIT_0_31+0x20>)
 8002ede:	681a      	ldr	r2, [r3, #0]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	43d9      	mvns	r1, r3
 8002ee4:	4b03      	ldr	r3, [pc, #12]	; (8002ef4 <LL_EXTI_DisableIT_0_31+0x20>)
 8002ee6:	400a      	ands	r2, r1
 8002ee8:	601a      	str	r2, [r3, #0]
}
 8002eea:	46c0      	nop			; (mov r8, r8)
 8002eec:	46bd      	mov	sp, r7
 8002eee:	b002      	add	sp, #8
 8002ef0:	bd80      	pop	{r7, pc}
 8002ef2:	46c0      	nop			; (mov r8, r8)
 8002ef4:	40010400 	.word	0x40010400

08002ef8 <LL_EXTI_EnableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b082      	sub	sp, #8
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 8002f00:	4b04      	ldr	r3, [pc, #16]	; (8002f14 <LL_EXTI_EnableEvent_0_31+0x1c>)
 8002f02:	6859      	ldr	r1, [r3, #4]
 8002f04:	4b03      	ldr	r3, [pc, #12]	; (8002f14 <LL_EXTI_EnableEvent_0_31+0x1c>)
 8002f06:	687a      	ldr	r2, [r7, #4]
 8002f08:	430a      	orrs	r2, r1
 8002f0a:	605a      	str	r2, [r3, #4]

}
 8002f0c:	46c0      	nop			; (mov r8, r8)
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	b002      	add	sp, #8
 8002f12:	bd80      	pop	{r7, pc}
 8002f14:	40010400 	.word	0x40010400

08002f18 <LL_EXTI_DisableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b082      	sub	sp, #8
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 8002f20:	4b05      	ldr	r3, [pc, #20]	; (8002f38 <LL_EXTI_DisableEvent_0_31+0x20>)
 8002f22:	685a      	ldr	r2, [r3, #4]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	43d9      	mvns	r1, r3
 8002f28:	4b03      	ldr	r3, [pc, #12]	; (8002f38 <LL_EXTI_DisableEvent_0_31+0x20>)
 8002f2a:	400a      	ands	r2, r1
 8002f2c:	605a      	str	r2, [r3, #4]
}
 8002f2e:	46c0      	nop			; (mov r8, r8)
 8002f30:	46bd      	mov	sp, r7
 8002f32:	b002      	add	sp, #8
 8002f34:	bd80      	pop	{r7, pc}
 8002f36:	46c0      	nop			; (mov r8, r8)
 8002f38:	40010400 	.word	0x40010400

08002f3c <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b082      	sub	sp, #8
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 8002f44:	4b04      	ldr	r3, [pc, #16]	; (8002f58 <LL_EXTI_EnableRisingTrig_0_31+0x1c>)
 8002f46:	6899      	ldr	r1, [r3, #8]
 8002f48:	4b03      	ldr	r3, [pc, #12]	; (8002f58 <LL_EXTI_EnableRisingTrig_0_31+0x1c>)
 8002f4a:	687a      	ldr	r2, [r7, #4]
 8002f4c:	430a      	orrs	r2, r1
 8002f4e:	609a      	str	r2, [r3, #8]

}
 8002f50:	46c0      	nop			; (mov r8, r8)
 8002f52:	46bd      	mov	sp, r7
 8002f54:	b002      	add	sp, #8
 8002f56:	bd80      	pop	{r7, pc}
 8002f58:	40010400 	.word	0x40010400

08002f5c <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b082      	sub	sp, #8
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8002f64:	4b05      	ldr	r3, [pc, #20]	; (8002f7c <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 8002f66:	689a      	ldr	r2, [r3, #8]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	43d9      	mvns	r1, r3
 8002f6c:	4b03      	ldr	r3, [pc, #12]	; (8002f7c <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 8002f6e:	400a      	ands	r2, r1
 8002f70:	609a      	str	r2, [r3, #8]

}
 8002f72:	46c0      	nop			; (mov r8, r8)
 8002f74:	46bd      	mov	sp, r7
 8002f76:	b002      	add	sp, #8
 8002f78:	bd80      	pop	{r7, pc}
 8002f7a:	46c0      	nop			; (mov r8, r8)
 8002f7c:	40010400 	.word	0x40010400

08002f80 <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b082      	sub	sp, #8
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8002f88:	4b04      	ldr	r3, [pc, #16]	; (8002f9c <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 8002f8a:	68d9      	ldr	r1, [r3, #12]
 8002f8c:	4b03      	ldr	r3, [pc, #12]	; (8002f9c <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 8002f8e:	687a      	ldr	r2, [r7, #4]
 8002f90:	430a      	orrs	r2, r1
 8002f92:	60da      	str	r2, [r3, #12]
}
 8002f94:	46c0      	nop			; (mov r8, r8)
 8002f96:	46bd      	mov	sp, r7
 8002f98:	b002      	add	sp, #8
 8002f9a:	bd80      	pop	{r7, pc}
 8002f9c:	40010400 	.word	0x40010400

08002fa0 <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b082      	sub	sp, #8
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 8002fa8:	4b05      	ldr	r3, [pc, #20]	; (8002fc0 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 8002faa:	68da      	ldr	r2, [r3, #12]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	43d9      	mvns	r1, r3
 8002fb0:	4b03      	ldr	r3, [pc, #12]	; (8002fc0 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 8002fb2:	400a      	ands	r2, r1
 8002fb4:	60da      	str	r2, [r3, #12]
}
 8002fb6:	46c0      	nop			; (mov r8, r8)
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	b002      	add	sp, #8
 8002fbc:	bd80      	pop	{r7, pc}
 8002fbe:	46c0      	nop			; (mov r8, r8)
 8002fc0:	40010400 	.word	0x40010400

08002fc4 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b084      	sub	sp, #16
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 8002fcc:	230f      	movs	r3, #15
 8002fce:	18fb      	adds	r3, r7, r3
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	701a      	strb	r2, [r3, #0]
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	791b      	ldrb	r3, [r3, #4]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d100      	bne.n	8002fde <LL_EXTI_Init+0x1a>
 8002fdc:	e068      	b.n	80030b0 <LL_EXTI_Init+0xec>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d100      	bne.n	8002fe8 <LL_EXTI_Init+0x24>
 8002fe6:	e06e      	b.n	80030c6 <LL_EXTI_Init+0x102>
    {
      switch (EXTI_InitStruct->Mode)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	795b      	ldrb	r3, [r3, #5]
 8002fec:	2b02      	cmp	r3, #2
 8002fee:	d01b      	beq.n	8003028 <LL_EXTI_Init+0x64>
 8002ff0:	dc25      	bgt.n	800303e <LL_EXTI_Init+0x7a>
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d002      	beq.n	8002ffc <LL_EXTI_Init+0x38>
 8002ff6:	2b01      	cmp	r3, #1
 8002ff8:	d00b      	beq.n	8003012 <LL_EXTI_Init+0x4e>
 8002ffa:	e020      	b.n	800303e <LL_EXTI_Init+0x7a>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	0018      	movs	r0, r3
 8003002:	f7ff ff89 	bl	8002f18 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	0018      	movs	r0, r3
 800300c:	f7ff ff52 	bl	8002eb4 <LL_EXTI_EnableIT_0_31>
          break;
 8003010:	e01a      	b.n	8003048 <LL_EXTI_Init+0x84>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	0018      	movs	r0, r3
 8003018:	f7ff ff5c 	bl	8002ed4 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	0018      	movs	r0, r3
 8003022:	f7ff ff69 	bl	8002ef8 <LL_EXTI_EnableEvent_0_31>
          break;
 8003026:	e00f      	b.n	8003048 <LL_EXTI_Init+0x84>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	0018      	movs	r0, r3
 800302e:	f7ff ff41 	bl	8002eb4 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	0018      	movs	r0, r3
 8003038:	f7ff ff5e 	bl	8002ef8 <LL_EXTI_EnableEvent_0_31>
          break;
 800303c:	e004      	b.n	8003048 <LL_EXTI_Init+0x84>
        default:
          status = ERROR;
 800303e:	230f      	movs	r3, #15
 8003040:	18fb      	adds	r3, r7, r3
 8003042:	2201      	movs	r2, #1
 8003044:	701a      	strb	r2, [r3, #0]
          break;
 8003046:	46c0      	nop			; (mov r8, r8)
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	799b      	ldrb	r3, [r3, #6]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d03a      	beq.n	80030c6 <LL_EXTI_Init+0x102>
      {
        switch (EXTI_InitStruct->Trigger)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	799b      	ldrb	r3, [r3, #6]
 8003054:	2b03      	cmp	r3, #3
 8003056:	d01b      	beq.n	8003090 <LL_EXTI_Init+0xcc>
 8003058:	dc25      	bgt.n	80030a6 <LL_EXTI_Init+0xe2>
 800305a:	2b01      	cmp	r3, #1
 800305c:	d002      	beq.n	8003064 <LL_EXTI_Init+0xa0>
 800305e:	2b02      	cmp	r3, #2
 8003060:	d00b      	beq.n	800307a <LL_EXTI_Init+0xb6>
 8003062:	e020      	b.n	80030a6 <LL_EXTI_Init+0xe2>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	0018      	movs	r0, r3
 800306a:	f7ff ff99 	bl	8002fa0 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	0018      	movs	r0, r3
 8003074:	f7ff ff62 	bl	8002f3c <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8003078:	e026      	b.n	80030c8 <LL_EXTI_Init+0x104>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	0018      	movs	r0, r3
 8003080:	f7ff ff6c 	bl	8002f5c <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	0018      	movs	r0, r3
 800308a:	f7ff ff79 	bl	8002f80 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 800308e:	e01b      	b.n	80030c8 <LL_EXTI_Init+0x104>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	0018      	movs	r0, r3
 8003096:	f7ff ff51 	bl	8002f3c <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	0018      	movs	r0, r3
 80030a0:	f7ff ff6e 	bl	8002f80 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 80030a4:	e010      	b.n	80030c8 <LL_EXTI_Init+0x104>
          default:
            status = ERROR;
 80030a6:	230f      	movs	r3, #15
 80030a8:	18fb      	adds	r3, r7, r3
 80030aa:	2201      	movs	r2, #1
 80030ac:	701a      	strb	r2, [r3, #0]
            break;
 80030ae:	e00b      	b.n	80030c8 <LL_EXTI_Init+0x104>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	0018      	movs	r0, r3
 80030b6:	f7ff ff0d 	bl	8002ed4 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	0018      	movs	r0, r3
 80030c0:	f7ff ff2a 	bl	8002f18 <LL_EXTI_DisableEvent_0_31>
 80030c4:	e000      	b.n	80030c8 <LL_EXTI_Init+0x104>
      }
 80030c6:	46c0      	nop			; (mov r8, r8)
  }
  return status;
 80030c8:	230f      	movs	r3, #15
 80030ca:	18fb      	adds	r3, r7, r3
 80030cc:	781b      	ldrb	r3, [r3, #0]
}
 80030ce:	0018      	movs	r0, r3
 80030d0:	46bd      	mov	sp, r7
 80030d2:	b004      	add	sp, #16
 80030d4:	bd80      	pop	{r7, pc}

080030d6 <LL_GPIO_SetPinMode>:
{
 80030d6:	b580      	push	{r7, lr}
 80030d8:	b084      	sub	sp, #16
 80030da:	af00      	add	r7, sp, #0
 80030dc:	60f8      	str	r0, [r7, #12]
 80030de:	60b9      	str	r1, [r7, #8]
 80030e0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODER0), ((Pin * Pin) * Mode));
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	6819      	ldr	r1, [r3, #0]
 80030e6:	68bb      	ldr	r3, [r7, #8]
 80030e8:	435b      	muls	r3, r3
 80030ea:	001a      	movs	r2, r3
 80030ec:	0013      	movs	r3, r2
 80030ee:	005b      	lsls	r3, r3, #1
 80030f0:	189b      	adds	r3, r3, r2
 80030f2:	43db      	mvns	r3, r3
 80030f4:	400b      	ands	r3, r1
 80030f6:	001a      	movs	r2, r3
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	435b      	muls	r3, r3
 80030fc:	6879      	ldr	r1, [r7, #4]
 80030fe:	434b      	muls	r3, r1
 8003100:	431a      	orrs	r2, r3
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	601a      	str	r2, [r3, #0]
}
 8003106:	46c0      	nop			; (mov r8, r8)
 8003108:	46bd      	mov	sp, r7
 800310a:	b004      	add	sp, #16
 800310c:	bd80      	pop	{r7, pc}

0800310e <LL_GPIO_SetPinOutputType>:
{
 800310e:	b580      	push	{r7, lr}
 8003110:	b084      	sub	sp, #16
 8003112:	af00      	add	r7, sp, #0
 8003114:	60f8      	str	r0, [r7, #12]
 8003116:	60b9      	str	r1, [r7, #8]
 8003118:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	68ba      	ldr	r2, [r7, #8]
 8003120:	43d2      	mvns	r2, r2
 8003122:	401a      	ands	r2, r3
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	6879      	ldr	r1, [r7, #4]
 8003128:	434b      	muls	r3, r1
 800312a:	431a      	orrs	r2, r3
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	605a      	str	r2, [r3, #4]
}
 8003130:	46c0      	nop			; (mov r8, r8)
 8003132:	46bd      	mov	sp, r7
 8003134:	b004      	add	sp, #16
 8003136:	bd80      	pop	{r7, pc}

08003138 <LL_GPIO_SetPinSpeed>:
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b084      	sub	sp, #16
 800313c:	af00      	add	r7, sp, #0
 800313e:	60f8      	str	r0, [r7, #12]
 8003140:	60b9      	str	r1, [r7, #8]
 8003142:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEEDR0), ((Pin * Pin) * Speed));
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	6899      	ldr	r1, [r3, #8]
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	435b      	muls	r3, r3
 800314c:	001a      	movs	r2, r3
 800314e:	0013      	movs	r3, r2
 8003150:	005b      	lsls	r3, r3, #1
 8003152:	189b      	adds	r3, r3, r2
 8003154:	43db      	mvns	r3, r3
 8003156:	400b      	ands	r3, r1
 8003158:	001a      	movs	r2, r3
 800315a:	68bb      	ldr	r3, [r7, #8]
 800315c:	435b      	muls	r3, r3
 800315e:	6879      	ldr	r1, [r7, #4]
 8003160:	434b      	muls	r3, r1
 8003162:	431a      	orrs	r2, r3
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	609a      	str	r2, [r3, #8]
}
 8003168:	46c0      	nop			; (mov r8, r8)
 800316a:	46bd      	mov	sp, r7
 800316c:	b004      	add	sp, #16
 800316e:	bd80      	pop	{r7, pc}

08003170 <LL_GPIO_SetPinPull>:
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b084      	sub	sp, #16
 8003174:	af00      	add	r7, sp, #0
 8003176:	60f8      	str	r0, [r7, #12]
 8003178:	60b9      	str	r1, [r7, #8]
 800317a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPDR0), ((Pin * Pin) * Pull));
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	68d9      	ldr	r1, [r3, #12]
 8003180:	68bb      	ldr	r3, [r7, #8]
 8003182:	435b      	muls	r3, r3
 8003184:	001a      	movs	r2, r3
 8003186:	0013      	movs	r3, r2
 8003188:	005b      	lsls	r3, r3, #1
 800318a:	189b      	adds	r3, r3, r2
 800318c:	43db      	mvns	r3, r3
 800318e:	400b      	ands	r3, r1
 8003190:	001a      	movs	r2, r3
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	435b      	muls	r3, r3
 8003196:	6879      	ldr	r1, [r7, #4]
 8003198:	434b      	muls	r3, r1
 800319a:	431a      	orrs	r2, r3
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	60da      	str	r2, [r3, #12]
}
 80031a0:	46c0      	nop			; (mov r8, r8)
 80031a2:	46bd      	mov	sp, r7
 80031a4:	b004      	add	sp, #16
 80031a6:	bd80      	pop	{r7, pc}

080031a8 <LL_GPIO_SetAFPin_0_7>:
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b084      	sub	sp, #16
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	60f8      	str	r0, [r7, #12]
 80031b0:	60b9      	str	r1, [r7, #8]
 80031b2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	6a19      	ldr	r1, [r3, #32]
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	435b      	muls	r3, r3
 80031bc:	68ba      	ldr	r2, [r7, #8]
 80031be:	4353      	muls	r3, r2
 80031c0:	68ba      	ldr	r2, [r7, #8]
 80031c2:	435a      	muls	r2, r3
 80031c4:	0013      	movs	r3, r2
 80031c6:	011b      	lsls	r3, r3, #4
 80031c8:	1a9b      	subs	r3, r3, r2
 80031ca:	43db      	mvns	r3, r3
 80031cc:	400b      	ands	r3, r1
 80031ce:	001a      	movs	r2, r3
 80031d0:	68bb      	ldr	r3, [r7, #8]
 80031d2:	435b      	muls	r3, r3
 80031d4:	68b9      	ldr	r1, [r7, #8]
 80031d6:	434b      	muls	r3, r1
 80031d8:	68b9      	ldr	r1, [r7, #8]
 80031da:	434b      	muls	r3, r1
 80031dc:	6879      	ldr	r1, [r7, #4]
 80031de:	434b      	muls	r3, r1
 80031e0:	431a      	orrs	r2, r3
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	621a      	str	r2, [r3, #32]
}
 80031e6:	46c0      	nop			; (mov r8, r8)
 80031e8:	46bd      	mov	sp, r7
 80031ea:	b004      	add	sp, #16
 80031ec:	bd80      	pop	{r7, pc}

080031ee <LL_GPIO_SetAFPin_8_15>:
{
 80031ee:	b580      	push	{r7, lr}
 80031f0:	b084      	sub	sp, #16
 80031f2:	af00      	add	r7, sp, #0
 80031f4:	60f8      	str	r0, [r7, #12]
 80031f6:	60b9      	str	r1, [r7, #8]
 80031f8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80031fe:	68bb      	ldr	r3, [r7, #8]
 8003200:	0a1b      	lsrs	r3, r3, #8
 8003202:	68ba      	ldr	r2, [r7, #8]
 8003204:	0a12      	lsrs	r2, r2, #8
 8003206:	4353      	muls	r3, r2
 8003208:	68ba      	ldr	r2, [r7, #8]
 800320a:	0a12      	lsrs	r2, r2, #8
 800320c:	4353      	muls	r3, r2
 800320e:	68ba      	ldr	r2, [r7, #8]
 8003210:	0a12      	lsrs	r2, r2, #8
 8003212:	435a      	muls	r2, r3
 8003214:	0013      	movs	r3, r2
 8003216:	011b      	lsls	r3, r3, #4
 8003218:	1a9b      	subs	r3, r3, r2
 800321a:	43db      	mvns	r3, r3
 800321c:	400b      	ands	r3, r1
 800321e:	001a      	movs	r2, r3
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	0a1b      	lsrs	r3, r3, #8
 8003224:	68b9      	ldr	r1, [r7, #8]
 8003226:	0a09      	lsrs	r1, r1, #8
 8003228:	434b      	muls	r3, r1
 800322a:	68b9      	ldr	r1, [r7, #8]
 800322c:	0a09      	lsrs	r1, r1, #8
 800322e:	434b      	muls	r3, r1
 8003230:	68b9      	ldr	r1, [r7, #8]
 8003232:	0a09      	lsrs	r1, r1, #8
 8003234:	434b      	muls	r3, r1
 8003236:	6879      	ldr	r1, [r7, #4]
 8003238:	434b      	muls	r3, r1
 800323a:	431a      	orrs	r2, r3
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	625a      	str	r2, [r3, #36]	; 0x24
}
 8003240:	46c0      	nop			; (mov r8, r8)
 8003242:	46bd      	mov	sp, r7
 8003244:	b004      	add	sp, #16
 8003246:	bd80      	pop	{r7, pc}

08003248 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b084      	sub	sp, #16
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
 8003250:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = 0;
 8003252:	2300      	movs	r3, #0
 8003254:	60fb      	str	r3, [r7, #12]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8003256:	e048      	b.n	80032ea <LL_GPIO_Init+0xa2>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	2101      	movs	r1, #1
 800325e:	68fa      	ldr	r2, [r7, #12]
 8003260:	4091      	lsls	r1, r2
 8003262:	000a      	movs	r2, r1
 8003264:	4013      	ands	r3, r2
 8003266:	60bb      	str	r3, [r7, #8]

    if (currentpin != 0x00u)
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d03a      	beq.n	80032e4 <LL_GPIO_Init+0x9c>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	2b01      	cmp	r3, #1
 8003274:	d003      	beq.n	800327e <LL_GPIO_Init+0x36>
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	2b02      	cmp	r3, #2
 800327c:	d10e      	bne.n	800329c <LL_GPIO_Init+0x54>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	689a      	ldr	r2, [r3, #8]
 8003282:	68b9      	ldr	r1, [r7, #8]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	0018      	movs	r0, r3
 8003288:	f7ff ff56 	bl	8003138 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	6819      	ldr	r1, [r3, #0]
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	68da      	ldr	r2, [r3, #12]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	0018      	movs	r0, r3
 8003298:	f7ff ff39 	bl	800310e <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	691a      	ldr	r2, [r3, #16]
 80032a0:	68b9      	ldr	r1, [r7, #8]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	0018      	movs	r0, r3
 80032a6:	f7ff ff63 	bl	8003170 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	2b02      	cmp	r3, #2
 80032b0:	d111      	bne.n	80032d6 <LL_GPIO_Init+0x8e>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 80032b2:	68bb      	ldr	r3, [r7, #8]
 80032b4:	2bff      	cmp	r3, #255	; 0xff
 80032b6:	d807      	bhi.n	80032c8 <LL_GPIO_Init+0x80>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	695a      	ldr	r2, [r3, #20]
 80032bc:	68b9      	ldr	r1, [r7, #8]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	0018      	movs	r0, r3
 80032c2:	f7ff ff71 	bl	80031a8 <LL_GPIO_SetAFPin_0_7>
 80032c6:	e006      	b.n	80032d6 <LL_GPIO_Init+0x8e>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	695a      	ldr	r2, [r3, #20]
 80032cc:	68b9      	ldr	r1, [r7, #8]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	0018      	movs	r0, r3
 80032d2:	f7ff ff8c 	bl	80031ee <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	685a      	ldr	r2, [r3, #4]
 80032da:	68b9      	ldr	r1, [r7, #8]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	0018      	movs	r0, r3
 80032e0:	f7ff fef9 	bl	80030d6 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	3301      	adds	r3, #1
 80032e8:	60fb      	str	r3, [r7, #12]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	681a      	ldr	r2, [r3, #0]
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	40da      	lsrs	r2, r3
 80032f2:	1e13      	subs	r3, r2, #0
 80032f4:	d1b0      	bne.n	8003258 <LL_GPIO_Init+0x10>
  }

  return (SUCCESS);
 80032f6:	2300      	movs	r3, #0
}
 80032f8:	0018      	movs	r0, r3
 80032fa:	46bd      	mov	sp, r7
 80032fc:	b004      	add	sp, #16
 80032fe:	bd80      	pop	{r7, pc}

08003300 <LL_RCC_HSI_IsReady>:
{
 8003300:	b580      	push	{r7, lr}
 8003302:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8003304:	4b05      	ldr	r3, [pc, #20]	; (800331c <LL_RCC_HSI_IsReady+0x1c>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	2202      	movs	r2, #2
 800330a:	4013      	ands	r3, r2
 800330c:	3b02      	subs	r3, #2
 800330e:	425a      	negs	r2, r3
 8003310:	4153      	adcs	r3, r2
 8003312:	b2db      	uxtb	r3, r3
}
 8003314:	0018      	movs	r0, r3
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}
 800331a:	46c0      	nop			; (mov r8, r8)
 800331c:	40021000 	.word	0x40021000

08003320 <LL_RCC_LSE_IsReady>:
{
 8003320:	b580      	push	{r7, lr}
 8003322:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY));
 8003324:	4b05      	ldr	r3, [pc, #20]	; (800333c <LL_RCC_LSE_IsReady+0x1c>)
 8003326:	6a1b      	ldr	r3, [r3, #32]
 8003328:	2202      	movs	r2, #2
 800332a:	4013      	ands	r3, r2
 800332c:	3b02      	subs	r3, #2
 800332e:	425a      	negs	r2, r3
 8003330:	4153      	adcs	r3, r2
 8003332:	b2db      	uxtb	r3, r3
}
 8003334:	0018      	movs	r0, r3
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}
 800333a:	46c0      	nop			; (mov r8, r8)
 800333c:	40021000 	.word	0x40021000

08003340 <LL_RCC_GetSysClkSource>:
{
 8003340:	b580      	push	{r7, lr}
 8003342:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003344:	4b03      	ldr	r3, [pc, #12]	; (8003354 <LL_RCC_GetSysClkSource+0x14>)
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	220c      	movs	r2, #12
 800334a:	4013      	ands	r3, r2
}
 800334c:	0018      	movs	r0, r3
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}
 8003352:	46c0      	nop			; (mov r8, r8)
 8003354:	40021000 	.word	0x40021000

08003358 <LL_RCC_GetAHBPrescaler>:
{
 8003358:	b580      	push	{r7, lr}
 800335a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800335c:	4b03      	ldr	r3, [pc, #12]	; (800336c <LL_RCC_GetAHBPrescaler+0x14>)
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	22f0      	movs	r2, #240	; 0xf0
 8003362:	4013      	ands	r3, r2
}
 8003364:	0018      	movs	r0, r3
 8003366:	46bd      	mov	sp, r7
 8003368:	bd80      	pop	{r7, pc}
 800336a:	46c0      	nop			; (mov r8, r8)
 800336c:	40021000 	.word	0x40021000

08003370 <LL_RCC_GetAPB1Prescaler>:
{
 8003370:	b580      	push	{r7, lr}
 8003372:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8003374:	4b03      	ldr	r3, [pc, #12]	; (8003384 <LL_RCC_GetAPB1Prescaler+0x14>)
 8003376:	685a      	ldr	r2, [r3, #4]
 8003378:	23e0      	movs	r3, #224	; 0xe0
 800337a:	00db      	lsls	r3, r3, #3
 800337c:	4013      	ands	r3, r2
}
 800337e:	0018      	movs	r0, r3
 8003380:	46bd      	mov	sp, r7
 8003382:	bd80      	pop	{r7, pc}
 8003384:	40021000 	.word	0x40021000

08003388 <LL_RCC_GetUSARTClockSource>:
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b082      	sub	sp, #8
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR3, (RCC_CFGR3_USART1SW << USARTx)) | (USARTx << 24U));
 8003390:	4b06      	ldr	r3, [pc, #24]	; (80033ac <LL_RCC_GetUSARTClockSource+0x24>)
 8003392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003394:	2103      	movs	r1, #3
 8003396:	687a      	ldr	r2, [r7, #4]
 8003398:	4091      	lsls	r1, r2
 800339a:	000a      	movs	r2, r1
 800339c:	401a      	ands	r2, r3
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	061b      	lsls	r3, r3, #24
 80033a2:	4313      	orrs	r3, r2
}
 80033a4:	0018      	movs	r0, r3
 80033a6:	46bd      	mov	sp, r7
 80033a8:	b002      	add	sp, #8
 80033aa:	bd80      	pop	{r7, pc}
 80033ac:	40021000 	.word	0x40021000

080033b0 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI48 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 80033b4:	4b03      	ldr	r3, [pc, #12]	; (80033c4 <LL_RCC_PLL_GetMainSource+0x14>)
 80033b6:	685a      	ldr	r2, [r3, #4]
 80033b8:	2380      	movs	r3, #128	; 0x80
 80033ba:	025b      	lsls	r3, r3, #9
 80033bc:	4013      	ands	r3, r2
}
 80033be:	0018      	movs	r0, r3
 80033c0:	46bd      	mov	sp, r7
 80033c2:	bd80      	pop	{r7, pc}
 80033c4:	40021000 	.word	0x40021000

080033c8 <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_14
  *         @arg @ref LL_RCC_PLL_MUL_15
  *         @arg @ref LL_RCC_PLL_MUL_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMUL));
 80033cc:	4b03      	ldr	r3, [pc, #12]	; (80033dc <LL_RCC_PLL_GetMultiplicator+0x14>)
 80033ce:	685a      	ldr	r2, [r3, #4]
 80033d0:	23f0      	movs	r3, #240	; 0xf0
 80033d2:	039b      	lsls	r3, r3, #14
 80033d4:	4013      	ands	r3, r2
}
 80033d6:	0018      	movs	r0, r3
 80033d8:	46bd      	mov	sp, r7
 80033da:	bd80      	pop	{r7, pc}
 80033dc:	40021000 	.word	0x40021000

080033e0 <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_14
  *         @arg @ref LL_RCC_PREDIV_DIV_15
  *         @arg @ref LL_RCC_PREDIV_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV));
 80033e4:	4b03      	ldr	r3, [pc, #12]	; (80033f4 <LL_RCC_PLL_GetPrediv+0x14>)
 80033e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033e8:	220f      	movs	r2, #15
 80033ea:	4013      	ands	r3, r2
}
 80033ec:	0018      	movs	r0, r3
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}
 80033f2:	46c0      	nop			; (mov r8, r8)
 80033f4:	40021000 	.word	0x40021000

080033f8 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b082      	sub	sp, #8
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8003400:	f000 f85c 	bl	80034bc <RCC_GetSystemClockFreq>
 8003404:	0002      	movs	r2, r0
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	0018      	movs	r0, r3
 8003410:	f000 f87a 	bl	8003508 <RCC_GetHCLKClockFreq>
 8003414:	0002      	movs	r2, r0
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	0018      	movs	r0, r3
 8003420:	f000 f888 	bl	8003534 <RCC_GetPCLK1ClockFreq>
 8003424:	0002      	movs	r2, r0
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	609a      	str	r2, [r3, #8]
}
 800342a:	46c0      	nop			; (mov r8, r8)
 800342c:	46bd      	mov	sp, r7
 800342e:	b002      	add	sp, #8
 8003430:	bd80      	pop	{r7, pc}
	...

08003434 <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         @arg @ref LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b084      	sub	sp, #16
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 800343c:	2300      	movs	r3, #0
 800343e:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));
#if defined(RCC_CFGR3_USART1SW)
  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d12d      	bne.n	80034a2 <LL_RCC_GetUSARTClockFreq+0x6e>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	0018      	movs	r0, r3
 800344a:	f7ff ff9d 	bl	8003388 <LL_RCC_GetUSARTClockSource>
 800344e:	0003      	movs	r3, r0
 8003450:	2b03      	cmp	r3, #3
 8003452:	d00a      	beq.n	800346a <LL_RCC_GetUSARTClockFreq+0x36>
 8003454:	d818      	bhi.n	8003488 <LL_RCC_GetUSARTClockFreq+0x54>
 8003456:	2b01      	cmp	r3, #1
 8003458:	d002      	beq.n	8003460 <LL_RCC_GetUSARTClockFreq+0x2c>
 800345a:	2b02      	cmp	r3, #2
 800345c:	d00c      	beq.n	8003478 <LL_RCC_GetUSARTClockFreq+0x44>
 800345e:	e013      	b.n	8003488 <LL_RCC_GetUSARTClockFreq+0x54>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8003460:	f000 f82c 	bl	80034bc <RCC_GetSystemClockFreq>
 8003464:	0003      	movs	r3, r0
 8003466:	60fb      	str	r3, [r7, #12]
        break;
 8003468:	e020      	b.n	80034ac <LL_RCC_GetUSARTClockFreq+0x78>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 800346a:	f7ff ff49 	bl	8003300 <LL_RCC_HSI_IsReady>
 800346e:	1e03      	subs	r3, r0, #0
 8003470:	d019      	beq.n	80034a6 <LL_RCC_GetUSARTClockFreq+0x72>
        {
          usart_frequency = HSI_VALUE;
 8003472:	4b11      	ldr	r3, [pc, #68]	; (80034b8 <LL_RCC_GetUSARTClockFreq+0x84>)
 8003474:	60fb      	str	r3, [r7, #12]
        }
        break;
 8003476:	e016      	b.n	80034a6 <LL_RCC_GetUSARTClockFreq+0x72>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 8003478:	f7ff ff52 	bl	8003320 <LL_RCC_LSE_IsReady>
 800347c:	1e03      	subs	r3, r0, #0
 800347e:	d014      	beq.n	80034aa <LL_RCC_GetUSARTClockFreq+0x76>
        {
          usart_frequency = LSE_VALUE;
 8003480:	2380      	movs	r3, #128	; 0x80
 8003482:	021b      	lsls	r3, r3, #8
 8003484:	60fb      	str	r3, [r7, #12]
        }
        break;
 8003486:	e010      	b.n	80034aa <LL_RCC_GetUSARTClockFreq+0x76>

      case LL_RCC_USART1_CLKSOURCE_PCLK1:  /* USART1 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8003488:	f000 f818 	bl	80034bc <RCC_GetSystemClockFreq>
 800348c:	0003      	movs	r3, r0
 800348e:	0018      	movs	r0, r3
 8003490:	f000 f83a 	bl	8003508 <RCC_GetHCLKClockFreq>
 8003494:	0003      	movs	r3, r0
 8003496:	0018      	movs	r0, r3
 8003498:	f000 f84c 	bl	8003534 <RCC_GetPCLK1ClockFreq>
 800349c:	0003      	movs	r3, r0
 800349e:	60fb      	str	r3, [r7, #12]
        break;
 80034a0:	e004      	b.n	80034ac <LL_RCC_GetUSARTClockFreq+0x78>
    }
  }
 80034a2:	46c0      	nop			; (mov r8, r8)
 80034a4:	e002      	b.n	80034ac <LL_RCC_GetUSARTClockFreq+0x78>
        break;
 80034a6:	46c0      	nop			; (mov r8, r8)
 80034a8:	e000      	b.n	80034ac <LL_RCC_GetUSARTClockFreq+0x78>
        break;
 80034aa:	46c0      	nop			; (mov r8, r8)
        break;
    }
  }

#endif /* RCC_CFGR3_USART3SW */
  return usart_frequency;
 80034ac:	68fb      	ldr	r3, [r7, #12]
}
 80034ae:	0018      	movs	r0, r3
 80034b0:	46bd      	mov	sp, r7
 80034b2:	b004      	add	sp, #16
 80034b4:	bd80      	pop	{r7, pc}
 80034b6:	46c0      	nop			; (mov r8, r8)
 80034b8:	007a1200 	.word	0x007a1200

080034bc <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b082      	sub	sp, #8
 80034c0:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 80034c2:	2300      	movs	r3, #0
 80034c4:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 80034c6:	f7ff ff3b 	bl	8003340 <LL_RCC_GetSysClkSource>
 80034ca:	0003      	movs	r3, r0
 80034cc:	2b08      	cmp	r3, #8
 80034ce:	d00b      	beq.n	80034e8 <RCC_GetSystemClockFreq+0x2c>
 80034d0:	d80f      	bhi.n	80034f2 <RCC_GetSystemClockFreq+0x36>
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d002      	beq.n	80034dc <RCC_GetSystemClockFreq+0x20>
 80034d6:	2b04      	cmp	r3, #4
 80034d8:	d003      	beq.n	80034e2 <RCC_GetSystemClockFreq+0x26>
 80034da:	e00a      	b.n	80034f2 <RCC_GetSystemClockFreq+0x36>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 80034dc:	4b09      	ldr	r3, [pc, #36]	; (8003504 <RCC_GetSystemClockFreq+0x48>)
 80034de:	607b      	str	r3, [r7, #4]
      break;
 80034e0:	e00a      	b.n	80034f8 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 80034e2:	4b08      	ldr	r3, [pc, #32]	; (8003504 <RCC_GetSystemClockFreq+0x48>)
 80034e4:	607b      	str	r3, [r7, #4]
      break;
 80034e6:	e007      	b.n	80034f8 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 80034e8:	f000 f838 	bl	800355c <RCC_PLL_GetFreqDomain_SYS>
 80034ec:	0003      	movs	r3, r0
 80034ee:	607b      	str	r3, [r7, #4]
      break;
 80034f0:	e002      	b.n	80034f8 <RCC_GetSystemClockFreq+0x3c>
      frequency = HSI48_VALUE;
      break;
#endif /* RCC_HSI48_SUPPORT */

    default:
      frequency = HSI_VALUE;
 80034f2:	4b04      	ldr	r3, [pc, #16]	; (8003504 <RCC_GetSystemClockFreq+0x48>)
 80034f4:	607b      	str	r3, [r7, #4]
      break;
 80034f6:	46c0      	nop			; (mov r8, r8)
  }

  return frequency;
 80034f8:	687b      	ldr	r3, [r7, #4]
}
 80034fa:	0018      	movs	r0, r3
 80034fc:	46bd      	mov	sp, r7
 80034fe:	b002      	add	sp, #8
 8003500:	bd80      	pop	{r7, pc}
 8003502:	46c0      	nop			; (mov r8, r8)
 8003504:	007a1200 	.word	0x007a1200

08003508 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b082      	sub	sp, #8
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8003510:	f7ff ff22 	bl	8003358 <LL_RCC_GetAHBPrescaler>
 8003514:	0003      	movs	r3, r0
 8003516:	091b      	lsrs	r3, r3, #4
 8003518:	220f      	movs	r2, #15
 800351a:	4013      	ands	r3, r2
 800351c:	4a04      	ldr	r2, [pc, #16]	; (8003530 <RCC_GetHCLKClockFreq+0x28>)
 800351e:	5cd3      	ldrb	r3, [r2, r3]
 8003520:	001a      	movs	r2, r3
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	40d3      	lsrs	r3, r2
}
 8003526:	0018      	movs	r0, r3
 8003528:	46bd      	mov	sp, r7
 800352a:	b002      	add	sp, #8
 800352c:	bd80      	pop	{r7, pc}
 800352e:	46c0      	nop			; (mov r8, r8)
 8003530:	08003a48 	.word	0x08003a48

08003534 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b082      	sub	sp, #8
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 800353c:	f7ff ff18 	bl	8003370 <LL_RCC_GetAPB1Prescaler>
 8003540:	0003      	movs	r3, r0
 8003542:	0a1b      	lsrs	r3, r3, #8
 8003544:	4a04      	ldr	r2, [pc, #16]	; (8003558 <RCC_GetPCLK1ClockFreq+0x24>)
 8003546:	5cd3      	ldrb	r3, [r2, r3]
 8003548:	001a      	movs	r2, r3
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	40d3      	lsrs	r3, r2
}
 800354e:	0018      	movs	r0, r3
 8003550:	46bd      	mov	sp, r7
 8003552:	b002      	add	sp, #8
 8003554:	bd80      	pop	{r7, pc}
 8003556:	46c0      	nop			; (mov r8, r8)
 8003558:	08003a58 	.word	0x08003a58

0800355c <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 800355c:	b590      	push	{r4, r7, lr}
 800355e:	b083      	sub	sp, #12
 8003560:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 8003562:	2300      	movs	r3, #0
 8003564:	607b      	str	r3, [r7, #4]
 8003566:	2300      	movs	r3, #0
 8003568:	603b      	str	r3, [r7, #0]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL divider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 800356a:	f7ff ff21 	bl	80033b0 <LL_RCC_PLL_GetMainSource>
 800356e:	0003      	movs	r3, r0
 8003570:	603b      	str	r3, [r7, #0]

  switch (pllsource)
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d005      	beq.n	8003584 <RCC_PLL_GetFreqDomain_SYS+0x28>
 8003578:	683a      	ldr	r2, [r7, #0]
 800357a:	2380      	movs	r3, #128	; 0x80
 800357c:	025b      	lsls	r3, r3, #9
 800357e:	429a      	cmp	r2, r3
 8003580:	d003      	beq.n	800358a <RCC_PLL_GetFreqDomain_SYS+0x2e>
 8003582:	e005      	b.n	8003590 <RCC_PLL_GetFreqDomain_SYS+0x34>
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
    case LL_RCC_PLLSOURCE_HSI:       /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
#else
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
 8003584:	4b0f      	ldr	r3, [pc, #60]	; (80035c4 <RCC_PLL_GetFreqDomain_SYS+0x68>)
 8003586:	607b      	str	r3, [r7, #4]
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 8003588:	e005      	b.n	8003596 <RCC_PLL_GetFreqDomain_SYS+0x3a>
      pllinputfreq = HSI48_VALUE;
      break;
#endif /* RCC_HSI48_SUPPORT */

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 800358a:	4b0f      	ldr	r3, [pc, #60]	; (80035c8 <RCC_PLL_GetFreqDomain_SYS+0x6c>)
 800358c:	607b      	str	r3, [r7, #4]
      break;
 800358e:	e002      	b.n	8003596 <RCC_PLL_GetFreqDomain_SYS+0x3a>

    default:
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
      pllinputfreq = HSI_VALUE;
#else
      pllinputfreq = HSI_VALUE / 2U;
 8003590:	4b0c      	ldr	r3, [pc, #48]	; (80035c4 <RCC_PLL_GetFreqDomain_SYS+0x68>)
 8003592:	607b      	str	r3, [r7, #4]
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 8003594:	46c0      	nop			; (mov r8, r8)
  }
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator(), LL_RCC_PLL_GetPrediv());
#else
  return __LL_RCC_CALC_PLLCLK_FREQ((pllinputfreq / (LL_RCC_PLL_GetPrediv() + 1U)), LL_RCC_PLL_GetMultiplicator());
 8003596:	f7ff ff23 	bl	80033e0 <LL_RCC_PLL_GetPrediv>
 800359a:	0003      	movs	r3, r0
 800359c:	3301      	adds	r3, #1
 800359e:	0019      	movs	r1, r3
 80035a0:	6878      	ldr	r0, [r7, #4]
 80035a2:	f7fc fdb1 	bl	8000108 <__udivsi3>
 80035a6:	0003      	movs	r3, r0
 80035a8:	001c      	movs	r4, r3
 80035aa:	f7ff ff0d 	bl	80033c8 <LL_RCC_PLL_GetMultiplicator>
 80035ae:	0003      	movs	r3, r0
 80035b0:	0c9b      	lsrs	r3, r3, #18
 80035b2:	220f      	movs	r2, #15
 80035b4:	4013      	ands	r3, r2
 80035b6:	3302      	adds	r3, #2
 80035b8:	4363      	muls	r3, r4
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
}
 80035ba:	0018      	movs	r0, r3
 80035bc:	46bd      	mov	sp, r7
 80035be:	b003      	add	sp, #12
 80035c0:	bd90      	pop	{r4, r7, pc}
 80035c2:	46c0      	nop			; (mov r8, r8)
 80035c4:	003d0900 	.word	0x003d0900
 80035c8:	007a1200 	.word	0x007a1200

080035cc <LL_TIM_SetPrescaler>:
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b082      	sub	sp, #8
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
 80035d4:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	683a      	ldr	r2, [r7, #0]
 80035da:	629a      	str	r2, [r3, #40]	; 0x28
}
 80035dc:	46c0      	nop			; (mov r8, r8)
 80035de:	46bd      	mov	sp, r7
 80035e0:	b002      	add	sp, #8
 80035e2:	bd80      	pop	{r7, pc}

080035e4 <LL_TIM_SetAutoReload>:
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b082      	sub	sp, #8
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
 80035ec:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	683a      	ldr	r2, [r7, #0]
 80035f2:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80035f4:	46c0      	nop			; (mov r8, r8)
 80035f6:	46bd      	mov	sp, r7
 80035f8:	b002      	add	sp, #8
 80035fa:	bd80      	pop	{r7, pc}

080035fc <LL_TIM_SetRepetitionCounter>:
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b082      	sub	sp, #8
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
 8003604:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	683a      	ldr	r2, [r7, #0]
 800360a:	631a      	str	r2, [r3, #48]	; 0x30
}
 800360c:	46c0      	nop			; (mov r8, r8)
 800360e:	46bd      	mov	sp, r7
 8003610:	b002      	add	sp, #8
 8003612:	bd80      	pop	{r7, pc}

08003614 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b082      	sub	sp, #8
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	695b      	ldr	r3, [r3, #20]
 8003620:	2201      	movs	r2, #1
 8003622:	431a      	orrs	r2, r3
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	615a      	str	r2, [r3, #20]
}
 8003628:	46c0      	nop			; (mov r8, r8)
 800362a:	46bd      	mov	sp, r7
 800362c:	b002      	add	sp, #8
 800362e:	bd80      	pop	{r7, pc}

08003630 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b084      	sub	sp, #16
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
 8003638:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	4a30      	ldr	r2, [pc, #192]	; (8003704 <LL_TIM_Init+0xd4>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d003      	beq.n	8003650 <LL_TIM_Init+0x20>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	4a2f      	ldr	r2, [pc, #188]	; (8003708 <LL_TIM_Init+0xd8>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d107      	bne.n	8003660 <LL_TIM_Init+0x30>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	2270      	movs	r2, #112	; 0x70
 8003654:	4393      	bics	r3, r2
 8003656:	001a      	movs	r2, r3
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	4313      	orrs	r3, r2
 800365e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	4a28      	ldr	r2, [pc, #160]	; (8003704 <LL_TIM_Init+0xd4>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d013      	beq.n	8003690 <LL_TIM_Init+0x60>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	4a27      	ldr	r2, [pc, #156]	; (8003708 <LL_TIM_Init+0xd8>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d00f      	beq.n	8003690 <LL_TIM_Init+0x60>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	4a26      	ldr	r2, [pc, #152]	; (800370c <LL_TIM_Init+0xdc>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d00b      	beq.n	8003690 <LL_TIM_Init+0x60>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	4a25      	ldr	r2, [pc, #148]	; (8003710 <LL_TIM_Init+0xe0>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d007      	beq.n	8003690 <LL_TIM_Init+0x60>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	4a24      	ldr	r2, [pc, #144]	; (8003714 <LL_TIM_Init+0xe4>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d003      	beq.n	8003690 <LL_TIM_Init+0x60>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	4a23      	ldr	r2, [pc, #140]	; (8003718 <LL_TIM_Init+0xe8>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d106      	bne.n	800369e <LL_TIM_Init+0x6e>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	4a22      	ldr	r2, [pc, #136]	; (800371c <LL_TIM_Init+0xec>)
 8003694:	401a      	ands	r2, r3
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	68db      	ldr	r3, [r3, #12]
 800369a:	4313      	orrs	r3, r2
 800369c:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	68fa      	ldr	r2, [r7, #12]
 80036a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	689a      	ldr	r2, [r3, #8]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	0011      	movs	r1, r2
 80036ac:	0018      	movs	r0, r3
 80036ae:	f7ff ff99 	bl	80035e4 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	881b      	ldrh	r3, [r3, #0]
 80036b6:	001a      	movs	r2, r3
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	0011      	movs	r1, r2
 80036bc:	0018      	movs	r0, r3
 80036be:	f7ff ff85 	bl	80035cc <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	4a0f      	ldr	r2, [pc, #60]	; (8003704 <LL_TIM_Init+0xd4>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d00b      	beq.n	80036e2 <LL_TIM_Init+0xb2>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	4a10      	ldr	r2, [pc, #64]	; (8003710 <LL_TIM_Init+0xe0>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d007      	beq.n	80036e2 <LL_TIM_Init+0xb2>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	4a0f      	ldr	r2, [pc, #60]	; (8003714 <LL_TIM_Init+0xe4>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d003      	beq.n	80036e2 <LL_TIM_Init+0xb2>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	4a0e      	ldr	r2, [pc, #56]	; (8003718 <LL_TIM_Init+0xe8>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d106      	bne.n	80036f0 <LL_TIM_Init+0xc0>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	691a      	ldr	r2, [r3, #16]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	0011      	movs	r1, r2
 80036ea:	0018      	movs	r0, r3
 80036ec:	f7ff ff86 	bl	80035fc <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	0018      	movs	r0, r3
 80036f4:	f7ff ff8e 	bl	8003614 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 80036f8:	2300      	movs	r3, #0
}
 80036fa:	0018      	movs	r0, r3
 80036fc:	46bd      	mov	sp, r7
 80036fe:	b004      	add	sp, #16
 8003700:	bd80      	pop	{r7, pc}
 8003702:	46c0      	nop			; (mov r8, r8)
 8003704:	40012c00 	.word	0x40012c00
 8003708:	40000400 	.word	0x40000400
 800370c:	40002000 	.word	0x40002000
 8003710:	40014000 	.word	0x40014000
 8003714:	40014400 	.word	0x40014400
 8003718:	40014800 	.word	0x40014800
 800371c:	fffffcff 	.word	0xfffffcff

08003720 <LL_USART_IsEnabled>:
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b082      	sub	sp, #8
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	2201      	movs	r2, #1
 800372e:	4013      	ands	r3, r2
 8003730:	2b01      	cmp	r3, #1
 8003732:	d101      	bne.n	8003738 <LL_USART_IsEnabled+0x18>
 8003734:	2301      	movs	r3, #1
 8003736:	e000      	b.n	800373a <LL_USART_IsEnabled+0x1a>
 8003738:	2300      	movs	r3, #0
}
 800373a:	0018      	movs	r0, r3
 800373c:	46bd      	mov	sp, r7
 800373e:	b002      	add	sp, #8
 8003740:	bd80      	pop	{r7, pc}
	...

08003744 <LL_USART_SetStopBitsLength>:
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b082      	sub	sp, #8
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
 800374c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	4a05      	ldr	r2, [pc, #20]	; (8003768 <LL_USART_SetStopBitsLength+0x24>)
 8003754:	401a      	ands	r2, r3
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	431a      	orrs	r2, r3
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	605a      	str	r2, [r3, #4]
}
 800375e:	46c0      	nop			; (mov r8, r8)
 8003760:	46bd      	mov	sp, r7
 8003762:	b002      	add	sp, #8
 8003764:	bd80      	pop	{r7, pc}
 8003766:	46c0      	nop			; (mov r8, r8)
 8003768:	ffffcfff 	.word	0xffffcfff

0800376c <LL_USART_SetHWFlowCtrl>:
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b082      	sub	sp, #8
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
 8003774:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	689b      	ldr	r3, [r3, #8]
 800377a:	4a05      	ldr	r2, [pc, #20]	; (8003790 <LL_USART_SetHWFlowCtrl+0x24>)
 800377c:	401a      	ands	r2, r3
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	431a      	orrs	r2, r3
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	609a      	str	r2, [r3, #8]
}
 8003786:	46c0      	nop			; (mov r8, r8)
 8003788:	46bd      	mov	sp, r7
 800378a:	b002      	add	sp, #8
 800378c:	bd80      	pop	{r7, pc}
 800378e:	46c0      	nop			; (mov r8, r8)
 8003790:	fffffcff 	.word	0xfffffcff

08003794 <LL_USART_SetBaudRate>:
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b086      	sub	sp, #24
 8003798:	af00      	add	r7, sp, #0
 800379a:	60f8      	str	r0, [r7, #12]
 800379c:	60b9      	str	r1, [r7, #8]
 800379e:	607a      	str	r2, [r7, #4]
 80037a0:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 80037a2:	687a      	ldr	r2, [r7, #4]
 80037a4:	2380      	movs	r3, #128	; 0x80
 80037a6:	021b      	lsls	r3, r3, #8
 80037a8:	429a      	cmp	r2, r3
 80037aa:	d11c      	bne.n	80037e6 <LL_USART_SetBaudRate+0x52>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	005a      	lsls	r2, r3, #1
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	085b      	lsrs	r3, r3, #1
 80037b4:	18d3      	adds	r3, r2, r3
 80037b6:	6839      	ldr	r1, [r7, #0]
 80037b8:	0018      	movs	r0, r3
 80037ba:	f7fc fca5 	bl	8000108 <__udivsi3>
 80037be:	0003      	movs	r3, r0
 80037c0:	b29b      	uxth	r3, r3
 80037c2:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	4a10      	ldr	r2, [pc, #64]	; (8003808 <LL_USART_SetBaudRate+0x74>)
 80037c8:	4013      	ands	r3, r2
 80037ca:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	085b      	lsrs	r3, r3, #1
 80037d0:	b29b      	uxth	r3, r3
 80037d2:	001a      	movs	r2, r3
 80037d4:	2307      	movs	r3, #7
 80037d6:	4013      	ands	r3, r2
 80037d8:	693a      	ldr	r2, [r7, #16]
 80037da:	4313      	orrs	r3, r2
 80037dc:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	693a      	ldr	r2, [r7, #16]
 80037e2:	60da      	str	r2, [r3, #12]
}
 80037e4:	e00c      	b.n	8003800 <LL_USART_SetBaudRate+0x6c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	085a      	lsrs	r2, r3, #1
 80037ea:	68bb      	ldr	r3, [r7, #8]
 80037ec:	18d3      	adds	r3, r2, r3
 80037ee:	6839      	ldr	r1, [r7, #0]
 80037f0:	0018      	movs	r0, r3
 80037f2:	f7fc fc89 	bl	8000108 <__udivsi3>
 80037f6:	0003      	movs	r3, r0
 80037f8:	b29b      	uxth	r3, r3
 80037fa:	001a      	movs	r2, r3
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	60da      	str	r2, [r3, #12]
}
 8003800:	46c0      	nop			; (mov r8, r8)
 8003802:	46bd      	mov	sp, r7
 8003804:	b006      	add	sp, #24
 8003806:	bd80      	pop	{r7, pc}
 8003808:	0000fff0 	.word	0x0000fff0

0800380c <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 800380c:	b590      	push	{r4, r7, lr}
 800380e:	b089      	sub	sp, #36	; 0x24
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
 8003814:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8003816:	231f      	movs	r3, #31
 8003818:	18fb      	adds	r3, r7, r3
 800381a:	2201      	movs	r2, #1
 800381c:	701a      	strb	r2, [r3, #0]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 800381e:	2300      	movs	r3, #0
 8003820:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	0018      	movs	r0, r3
 8003826:	f7ff ff7b 	bl	8003720 <LL_USART_IsEnabled>
 800382a:	1e03      	subs	r3, r0, #0
 800382c:	d148      	bne.n	80038c0 <LL_USART_Init+0xb4>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a27      	ldr	r2, [pc, #156]	; (80038d0 <LL_USART_Init+0xc4>)
 8003834:	401a      	ands	r2, r3
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	6859      	ldr	r1, [r3, #4]
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	68db      	ldr	r3, [r3, #12]
 800383e:	4319      	orrs	r1, r3
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	691b      	ldr	r3, [r3, #16]
 8003844:	4319      	orrs	r1, r3
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	699b      	ldr	r3, [r3, #24]
 800384a:	430b      	orrs	r3, r1
 800384c:	431a      	orrs	r2, r3
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	689a      	ldr	r2, [r3, #8]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	0011      	movs	r1, r2
 800385a:	0018      	movs	r0, r3
 800385c:	f7ff ff72 	bl	8003744 <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	695a      	ldr	r2, [r3, #20]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	0011      	movs	r1, r2
 8003868:	0018      	movs	r0, r3
 800386a:	f7ff ff7f 	bl	800376c <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	4a18      	ldr	r2, [pc, #96]	; (80038d4 <LL_USART_Init+0xc8>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d105      	bne.n	8003882 <LL_USART_Init+0x76>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 8003876:	2000      	movs	r0, #0
 8003878:	f7ff fddc 	bl	8003434 <LL_RCC_GetUSARTClockFreq>
 800387c:	0003      	movs	r3, r0
 800387e:	61bb      	str	r3, [r7, #24]
 8003880:	e00b      	b.n	800389a <LL_USART_Init+0x8e>
    }
#if defined(USART2)
    else if (USARTx == USART2)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	4a14      	ldr	r2, [pc, #80]	; (80038d8 <LL_USART_Init+0xcc>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d107      	bne.n	800389a <LL_USART_Init+0x8e>
    {
#if defined(RCC_CFGR3_USART2SW)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
#else
      /* USART2 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 800388a:	240c      	movs	r4, #12
 800388c:	193b      	adds	r3, r7, r4
 800388e:	0018      	movs	r0, r3
 8003890:	f7ff fdb2 	bl	80033f8 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 8003894:	193b      	adds	r3, r7, r4
 8003896:	689b      	ldr	r3, [r3, #8]
 8003898:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 800389a:	69bb      	ldr	r3, [r7, #24]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d00f      	beq.n	80038c0 <LL_USART_Init+0xb4>
        && (USART_InitStruct->BaudRate != 0U))
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d00b      	beq.n	80038c0 <LL_USART_Init+0xb4>
    {
      status = SUCCESS;
 80038a8:	231f      	movs	r3, #31
 80038aa:	18fb      	adds	r3, r7, r3
 80038ac:	2200      	movs	r2, #0
 80038ae:	701a      	strb	r2, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	699a      	ldr	r2, [r3, #24]
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	69b9      	ldr	r1, [r7, #24]
 80038ba:	6878      	ldr	r0, [r7, #4]
 80038bc:	f7ff ff6a 	bl	8003794 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MAX(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 80038c0:	231f      	movs	r3, #31
 80038c2:	18fb      	adds	r3, r7, r3
 80038c4:	781b      	ldrb	r3, [r3, #0]
}
 80038c6:	0018      	movs	r0, r3
 80038c8:	46bd      	mov	sp, r7
 80038ca:	b009      	add	sp, #36	; 0x24
 80038cc:	bd90      	pop	{r4, r7, pc}
 80038ce:	46c0      	nop			; (mov r8, r8)
 80038d0:	ffff69f3 	.word	0xffff69f3
 80038d4:	40013800 	.word	0x40013800
 80038d8:	40004400 	.word	0x40004400

080038dc <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b082      	sub	sp, #8
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
 80038e4:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 80038e6:	6839      	ldr	r1, [r7, #0]
 80038e8:	6878      	ldr	r0, [r7, #4]
 80038ea:	f7fc fc0d 	bl	8000108 <__udivsi3>
 80038ee:	0003      	movs	r3, r0
 80038f0:	001a      	movs	r2, r3
 80038f2:	4b06      	ldr	r3, [pc, #24]	; (800390c <LL_InitTick+0x30>)
 80038f4:	3a01      	subs	r2, #1
 80038f6:	605a      	str	r2, [r3, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 80038f8:	4b04      	ldr	r3, [pc, #16]	; (800390c <LL_InitTick+0x30>)
 80038fa:	2200      	movs	r2, #0
 80038fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80038fe:	4b03      	ldr	r3, [pc, #12]	; (800390c <LL_InitTick+0x30>)
 8003900:	2205      	movs	r2, #5
 8003902:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8003904:	46c0      	nop			; (mov r8, r8)
 8003906:	46bd      	mov	sp, r7
 8003908:	b002      	add	sp, #8
 800390a:	bd80      	pop	{r7, pc}
 800390c:	e000e010 	.word	0xe000e010

08003910 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b082      	sub	sp, #8
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8003918:	23fa      	movs	r3, #250	; 0xfa
 800391a:	009a      	lsls	r2, r3, #2
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	0011      	movs	r1, r2
 8003920:	0018      	movs	r0, r3
 8003922:	f7ff ffdb 	bl	80038dc <LL_InitTick>
}
 8003926:	46c0      	nop			; (mov r8, r8)
 8003928:	46bd      	mov	sp, r7
 800392a:	b002      	add	sp, #8
 800392c:	bd80      	pop	{r7, pc}
	...

08003930 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b084      	sub	sp, #16
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8003938:	4b0d      	ldr	r3, [pc, #52]	; (8003970 <LL_mDelay+0x40>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 800393e:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	3301      	adds	r3, #1
 8003944:	d00c      	beq.n	8003960 <LL_mDelay+0x30>
  {
    Delay++;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	3301      	adds	r3, #1
 800394a:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 800394c:	e008      	b.n	8003960 <LL_mDelay+0x30>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 800394e:	4b08      	ldr	r3, [pc, #32]	; (8003970 <LL_mDelay+0x40>)
 8003950:	681a      	ldr	r2, [r3, #0]
 8003952:	2380      	movs	r3, #128	; 0x80
 8003954:	025b      	lsls	r3, r3, #9
 8003956:	4013      	ands	r3, r2
 8003958:	d002      	beq.n	8003960 <LL_mDelay+0x30>
    {
      Delay--;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	3b01      	subs	r3, #1
 800395e:	607b      	str	r3, [r7, #4]
  while (Delay)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d1f3      	bne.n	800394e <LL_mDelay+0x1e>
    }
  }
}
 8003966:	46c0      	nop			; (mov r8, r8)
 8003968:	46c0      	nop			; (mov r8, r8)
 800396a:	46bd      	mov	sp, r7
 800396c:	b004      	add	sp, #16
 800396e:	bd80      	pop	{r7, pc}
 8003970:	e000e010 	.word	0xe000e010

08003974 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b082      	sub	sp, #8
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 800397c:	4b03      	ldr	r3, [pc, #12]	; (800398c <LL_SetSystemCoreClock+0x18>)
 800397e:	687a      	ldr	r2, [r7, #4]
 8003980:	601a      	str	r2, [r3, #0]
}
 8003982:	46c0      	nop			; (mov r8, r8)
 8003984:	46bd      	mov	sp, r7
 8003986:	b002      	add	sp, #8
 8003988:	bd80      	pop	{r7, pc}
 800398a:	46c0      	nop			; (mov r8, r8)
 800398c:	20000000 	.word	0x20000000

08003990 <__libc_init_array>:
 8003990:	b570      	push	{r4, r5, r6, lr}
 8003992:	2600      	movs	r6, #0
 8003994:	4d0c      	ldr	r5, [pc, #48]	; (80039c8 <__libc_init_array+0x38>)
 8003996:	4c0d      	ldr	r4, [pc, #52]	; (80039cc <__libc_init_array+0x3c>)
 8003998:	1b64      	subs	r4, r4, r5
 800399a:	10a4      	asrs	r4, r4, #2
 800399c:	42a6      	cmp	r6, r4
 800399e:	d109      	bne.n	80039b4 <__libc_init_array+0x24>
 80039a0:	2600      	movs	r6, #0
 80039a2:	f000 f821 	bl	80039e8 <_init>
 80039a6:	4d0a      	ldr	r5, [pc, #40]	; (80039d0 <__libc_init_array+0x40>)
 80039a8:	4c0a      	ldr	r4, [pc, #40]	; (80039d4 <__libc_init_array+0x44>)
 80039aa:	1b64      	subs	r4, r4, r5
 80039ac:	10a4      	asrs	r4, r4, #2
 80039ae:	42a6      	cmp	r6, r4
 80039b0:	d105      	bne.n	80039be <__libc_init_array+0x2e>
 80039b2:	bd70      	pop	{r4, r5, r6, pc}
 80039b4:	00b3      	lsls	r3, r6, #2
 80039b6:	58eb      	ldr	r3, [r5, r3]
 80039b8:	4798      	blx	r3
 80039ba:	3601      	adds	r6, #1
 80039bc:	e7ee      	b.n	800399c <__libc_init_array+0xc>
 80039be:	00b3      	lsls	r3, r6, #2
 80039c0:	58eb      	ldr	r3, [r5, r3]
 80039c2:	4798      	blx	r3
 80039c4:	3601      	adds	r6, #1
 80039c6:	e7f2      	b.n	80039ae <__libc_init_array+0x1e>
 80039c8:	08003a60 	.word	0x08003a60
 80039cc:	08003a60 	.word	0x08003a60
 80039d0:	08003a60 	.word	0x08003a60
 80039d4:	08003a64 	.word	0x08003a64

080039d8 <memset>:
 80039d8:	0003      	movs	r3, r0
 80039da:	1882      	adds	r2, r0, r2
 80039dc:	4293      	cmp	r3, r2
 80039de:	d100      	bne.n	80039e2 <memset+0xa>
 80039e0:	4770      	bx	lr
 80039e2:	7019      	strb	r1, [r3, #0]
 80039e4:	3301      	adds	r3, #1
 80039e6:	e7f9      	b.n	80039dc <memset+0x4>

080039e8 <_init>:
 80039e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039ea:	46c0      	nop			; (mov r8, r8)
 80039ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039ee:	bc08      	pop	{r3}
 80039f0:	469e      	mov	lr, r3
 80039f2:	4770      	bx	lr

080039f4 <_fini>:
 80039f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039f6:	46c0      	nop			; (mov r8, r8)
 80039f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039fa:	bc08      	pop	{r3}
 80039fc:	469e      	mov	lr, r3
 80039fe:	4770      	bx	lr
