
generator75kwf1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a70  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08003b30  08003b30  00013b30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003b98  08003b98  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08003b98  08003b98  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003b98  08003b98  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003b98  08003b98  00013b98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003b9c  08003b9c  00013b9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08003ba0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003ac  20000004  08003ba4  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003b0  08003ba4  000203b0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007078  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b7c  00000000  00000000  000270a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008d0  00000000  00000000  00028c20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000007d8  00000000  00000000  000294f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000bd8c  00000000  00000000  00029cc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007366  00000000  00000000  00035a54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0003df58  00000000  00000000  0003cdba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0007ad12  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001f68  00000000  00000000  0007ad68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000004 	.word	0x20000004
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003b18 	.word	0x08003b18

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000008 	.word	0x20000008
 8000104:	08003b18 	.word	0x08003b18

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_cdrcmple>:
 8000220:	4684      	mov	ip, r0
 8000222:	1c10      	adds	r0, r2, #0
 8000224:	4662      	mov	r2, ip
 8000226:	468c      	mov	ip, r1
 8000228:	1c19      	adds	r1, r3, #0
 800022a:	4663      	mov	r3, ip
 800022c:	e000      	b.n	8000230 <__aeabi_cdcmpeq>
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <__aeabi_cdcmpeq>:
 8000230:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000232:	f000 fb39 	bl	80008a8 <__ledf2>
 8000236:	2800      	cmp	r0, #0
 8000238:	d401      	bmi.n	800023e <__aeabi_cdcmpeq+0xe>
 800023a:	2100      	movs	r1, #0
 800023c:	42c8      	cmn	r0, r1
 800023e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000240 <__aeabi_dcmpeq>:
 8000240:	b510      	push	{r4, lr}
 8000242:	f000 fa83 	bl	800074c <__eqdf2>
 8000246:	4240      	negs	r0, r0
 8000248:	3001      	adds	r0, #1
 800024a:	bd10      	pop	{r4, pc}

0800024c <__aeabi_dcmplt>:
 800024c:	b510      	push	{r4, lr}
 800024e:	f000 fb2b 	bl	80008a8 <__ledf2>
 8000252:	2800      	cmp	r0, #0
 8000254:	db01      	blt.n	800025a <__aeabi_dcmplt+0xe>
 8000256:	2000      	movs	r0, #0
 8000258:	bd10      	pop	{r4, pc}
 800025a:	2001      	movs	r0, #1
 800025c:	bd10      	pop	{r4, pc}
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_dcmple>:
 8000260:	b510      	push	{r4, lr}
 8000262:	f000 fb21 	bl	80008a8 <__ledf2>
 8000266:	2800      	cmp	r0, #0
 8000268:	dd01      	ble.n	800026e <__aeabi_dcmple+0xe>
 800026a:	2000      	movs	r0, #0
 800026c:	bd10      	pop	{r4, pc}
 800026e:	2001      	movs	r0, #1
 8000270:	bd10      	pop	{r4, pc}
 8000272:	46c0      	nop			; (mov r8, r8)

08000274 <__aeabi_dcmpgt>:
 8000274:	b510      	push	{r4, lr}
 8000276:	f000 faa5 	bl	80007c4 <__gedf2>
 800027a:	2800      	cmp	r0, #0
 800027c:	dc01      	bgt.n	8000282 <__aeabi_dcmpgt+0xe>
 800027e:	2000      	movs	r0, #0
 8000280:	bd10      	pop	{r4, pc}
 8000282:	2001      	movs	r0, #1
 8000284:	bd10      	pop	{r4, pc}
 8000286:	46c0      	nop			; (mov r8, r8)

08000288 <__aeabi_dcmpge>:
 8000288:	b510      	push	{r4, lr}
 800028a:	f000 fa9b 	bl	80007c4 <__gedf2>
 800028e:	2800      	cmp	r0, #0
 8000290:	da01      	bge.n	8000296 <__aeabi_dcmpge+0xe>
 8000292:	2000      	movs	r0, #0
 8000294:	bd10      	pop	{r4, pc}
 8000296:	2001      	movs	r0, #1
 8000298:	bd10      	pop	{r4, pc}
 800029a:	46c0      	nop			; (mov r8, r8)

0800029c <__aeabi_cfrcmple>:
 800029c:	4684      	mov	ip, r0
 800029e:	1c08      	adds	r0, r1, #0
 80002a0:	4661      	mov	r1, ip
 80002a2:	e7ff      	b.n	80002a4 <__aeabi_cfcmpeq>

080002a4 <__aeabi_cfcmpeq>:
 80002a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80002a6:	f000 f8a7 	bl	80003f8 <__lesf2>
 80002aa:	2800      	cmp	r0, #0
 80002ac:	d401      	bmi.n	80002b2 <__aeabi_cfcmpeq+0xe>
 80002ae:	2100      	movs	r1, #0
 80002b0:	42c8      	cmn	r0, r1
 80002b2:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080002b4 <__aeabi_fcmpeq>:
 80002b4:	b510      	push	{r4, lr}
 80002b6:	f000 f82b 	bl	8000310 <__eqsf2>
 80002ba:	4240      	negs	r0, r0
 80002bc:	3001      	adds	r0, #1
 80002be:	bd10      	pop	{r4, pc}

080002c0 <__aeabi_fcmplt>:
 80002c0:	b510      	push	{r4, lr}
 80002c2:	f000 f899 	bl	80003f8 <__lesf2>
 80002c6:	2800      	cmp	r0, #0
 80002c8:	db01      	blt.n	80002ce <__aeabi_fcmplt+0xe>
 80002ca:	2000      	movs	r0, #0
 80002cc:	bd10      	pop	{r4, pc}
 80002ce:	2001      	movs	r0, #1
 80002d0:	bd10      	pop	{r4, pc}
 80002d2:	46c0      	nop			; (mov r8, r8)

080002d4 <__aeabi_fcmple>:
 80002d4:	b510      	push	{r4, lr}
 80002d6:	f000 f88f 	bl	80003f8 <__lesf2>
 80002da:	2800      	cmp	r0, #0
 80002dc:	dd01      	ble.n	80002e2 <__aeabi_fcmple+0xe>
 80002de:	2000      	movs	r0, #0
 80002e0:	bd10      	pop	{r4, pc}
 80002e2:	2001      	movs	r0, #1
 80002e4:	bd10      	pop	{r4, pc}
 80002e6:	46c0      	nop			; (mov r8, r8)

080002e8 <__aeabi_fcmpgt>:
 80002e8:	b510      	push	{r4, lr}
 80002ea:	f000 f839 	bl	8000360 <__gesf2>
 80002ee:	2800      	cmp	r0, #0
 80002f0:	dc01      	bgt.n	80002f6 <__aeabi_fcmpgt+0xe>
 80002f2:	2000      	movs	r0, #0
 80002f4:	bd10      	pop	{r4, pc}
 80002f6:	2001      	movs	r0, #1
 80002f8:	bd10      	pop	{r4, pc}
 80002fa:	46c0      	nop			; (mov r8, r8)

080002fc <__aeabi_fcmpge>:
 80002fc:	b510      	push	{r4, lr}
 80002fe:	f000 f82f 	bl	8000360 <__gesf2>
 8000302:	2800      	cmp	r0, #0
 8000304:	da01      	bge.n	800030a <__aeabi_fcmpge+0xe>
 8000306:	2000      	movs	r0, #0
 8000308:	bd10      	pop	{r4, pc}
 800030a:	2001      	movs	r0, #1
 800030c:	bd10      	pop	{r4, pc}
 800030e:	46c0      	nop			; (mov r8, r8)

08000310 <__eqsf2>:
 8000310:	b570      	push	{r4, r5, r6, lr}
 8000312:	0042      	lsls	r2, r0, #1
 8000314:	024e      	lsls	r6, r1, #9
 8000316:	004c      	lsls	r4, r1, #1
 8000318:	0245      	lsls	r5, r0, #9
 800031a:	0a6d      	lsrs	r5, r5, #9
 800031c:	0e12      	lsrs	r2, r2, #24
 800031e:	0fc3      	lsrs	r3, r0, #31
 8000320:	0a76      	lsrs	r6, r6, #9
 8000322:	0e24      	lsrs	r4, r4, #24
 8000324:	0fc9      	lsrs	r1, r1, #31
 8000326:	2aff      	cmp	r2, #255	; 0xff
 8000328:	d00f      	beq.n	800034a <__eqsf2+0x3a>
 800032a:	2cff      	cmp	r4, #255	; 0xff
 800032c:	d011      	beq.n	8000352 <__eqsf2+0x42>
 800032e:	2001      	movs	r0, #1
 8000330:	42a2      	cmp	r2, r4
 8000332:	d000      	beq.n	8000336 <__eqsf2+0x26>
 8000334:	bd70      	pop	{r4, r5, r6, pc}
 8000336:	42b5      	cmp	r5, r6
 8000338:	d1fc      	bne.n	8000334 <__eqsf2+0x24>
 800033a:	428b      	cmp	r3, r1
 800033c:	d00d      	beq.n	800035a <__eqsf2+0x4a>
 800033e:	2a00      	cmp	r2, #0
 8000340:	d1f8      	bne.n	8000334 <__eqsf2+0x24>
 8000342:	0028      	movs	r0, r5
 8000344:	1e45      	subs	r5, r0, #1
 8000346:	41a8      	sbcs	r0, r5
 8000348:	e7f4      	b.n	8000334 <__eqsf2+0x24>
 800034a:	2001      	movs	r0, #1
 800034c:	2d00      	cmp	r5, #0
 800034e:	d1f1      	bne.n	8000334 <__eqsf2+0x24>
 8000350:	e7eb      	b.n	800032a <__eqsf2+0x1a>
 8000352:	2001      	movs	r0, #1
 8000354:	2e00      	cmp	r6, #0
 8000356:	d1ed      	bne.n	8000334 <__eqsf2+0x24>
 8000358:	e7e9      	b.n	800032e <__eqsf2+0x1e>
 800035a:	2000      	movs	r0, #0
 800035c:	e7ea      	b.n	8000334 <__eqsf2+0x24>
 800035e:	46c0      	nop			; (mov r8, r8)

08000360 <__gesf2>:
 8000360:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000362:	0042      	lsls	r2, r0, #1
 8000364:	0246      	lsls	r6, r0, #9
 8000366:	024d      	lsls	r5, r1, #9
 8000368:	004c      	lsls	r4, r1, #1
 800036a:	0fc3      	lsrs	r3, r0, #31
 800036c:	0a76      	lsrs	r6, r6, #9
 800036e:	0e12      	lsrs	r2, r2, #24
 8000370:	0a6d      	lsrs	r5, r5, #9
 8000372:	0e24      	lsrs	r4, r4, #24
 8000374:	0fc8      	lsrs	r0, r1, #31
 8000376:	2aff      	cmp	r2, #255	; 0xff
 8000378:	d01f      	beq.n	80003ba <__gesf2+0x5a>
 800037a:	2cff      	cmp	r4, #255	; 0xff
 800037c:	d010      	beq.n	80003a0 <__gesf2+0x40>
 800037e:	2a00      	cmp	r2, #0
 8000380:	d11f      	bne.n	80003c2 <__gesf2+0x62>
 8000382:	4271      	negs	r1, r6
 8000384:	4171      	adcs	r1, r6
 8000386:	2c00      	cmp	r4, #0
 8000388:	d101      	bne.n	800038e <__gesf2+0x2e>
 800038a:	2d00      	cmp	r5, #0
 800038c:	d01e      	beq.n	80003cc <__gesf2+0x6c>
 800038e:	2900      	cmp	r1, #0
 8000390:	d10e      	bne.n	80003b0 <__gesf2+0x50>
 8000392:	4283      	cmp	r3, r0
 8000394:	d01e      	beq.n	80003d4 <__gesf2+0x74>
 8000396:	2102      	movs	r1, #2
 8000398:	1e58      	subs	r0, r3, #1
 800039a:	4008      	ands	r0, r1
 800039c:	3801      	subs	r0, #1
 800039e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80003a0:	2d00      	cmp	r5, #0
 80003a2:	d126      	bne.n	80003f2 <__gesf2+0x92>
 80003a4:	2a00      	cmp	r2, #0
 80003a6:	d1f4      	bne.n	8000392 <__gesf2+0x32>
 80003a8:	4271      	negs	r1, r6
 80003aa:	4171      	adcs	r1, r6
 80003ac:	2900      	cmp	r1, #0
 80003ae:	d0f0      	beq.n	8000392 <__gesf2+0x32>
 80003b0:	2800      	cmp	r0, #0
 80003b2:	d1f4      	bne.n	800039e <__gesf2+0x3e>
 80003b4:	2001      	movs	r0, #1
 80003b6:	4240      	negs	r0, r0
 80003b8:	e7f1      	b.n	800039e <__gesf2+0x3e>
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	d119      	bne.n	80003f2 <__gesf2+0x92>
 80003be:	2cff      	cmp	r4, #255	; 0xff
 80003c0:	d0ee      	beq.n	80003a0 <__gesf2+0x40>
 80003c2:	2c00      	cmp	r4, #0
 80003c4:	d1e5      	bne.n	8000392 <__gesf2+0x32>
 80003c6:	2d00      	cmp	r5, #0
 80003c8:	d1e3      	bne.n	8000392 <__gesf2+0x32>
 80003ca:	e7e4      	b.n	8000396 <__gesf2+0x36>
 80003cc:	2000      	movs	r0, #0
 80003ce:	2e00      	cmp	r6, #0
 80003d0:	d0e5      	beq.n	800039e <__gesf2+0x3e>
 80003d2:	e7e0      	b.n	8000396 <__gesf2+0x36>
 80003d4:	42a2      	cmp	r2, r4
 80003d6:	dc05      	bgt.n	80003e4 <__gesf2+0x84>
 80003d8:	dbea      	blt.n	80003b0 <__gesf2+0x50>
 80003da:	42ae      	cmp	r6, r5
 80003dc:	d802      	bhi.n	80003e4 <__gesf2+0x84>
 80003de:	d3e7      	bcc.n	80003b0 <__gesf2+0x50>
 80003e0:	2000      	movs	r0, #0
 80003e2:	e7dc      	b.n	800039e <__gesf2+0x3e>
 80003e4:	4241      	negs	r1, r0
 80003e6:	4141      	adcs	r1, r0
 80003e8:	4248      	negs	r0, r1
 80003ea:	2102      	movs	r1, #2
 80003ec:	4008      	ands	r0, r1
 80003ee:	3801      	subs	r0, #1
 80003f0:	e7d5      	b.n	800039e <__gesf2+0x3e>
 80003f2:	2002      	movs	r0, #2
 80003f4:	4240      	negs	r0, r0
 80003f6:	e7d2      	b.n	800039e <__gesf2+0x3e>

080003f8 <__lesf2>:
 80003f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80003fa:	0042      	lsls	r2, r0, #1
 80003fc:	0246      	lsls	r6, r0, #9
 80003fe:	024d      	lsls	r5, r1, #9
 8000400:	004c      	lsls	r4, r1, #1
 8000402:	0fc3      	lsrs	r3, r0, #31
 8000404:	0a76      	lsrs	r6, r6, #9
 8000406:	0e12      	lsrs	r2, r2, #24
 8000408:	0a6d      	lsrs	r5, r5, #9
 800040a:	0e24      	lsrs	r4, r4, #24
 800040c:	0fc8      	lsrs	r0, r1, #31
 800040e:	2aff      	cmp	r2, #255	; 0xff
 8000410:	d00d      	beq.n	800042e <__lesf2+0x36>
 8000412:	2cff      	cmp	r4, #255	; 0xff
 8000414:	d00f      	beq.n	8000436 <__lesf2+0x3e>
 8000416:	2a00      	cmp	r2, #0
 8000418:	d123      	bne.n	8000462 <__lesf2+0x6a>
 800041a:	4271      	negs	r1, r6
 800041c:	4171      	adcs	r1, r6
 800041e:	2c00      	cmp	r4, #0
 8000420:	d10f      	bne.n	8000442 <__lesf2+0x4a>
 8000422:	2d00      	cmp	r5, #0
 8000424:	d10d      	bne.n	8000442 <__lesf2+0x4a>
 8000426:	2000      	movs	r0, #0
 8000428:	2e00      	cmp	r6, #0
 800042a:	d014      	beq.n	8000456 <__lesf2+0x5e>
 800042c:	e00d      	b.n	800044a <__lesf2+0x52>
 800042e:	2e00      	cmp	r6, #0
 8000430:	d110      	bne.n	8000454 <__lesf2+0x5c>
 8000432:	2cff      	cmp	r4, #255	; 0xff
 8000434:	d115      	bne.n	8000462 <__lesf2+0x6a>
 8000436:	2d00      	cmp	r5, #0
 8000438:	d10c      	bne.n	8000454 <__lesf2+0x5c>
 800043a:	2a00      	cmp	r2, #0
 800043c:	d103      	bne.n	8000446 <__lesf2+0x4e>
 800043e:	4271      	negs	r1, r6
 8000440:	4171      	adcs	r1, r6
 8000442:	2900      	cmp	r1, #0
 8000444:	d108      	bne.n	8000458 <__lesf2+0x60>
 8000446:	4283      	cmp	r3, r0
 8000448:	d010      	beq.n	800046c <__lesf2+0x74>
 800044a:	2102      	movs	r1, #2
 800044c:	1e58      	subs	r0, r3, #1
 800044e:	4008      	ands	r0, r1
 8000450:	3801      	subs	r0, #1
 8000452:	e000      	b.n	8000456 <__lesf2+0x5e>
 8000454:	2002      	movs	r0, #2
 8000456:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000458:	2800      	cmp	r0, #0
 800045a:	d1fc      	bne.n	8000456 <__lesf2+0x5e>
 800045c:	2001      	movs	r0, #1
 800045e:	4240      	negs	r0, r0
 8000460:	e7f9      	b.n	8000456 <__lesf2+0x5e>
 8000462:	2c00      	cmp	r4, #0
 8000464:	d1ef      	bne.n	8000446 <__lesf2+0x4e>
 8000466:	2d00      	cmp	r5, #0
 8000468:	d1ed      	bne.n	8000446 <__lesf2+0x4e>
 800046a:	e7ee      	b.n	800044a <__lesf2+0x52>
 800046c:	42a2      	cmp	r2, r4
 800046e:	dc05      	bgt.n	800047c <__lesf2+0x84>
 8000470:	dbf2      	blt.n	8000458 <__lesf2+0x60>
 8000472:	42ae      	cmp	r6, r5
 8000474:	d802      	bhi.n	800047c <__lesf2+0x84>
 8000476:	d3ef      	bcc.n	8000458 <__lesf2+0x60>
 8000478:	2000      	movs	r0, #0
 800047a:	e7ec      	b.n	8000456 <__lesf2+0x5e>
 800047c:	4241      	negs	r1, r0
 800047e:	4141      	adcs	r1, r0
 8000480:	4248      	negs	r0, r1
 8000482:	2102      	movs	r1, #2
 8000484:	4008      	ands	r0, r1
 8000486:	3801      	subs	r0, #1
 8000488:	e7e5      	b.n	8000456 <__lesf2+0x5e>
 800048a:	46c0      	nop			; (mov r8, r8)

0800048c <__aeabi_fmul>:
 800048c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800048e:	4657      	mov	r7, sl
 8000490:	464e      	mov	r6, r9
 8000492:	4645      	mov	r5, r8
 8000494:	46de      	mov	lr, fp
 8000496:	0244      	lsls	r4, r0, #9
 8000498:	b5e0      	push	{r5, r6, r7, lr}
 800049a:	0045      	lsls	r5, r0, #1
 800049c:	1c0f      	adds	r7, r1, #0
 800049e:	0a64      	lsrs	r4, r4, #9
 80004a0:	0e2d      	lsrs	r5, r5, #24
 80004a2:	0fc6      	lsrs	r6, r0, #31
 80004a4:	2d00      	cmp	r5, #0
 80004a6:	d047      	beq.n	8000538 <__aeabi_fmul+0xac>
 80004a8:	2dff      	cmp	r5, #255	; 0xff
 80004aa:	d04d      	beq.n	8000548 <__aeabi_fmul+0xbc>
 80004ac:	2300      	movs	r3, #0
 80004ae:	2080      	movs	r0, #128	; 0x80
 80004b0:	469a      	mov	sl, r3
 80004b2:	469b      	mov	fp, r3
 80004b4:	00e4      	lsls	r4, r4, #3
 80004b6:	04c0      	lsls	r0, r0, #19
 80004b8:	4304      	orrs	r4, r0
 80004ba:	3d7f      	subs	r5, #127	; 0x7f
 80004bc:	0278      	lsls	r0, r7, #9
 80004be:	0a43      	lsrs	r3, r0, #9
 80004c0:	4699      	mov	r9, r3
 80004c2:	007a      	lsls	r2, r7, #1
 80004c4:	0ffb      	lsrs	r3, r7, #31
 80004c6:	4698      	mov	r8, r3
 80004c8:	0e12      	lsrs	r2, r2, #24
 80004ca:	464b      	mov	r3, r9
 80004cc:	d044      	beq.n	8000558 <__aeabi_fmul+0xcc>
 80004ce:	2aff      	cmp	r2, #255	; 0xff
 80004d0:	d011      	beq.n	80004f6 <__aeabi_fmul+0x6a>
 80004d2:	00d8      	lsls	r0, r3, #3
 80004d4:	2380      	movs	r3, #128	; 0x80
 80004d6:	04db      	lsls	r3, r3, #19
 80004d8:	4303      	orrs	r3, r0
 80004da:	4699      	mov	r9, r3
 80004dc:	2000      	movs	r0, #0
 80004de:	3a7f      	subs	r2, #127	; 0x7f
 80004e0:	18ad      	adds	r5, r5, r2
 80004e2:	4647      	mov	r7, r8
 80004e4:	4653      	mov	r3, sl
 80004e6:	4077      	eors	r7, r6
 80004e8:	1c69      	adds	r1, r5, #1
 80004ea:	2b0f      	cmp	r3, #15
 80004ec:	d83f      	bhi.n	800056e <__aeabi_fmul+0xe2>
 80004ee:	4a72      	ldr	r2, [pc, #456]	; (80006b8 <__aeabi_fmul+0x22c>)
 80004f0:	009b      	lsls	r3, r3, #2
 80004f2:	58d3      	ldr	r3, [r2, r3]
 80004f4:	469f      	mov	pc, r3
 80004f6:	35ff      	adds	r5, #255	; 0xff
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	d000      	beq.n	80004fe <__aeabi_fmul+0x72>
 80004fc:	e079      	b.n	80005f2 <__aeabi_fmul+0x166>
 80004fe:	4652      	mov	r2, sl
 8000500:	2302      	movs	r3, #2
 8000502:	431a      	orrs	r2, r3
 8000504:	4692      	mov	sl, r2
 8000506:	2002      	movs	r0, #2
 8000508:	e7eb      	b.n	80004e2 <__aeabi_fmul+0x56>
 800050a:	4647      	mov	r7, r8
 800050c:	464c      	mov	r4, r9
 800050e:	4683      	mov	fp, r0
 8000510:	465b      	mov	r3, fp
 8000512:	2b02      	cmp	r3, #2
 8000514:	d028      	beq.n	8000568 <__aeabi_fmul+0xdc>
 8000516:	2b03      	cmp	r3, #3
 8000518:	d100      	bne.n	800051c <__aeabi_fmul+0x90>
 800051a:	e0c6      	b.n	80006aa <__aeabi_fmul+0x21e>
 800051c:	2b01      	cmp	r3, #1
 800051e:	d14f      	bne.n	80005c0 <__aeabi_fmul+0x134>
 8000520:	2000      	movs	r0, #0
 8000522:	2400      	movs	r4, #0
 8000524:	05c0      	lsls	r0, r0, #23
 8000526:	07ff      	lsls	r7, r7, #31
 8000528:	4320      	orrs	r0, r4
 800052a:	4338      	orrs	r0, r7
 800052c:	bcf0      	pop	{r4, r5, r6, r7}
 800052e:	46bb      	mov	fp, r7
 8000530:	46b2      	mov	sl, r6
 8000532:	46a9      	mov	r9, r5
 8000534:	46a0      	mov	r8, r4
 8000536:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000538:	2c00      	cmp	r4, #0
 800053a:	d171      	bne.n	8000620 <__aeabi_fmul+0x194>
 800053c:	2304      	movs	r3, #4
 800053e:	469a      	mov	sl, r3
 8000540:	3b03      	subs	r3, #3
 8000542:	2500      	movs	r5, #0
 8000544:	469b      	mov	fp, r3
 8000546:	e7b9      	b.n	80004bc <__aeabi_fmul+0x30>
 8000548:	2c00      	cmp	r4, #0
 800054a:	d163      	bne.n	8000614 <__aeabi_fmul+0x188>
 800054c:	2308      	movs	r3, #8
 800054e:	469a      	mov	sl, r3
 8000550:	3b06      	subs	r3, #6
 8000552:	25ff      	movs	r5, #255	; 0xff
 8000554:	469b      	mov	fp, r3
 8000556:	e7b1      	b.n	80004bc <__aeabi_fmul+0x30>
 8000558:	2b00      	cmp	r3, #0
 800055a:	d150      	bne.n	80005fe <__aeabi_fmul+0x172>
 800055c:	4652      	mov	r2, sl
 800055e:	3301      	adds	r3, #1
 8000560:	431a      	orrs	r2, r3
 8000562:	4692      	mov	sl, r2
 8000564:	2001      	movs	r0, #1
 8000566:	e7bc      	b.n	80004e2 <__aeabi_fmul+0x56>
 8000568:	20ff      	movs	r0, #255	; 0xff
 800056a:	2400      	movs	r4, #0
 800056c:	e7da      	b.n	8000524 <__aeabi_fmul+0x98>
 800056e:	4648      	mov	r0, r9
 8000570:	0c26      	lsrs	r6, r4, #16
 8000572:	0424      	lsls	r4, r4, #16
 8000574:	0c22      	lsrs	r2, r4, #16
 8000576:	0404      	lsls	r4, r0, #16
 8000578:	0c24      	lsrs	r4, r4, #16
 800057a:	464b      	mov	r3, r9
 800057c:	0020      	movs	r0, r4
 800057e:	0c1b      	lsrs	r3, r3, #16
 8000580:	4350      	muls	r0, r2
 8000582:	4374      	muls	r4, r6
 8000584:	435a      	muls	r2, r3
 8000586:	435e      	muls	r6, r3
 8000588:	1912      	adds	r2, r2, r4
 800058a:	0c03      	lsrs	r3, r0, #16
 800058c:	189b      	adds	r3, r3, r2
 800058e:	429c      	cmp	r4, r3
 8000590:	d903      	bls.n	800059a <__aeabi_fmul+0x10e>
 8000592:	2280      	movs	r2, #128	; 0x80
 8000594:	0252      	lsls	r2, r2, #9
 8000596:	4694      	mov	ip, r2
 8000598:	4466      	add	r6, ip
 800059a:	0400      	lsls	r0, r0, #16
 800059c:	041a      	lsls	r2, r3, #16
 800059e:	0c00      	lsrs	r0, r0, #16
 80005a0:	1812      	adds	r2, r2, r0
 80005a2:	0194      	lsls	r4, r2, #6
 80005a4:	1e60      	subs	r0, r4, #1
 80005a6:	4184      	sbcs	r4, r0
 80005a8:	0c1b      	lsrs	r3, r3, #16
 80005aa:	0e92      	lsrs	r2, r2, #26
 80005ac:	199b      	adds	r3, r3, r6
 80005ae:	4314      	orrs	r4, r2
 80005b0:	019b      	lsls	r3, r3, #6
 80005b2:	431c      	orrs	r4, r3
 80005b4:	011b      	lsls	r3, r3, #4
 80005b6:	d572      	bpl.n	800069e <__aeabi_fmul+0x212>
 80005b8:	2001      	movs	r0, #1
 80005ba:	0863      	lsrs	r3, r4, #1
 80005bc:	4004      	ands	r4, r0
 80005be:	431c      	orrs	r4, r3
 80005c0:	0008      	movs	r0, r1
 80005c2:	307f      	adds	r0, #127	; 0x7f
 80005c4:	2800      	cmp	r0, #0
 80005c6:	dd3c      	ble.n	8000642 <__aeabi_fmul+0x1b6>
 80005c8:	0763      	lsls	r3, r4, #29
 80005ca:	d004      	beq.n	80005d6 <__aeabi_fmul+0x14a>
 80005cc:	230f      	movs	r3, #15
 80005ce:	4023      	ands	r3, r4
 80005d0:	2b04      	cmp	r3, #4
 80005d2:	d000      	beq.n	80005d6 <__aeabi_fmul+0x14a>
 80005d4:	3404      	adds	r4, #4
 80005d6:	0123      	lsls	r3, r4, #4
 80005d8:	d503      	bpl.n	80005e2 <__aeabi_fmul+0x156>
 80005da:	3180      	adds	r1, #128	; 0x80
 80005dc:	0008      	movs	r0, r1
 80005de:	4b37      	ldr	r3, [pc, #220]	; (80006bc <__aeabi_fmul+0x230>)
 80005e0:	401c      	ands	r4, r3
 80005e2:	28fe      	cmp	r0, #254	; 0xfe
 80005e4:	dcc0      	bgt.n	8000568 <__aeabi_fmul+0xdc>
 80005e6:	01a4      	lsls	r4, r4, #6
 80005e8:	0a64      	lsrs	r4, r4, #9
 80005ea:	b2c0      	uxtb	r0, r0
 80005ec:	e79a      	b.n	8000524 <__aeabi_fmul+0x98>
 80005ee:	0037      	movs	r7, r6
 80005f0:	e78e      	b.n	8000510 <__aeabi_fmul+0x84>
 80005f2:	4652      	mov	r2, sl
 80005f4:	2303      	movs	r3, #3
 80005f6:	431a      	orrs	r2, r3
 80005f8:	4692      	mov	sl, r2
 80005fa:	2003      	movs	r0, #3
 80005fc:	e771      	b.n	80004e2 <__aeabi_fmul+0x56>
 80005fe:	4648      	mov	r0, r9
 8000600:	f000 fa0a 	bl	8000a18 <__clzsi2>
 8000604:	464a      	mov	r2, r9
 8000606:	1f43      	subs	r3, r0, #5
 8000608:	409a      	lsls	r2, r3
 800060a:	1a2d      	subs	r5, r5, r0
 800060c:	4691      	mov	r9, r2
 800060e:	2000      	movs	r0, #0
 8000610:	3d76      	subs	r5, #118	; 0x76
 8000612:	e766      	b.n	80004e2 <__aeabi_fmul+0x56>
 8000614:	230c      	movs	r3, #12
 8000616:	469a      	mov	sl, r3
 8000618:	3b09      	subs	r3, #9
 800061a:	25ff      	movs	r5, #255	; 0xff
 800061c:	469b      	mov	fp, r3
 800061e:	e74d      	b.n	80004bc <__aeabi_fmul+0x30>
 8000620:	0020      	movs	r0, r4
 8000622:	f000 f9f9 	bl	8000a18 <__clzsi2>
 8000626:	2576      	movs	r5, #118	; 0x76
 8000628:	1f43      	subs	r3, r0, #5
 800062a:	409c      	lsls	r4, r3
 800062c:	2300      	movs	r3, #0
 800062e:	426d      	negs	r5, r5
 8000630:	469a      	mov	sl, r3
 8000632:	469b      	mov	fp, r3
 8000634:	1a2d      	subs	r5, r5, r0
 8000636:	e741      	b.n	80004bc <__aeabi_fmul+0x30>
 8000638:	2480      	movs	r4, #128	; 0x80
 800063a:	2700      	movs	r7, #0
 800063c:	20ff      	movs	r0, #255	; 0xff
 800063e:	03e4      	lsls	r4, r4, #15
 8000640:	e770      	b.n	8000524 <__aeabi_fmul+0x98>
 8000642:	2301      	movs	r3, #1
 8000644:	1a1b      	subs	r3, r3, r0
 8000646:	2b1b      	cmp	r3, #27
 8000648:	dd00      	ble.n	800064c <__aeabi_fmul+0x1c0>
 800064a:	e769      	b.n	8000520 <__aeabi_fmul+0x94>
 800064c:	319e      	adds	r1, #158	; 0x9e
 800064e:	0020      	movs	r0, r4
 8000650:	408c      	lsls	r4, r1
 8000652:	40d8      	lsrs	r0, r3
 8000654:	1e63      	subs	r3, r4, #1
 8000656:	419c      	sbcs	r4, r3
 8000658:	4304      	orrs	r4, r0
 800065a:	0763      	lsls	r3, r4, #29
 800065c:	d004      	beq.n	8000668 <__aeabi_fmul+0x1dc>
 800065e:	230f      	movs	r3, #15
 8000660:	4023      	ands	r3, r4
 8000662:	2b04      	cmp	r3, #4
 8000664:	d000      	beq.n	8000668 <__aeabi_fmul+0x1dc>
 8000666:	3404      	adds	r4, #4
 8000668:	0163      	lsls	r3, r4, #5
 800066a:	d51a      	bpl.n	80006a2 <__aeabi_fmul+0x216>
 800066c:	2001      	movs	r0, #1
 800066e:	2400      	movs	r4, #0
 8000670:	e758      	b.n	8000524 <__aeabi_fmul+0x98>
 8000672:	2080      	movs	r0, #128	; 0x80
 8000674:	03c0      	lsls	r0, r0, #15
 8000676:	4204      	tst	r4, r0
 8000678:	d009      	beq.n	800068e <__aeabi_fmul+0x202>
 800067a:	464b      	mov	r3, r9
 800067c:	4203      	tst	r3, r0
 800067e:	d106      	bne.n	800068e <__aeabi_fmul+0x202>
 8000680:	464c      	mov	r4, r9
 8000682:	4304      	orrs	r4, r0
 8000684:	0264      	lsls	r4, r4, #9
 8000686:	4647      	mov	r7, r8
 8000688:	20ff      	movs	r0, #255	; 0xff
 800068a:	0a64      	lsrs	r4, r4, #9
 800068c:	e74a      	b.n	8000524 <__aeabi_fmul+0x98>
 800068e:	2080      	movs	r0, #128	; 0x80
 8000690:	03c0      	lsls	r0, r0, #15
 8000692:	4304      	orrs	r4, r0
 8000694:	0264      	lsls	r4, r4, #9
 8000696:	0037      	movs	r7, r6
 8000698:	20ff      	movs	r0, #255	; 0xff
 800069a:	0a64      	lsrs	r4, r4, #9
 800069c:	e742      	b.n	8000524 <__aeabi_fmul+0x98>
 800069e:	0029      	movs	r1, r5
 80006a0:	e78e      	b.n	80005c0 <__aeabi_fmul+0x134>
 80006a2:	01a4      	lsls	r4, r4, #6
 80006a4:	2000      	movs	r0, #0
 80006a6:	0a64      	lsrs	r4, r4, #9
 80006a8:	e73c      	b.n	8000524 <__aeabi_fmul+0x98>
 80006aa:	2080      	movs	r0, #128	; 0x80
 80006ac:	03c0      	lsls	r0, r0, #15
 80006ae:	4304      	orrs	r4, r0
 80006b0:	0264      	lsls	r4, r4, #9
 80006b2:	20ff      	movs	r0, #255	; 0xff
 80006b4:	0a64      	lsrs	r4, r4, #9
 80006b6:	e735      	b.n	8000524 <__aeabi_fmul+0x98>
 80006b8:	08003b30 	.word	0x08003b30
 80006bc:	f7ffffff 	.word	0xf7ffffff

080006c0 <__aeabi_i2f>:
 80006c0:	b570      	push	{r4, r5, r6, lr}
 80006c2:	2800      	cmp	r0, #0
 80006c4:	d013      	beq.n	80006ee <__aeabi_i2f+0x2e>
 80006c6:	17c3      	asrs	r3, r0, #31
 80006c8:	18c5      	adds	r5, r0, r3
 80006ca:	405d      	eors	r5, r3
 80006cc:	0fc4      	lsrs	r4, r0, #31
 80006ce:	0028      	movs	r0, r5
 80006d0:	f000 f9a2 	bl	8000a18 <__clzsi2>
 80006d4:	239e      	movs	r3, #158	; 0x9e
 80006d6:	0001      	movs	r1, r0
 80006d8:	1a1b      	subs	r3, r3, r0
 80006da:	2b96      	cmp	r3, #150	; 0x96
 80006dc:	dc0f      	bgt.n	80006fe <__aeabi_i2f+0x3e>
 80006de:	2808      	cmp	r0, #8
 80006e0:	dd01      	ble.n	80006e6 <__aeabi_i2f+0x26>
 80006e2:	3908      	subs	r1, #8
 80006e4:	408d      	lsls	r5, r1
 80006e6:	026d      	lsls	r5, r5, #9
 80006e8:	0a6d      	lsrs	r5, r5, #9
 80006ea:	b2d8      	uxtb	r0, r3
 80006ec:	e002      	b.n	80006f4 <__aeabi_i2f+0x34>
 80006ee:	2400      	movs	r4, #0
 80006f0:	2000      	movs	r0, #0
 80006f2:	2500      	movs	r5, #0
 80006f4:	05c0      	lsls	r0, r0, #23
 80006f6:	4328      	orrs	r0, r5
 80006f8:	07e4      	lsls	r4, r4, #31
 80006fa:	4320      	orrs	r0, r4
 80006fc:	bd70      	pop	{r4, r5, r6, pc}
 80006fe:	2b99      	cmp	r3, #153	; 0x99
 8000700:	dd0b      	ble.n	800071a <__aeabi_i2f+0x5a>
 8000702:	2205      	movs	r2, #5
 8000704:	002e      	movs	r6, r5
 8000706:	1a12      	subs	r2, r2, r0
 8000708:	40d6      	lsrs	r6, r2
 800070a:	0002      	movs	r2, r0
 800070c:	321b      	adds	r2, #27
 800070e:	4095      	lsls	r5, r2
 8000710:	0028      	movs	r0, r5
 8000712:	1e45      	subs	r5, r0, #1
 8000714:	41a8      	sbcs	r0, r5
 8000716:	0035      	movs	r5, r6
 8000718:	4305      	orrs	r5, r0
 800071a:	2905      	cmp	r1, #5
 800071c:	dd01      	ble.n	8000722 <__aeabi_i2f+0x62>
 800071e:	1f4a      	subs	r2, r1, #5
 8000720:	4095      	lsls	r5, r2
 8000722:	002a      	movs	r2, r5
 8000724:	4e08      	ldr	r6, [pc, #32]	; (8000748 <__aeabi_i2f+0x88>)
 8000726:	4032      	ands	r2, r6
 8000728:	0768      	lsls	r0, r5, #29
 800072a:	d009      	beq.n	8000740 <__aeabi_i2f+0x80>
 800072c:	200f      	movs	r0, #15
 800072e:	4028      	ands	r0, r5
 8000730:	2804      	cmp	r0, #4
 8000732:	d005      	beq.n	8000740 <__aeabi_i2f+0x80>
 8000734:	3204      	adds	r2, #4
 8000736:	0150      	lsls	r0, r2, #5
 8000738:	d502      	bpl.n	8000740 <__aeabi_i2f+0x80>
 800073a:	239f      	movs	r3, #159	; 0x9f
 800073c:	4032      	ands	r2, r6
 800073e:	1a5b      	subs	r3, r3, r1
 8000740:	0192      	lsls	r2, r2, #6
 8000742:	0a55      	lsrs	r5, r2, #9
 8000744:	b2d8      	uxtb	r0, r3
 8000746:	e7d5      	b.n	80006f4 <__aeabi_i2f+0x34>
 8000748:	fbffffff 	.word	0xfbffffff

0800074c <__eqdf2>:
 800074c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800074e:	464f      	mov	r7, r9
 8000750:	4646      	mov	r6, r8
 8000752:	46d6      	mov	lr, sl
 8000754:	4694      	mov	ip, r2
 8000756:	4691      	mov	r9, r2
 8000758:	031a      	lsls	r2, r3, #12
 800075a:	0b12      	lsrs	r2, r2, #12
 800075c:	4d18      	ldr	r5, [pc, #96]	; (80007c0 <__eqdf2+0x74>)
 800075e:	b5c0      	push	{r6, r7, lr}
 8000760:	004c      	lsls	r4, r1, #1
 8000762:	030f      	lsls	r7, r1, #12
 8000764:	4692      	mov	sl, r2
 8000766:	005a      	lsls	r2, r3, #1
 8000768:	0006      	movs	r6, r0
 800076a:	4680      	mov	r8, r0
 800076c:	0b3f      	lsrs	r7, r7, #12
 800076e:	2001      	movs	r0, #1
 8000770:	0d64      	lsrs	r4, r4, #21
 8000772:	0fc9      	lsrs	r1, r1, #31
 8000774:	0d52      	lsrs	r2, r2, #21
 8000776:	0fdb      	lsrs	r3, r3, #31
 8000778:	42ac      	cmp	r4, r5
 800077a:	d00a      	beq.n	8000792 <__eqdf2+0x46>
 800077c:	42aa      	cmp	r2, r5
 800077e:	d003      	beq.n	8000788 <__eqdf2+0x3c>
 8000780:	4294      	cmp	r4, r2
 8000782:	d101      	bne.n	8000788 <__eqdf2+0x3c>
 8000784:	4557      	cmp	r7, sl
 8000786:	d00d      	beq.n	80007a4 <__eqdf2+0x58>
 8000788:	bce0      	pop	{r5, r6, r7}
 800078a:	46ba      	mov	sl, r7
 800078c:	46b1      	mov	r9, r6
 800078e:	46a8      	mov	r8, r5
 8000790:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000792:	003d      	movs	r5, r7
 8000794:	4335      	orrs	r5, r6
 8000796:	d1f7      	bne.n	8000788 <__eqdf2+0x3c>
 8000798:	42a2      	cmp	r2, r4
 800079a:	d1f5      	bne.n	8000788 <__eqdf2+0x3c>
 800079c:	4652      	mov	r2, sl
 800079e:	4665      	mov	r5, ip
 80007a0:	432a      	orrs	r2, r5
 80007a2:	d1f1      	bne.n	8000788 <__eqdf2+0x3c>
 80007a4:	2001      	movs	r0, #1
 80007a6:	45c8      	cmp	r8, r9
 80007a8:	d1ee      	bne.n	8000788 <__eqdf2+0x3c>
 80007aa:	4299      	cmp	r1, r3
 80007ac:	d006      	beq.n	80007bc <__eqdf2+0x70>
 80007ae:	2c00      	cmp	r4, #0
 80007b0:	d1ea      	bne.n	8000788 <__eqdf2+0x3c>
 80007b2:	433e      	orrs	r6, r7
 80007b4:	0030      	movs	r0, r6
 80007b6:	1e46      	subs	r6, r0, #1
 80007b8:	41b0      	sbcs	r0, r6
 80007ba:	e7e5      	b.n	8000788 <__eqdf2+0x3c>
 80007bc:	2000      	movs	r0, #0
 80007be:	e7e3      	b.n	8000788 <__eqdf2+0x3c>
 80007c0:	000007ff 	.word	0x000007ff

080007c4 <__gedf2>:
 80007c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007c6:	464e      	mov	r6, r9
 80007c8:	4645      	mov	r5, r8
 80007ca:	4657      	mov	r7, sl
 80007cc:	46de      	mov	lr, fp
 80007ce:	0004      	movs	r4, r0
 80007d0:	0018      	movs	r0, r3
 80007d2:	b5e0      	push	{r5, r6, r7, lr}
 80007d4:	0016      	movs	r6, r2
 80007d6:	031b      	lsls	r3, r3, #12
 80007d8:	0b1b      	lsrs	r3, r3, #12
 80007da:	4d32      	ldr	r5, [pc, #200]	; (80008a4 <__gedf2+0xe0>)
 80007dc:	030f      	lsls	r7, r1, #12
 80007de:	004a      	lsls	r2, r1, #1
 80007e0:	4699      	mov	r9, r3
 80007e2:	0043      	lsls	r3, r0, #1
 80007e4:	46a4      	mov	ip, r4
 80007e6:	46b0      	mov	r8, r6
 80007e8:	0b3f      	lsrs	r7, r7, #12
 80007ea:	0d52      	lsrs	r2, r2, #21
 80007ec:	0fc9      	lsrs	r1, r1, #31
 80007ee:	0d5b      	lsrs	r3, r3, #21
 80007f0:	0fc0      	lsrs	r0, r0, #31
 80007f2:	42aa      	cmp	r2, r5
 80007f4:	d029      	beq.n	800084a <__gedf2+0x86>
 80007f6:	42ab      	cmp	r3, r5
 80007f8:	d018      	beq.n	800082c <__gedf2+0x68>
 80007fa:	2a00      	cmp	r2, #0
 80007fc:	d12a      	bne.n	8000854 <__gedf2+0x90>
 80007fe:	433c      	orrs	r4, r7
 8000800:	46a3      	mov	fp, r4
 8000802:	4265      	negs	r5, r4
 8000804:	4165      	adcs	r5, r4
 8000806:	2b00      	cmp	r3, #0
 8000808:	d102      	bne.n	8000810 <__gedf2+0x4c>
 800080a:	464c      	mov	r4, r9
 800080c:	4326      	orrs	r6, r4
 800080e:	d027      	beq.n	8000860 <__gedf2+0x9c>
 8000810:	2d00      	cmp	r5, #0
 8000812:	d115      	bne.n	8000840 <__gedf2+0x7c>
 8000814:	4281      	cmp	r1, r0
 8000816:	d028      	beq.n	800086a <__gedf2+0xa6>
 8000818:	2002      	movs	r0, #2
 800081a:	3901      	subs	r1, #1
 800081c:	4008      	ands	r0, r1
 800081e:	3801      	subs	r0, #1
 8000820:	bcf0      	pop	{r4, r5, r6, r7}
 8000822:	46bb      	mov	fp, r7
 8000824:	46b2      	mov	sl, r6
 8000826:	46a9      	mov	r9, r5
 8000828:	46a0      	mov	r8, r4
 800082a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800082c:	464d      	mov	r5, r9
 800082e:	432e      	orrs	r6, r5
 8000830:	d12f      	bne.n	8000892 <__gedf2+0xce>
 8000832:	2a00      	cmp	r2, #0
 8000834:	d1ee      	bne.n	8000814 <__gedf2+0x50>
 8000836:	433c      	orrs	r4, r7
 8000838:	4265      	negs	r5, r4
 800083a:	4165      	adcs	r5, r4
 800083c:	2d00      	cmp	r5, #0
 800083e:	d0e9      	beq.n	8000814 <__gedf2+0x50>
 8000840:	2800      	cmp	r0, #0
 8000842:	d1ed      	bne.n	8000820 <__gedf2+0x5c>
 8000844:	2001      	movs	r0, #1
 8000846:	4240      	negs	r0, r0
 8000848:	e7ea      	b.n	8000820 <__gedf2+0x5c>
 800084a:	003d      	movs	r5, r7
 800084c:	4325      	orrs	r5, r4
 800084e:	d120      	bne.n	8000892 <__gedf2+0xce>
 8000850:	4293      	cmp	r3, r2
 8000852:	d0eb      	beq.n	800082c <__gedf2+0x68>
 8000854:	2b00      	cmp	r3, #0
 8000856:	d1dd      	bne.n	8000814 <__gedf2+0x50>
 8000858:	464c      	mov	r4, r9
 800085a:	4326      	orrs	r6, r4
 800085c:	d1da      	bne.n	8000814 <__gedf2+0x50>
 800085e:	e7db      	b.n	8000818 <__gedf2+0x54>
 8000860:	465b      	mov	r3, fp
 8000862:	2000      	movs	r0, #0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d0db      	beq.n	8000820 <__gedf2+0x5c>
 8000868:	e7d6      	b.n	8000818 <__gedf2+0x54>
 800086a:	429a      	cmp	r2, r3
 800086c:	dc0a      	bgt.n	8000884 <__gedf2+0xc0>
 800086e:	dbe7      	blt.n	8000840 <__gedf2+0x7c>
 8000870:	454f      	cmp	r7, r9
 8000872:	d8d1      	bhi.n	8000818 <__gedf2+0x54>
 8000874:	d010      	beq.n	8000898 <__gedf2+0xd4>
 8000876:	2000      	movs	r0, #0
 8000878:	454f      	cmp	r7, r9
 800087a:	d2d1      	bcs.n	8000820 <__gedf2+0x5c>
 800087c:	2900      	cmp	r1, #0
 800087e:	d0e1      	beq.n	8000844 <__gedf2+0x80>
 8000880:	0008      	movs	r0, r1
 8000882:	e7cd      	b.n	8000820 <__gedf2+0x5c>
 8000884:	4243      	negs	r3, r0
 8000886:	4158      	adcs	r0, r3
 8000888:	2302      	movs	r3, #2
 800088a:	4240      	negs	r0, r0
 800088c:	4018      	ands	r0, r3
 800088e:	3801      	subs	r0, #1
 8000890:	e7c6      	b.n	8000820 <__gedf2+0x5c>
 8000892:	2002      	movs	r0, #2
 8000894:	4240      	negs	r0, r0
 8000896:	e7c3      	b.n	8000820 <__gedf2+0x5c>
 8000898:	45c4      	cmp	ip, r8
 800089a:	d8bd      	bhi.n	8000818 <__gedf2+0x54>
 800089c:	2000      	movs	r0, #0
 800089e:	45c4      	cmp	ip, r8
 80008a0:	d2be      	bcs.n	8000820 <__gedf2+0x5c>
 80008a2:	e7eb      	b.n	800087c <__gedf2+0xb8>
 80008a4:	000007ff 	.word	0x000007ff

080008a8 <__ledf2>:
 80008a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008aa:	464e      	mov	r6, r9
 80008ac:	4645      	mov	r5, r8
 80008ae:	4657      	mov	r7, sl
 80008b0:	46de      	mov	lr, fp
 80008b2:	0004      	movs	r4, r0
 80008b4:	0018      	movs	r0, r3
 80008b6:	b5e0      	push	{r5, r6, r7, lr}
 80008b8:	0016      	movs	r6, r2
 80008ba:	031b      	lsls	r3, r3, #12
 80008bc:	0b1b      	lsrs	r3, r3, #12
 80008be:	4d31      	ldr	r5, [pc, #196]	; (8000984 <__ledf2+0xdc>)
 80008c0:	030f      	lsls	r7, r1, #12
 80008c2:	004a      	lsls	r2, r1, #1
 80008c4:	4699      	mov	r9, r3
 80008c6:	0043      	lsls	r3, r0, #1
 80008c8:	46a4      	mov	ip, r4
 80008ca:	46b0      	mov	r8, r6
 80008cc:	0b3f      	lsrs	r7, r7, #12
 80008ce:	0d52      	lsrs	r2, r2, #21
 80008d0:	0fc9      	lsrs	r1, r1, #31
 80008d2:	0d5b      	lsrs	r3, r3, #21
 80008d4:	0fc0      	lsrs	r0, r0, #31
 80008d6:	42aa      	cmp	r2, r5
 80008d8:	d011      	beq.n	80008fe <__ledf2+0x56>
 80008da:	42ab      	cmp	r3, r5
 80008dc:	d014      	beq.n	8000908 <__ledf2+0x60>
 80008de:	2a00      	cmp	r2, #0
 80008e0:	d12f      	bne.n	8000942 <__ledf2+0x9a>
 80008e2:	433c      	orrs	r4, r7
 80008e4:	46a3      	mov	fp, r4
 80008e6:	4265      	negs	r5, r4
 80008e8:	4165      	adcs	r5, r4
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d114      	bne.n	8000918 <__ledf2+0x70>
 80008ee:	464c      	mov	r4, r9
 80008f0:	4326      	orrs	r6, r4
 80008f2:	d111      	bne.n	8000918 <__ledf2+0x70>
 80008f4:	465b      	mov	r3, fp
 80008f6:	2000      	movs	r0, #0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d017      	beq.n	800092c <__ledf2+0x84>
 80008fc:	e010      	b.n	8000920 <__ledf2+0x78>
 80008fe:	003d      	movs	r5, r7
 8000900:	4325      	orrs	r5, r4
 8000902:	d112      	bne.n	800092a <__ledf2+0x82>
 8000904:	4293      	cmp	r3, r2
 8000906:	d11c      	bne.n	8000942 <__ledf2+0x9a>
 8000908:	464d      	mov	r5, r9
 800090a:	432e      	orrs	r6, r5
 800090c:	d10d      	bne.n	800092a <__ledf2+0x82>
 800090e:	2a00      	cmp	r2, #0
 8000910:	d104      	bne.n	800091c <__ledf2+0x74>
 8000912:	433c      	orrs	r4, r7
 8000914:	4265      	negs	r5, r4
 8000916:	4165      	adcs	r5, r4
 8000918:	2d00      	cmp	r5, #0
 800091a:	d10d      	bne.n	8000938 <__ledf2+0x90>
 800091c:	4281      	cmp	r1, r0
 800091e:	d016      	beq.n	800094e <__ledf2+0xa6>
 8000920:	2002      	movs	r0, #2
 8000922:	3901      	subs	r1, #1
 8000924:	4008      	ands	r0, r1
 8000926:	3801      	subs	r0, #1
 8000928:	e000      	b.n	800092c <__ledf2+0x84>
 800092a:	2002      	movs	r0, #2
 800092c:	bcf0      	pop	{r4, r5, r6, r7}
 800092e:	46bb      	mov	fp, r7
 8000930:	46b2      	mov	sl, r6
 8000932:	46a9      	mov	r9, r5
 8000934:	46a0      	mov	r8, r4
 8000936:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000938:	2800      	cmp	r0, #0
 800093a:	d1f7      	bne.n	800092c <__ledf2+0x84>
 800093c:	2001      	movs	r0, #1
 800093e:	4240      	negs	r0, r0
 8000940:	e7f4      	b.n	800092c <__ledf2+0x84>
 8000942:	2b00      	cmp	r3, #0
 8000944:	d1ea      	bne.n	800091c <__ledf2+0x74>
 8000946:	464c      	mov	r4, r9
 8000948:	4326      	orrs	r6, r4
 800094a:	d1e7      	bne.n	800091c <__ledf2+0x74>
 800094c:	e7e8      	b.n	8000920 <__ledf2+0x78>
 800094e:	429a      	cmp	r2, r3
 8000950:	dd06      	ble.n	8000960 <__ledf2+0xb8>
 8000952:	4243      	negs	r3, r0
 8000954:	4158      	adcs	r0, r3
 8000956:	2302      	movs	r3, #2
 8000958:	4240      	negs	r0, r0
 800095a:	4018      	ands	r0, r3
 800095c:	3801      	subs	r0, #1
 800095e:	e7e5      	b.n	800092c <__ledf2+0x84>
 8000960:	429a      	cmp	r2, r3
 8000962:	dbe9      	blt.n	8000938 <__ledf2+0x90>
 8000964:	454f      	cmp	r7, r9
 8000966:	d8db      	bhi.n	8000920 <__ledf2+0x78>
 8000968:	d006      	beq.n	8000978 <__ledf2+0xd0>
 800096a:	2000      	movs	r0, #0
 800096c:	454f      	cmp	r7, r9
 800096e:	d2dd      	bcs.n	800092c <__ledf2+0x84>
 8000970:	2900      	cmp	r1, #0
 8000972:	d0e3      	beq.n	800093c <__ledf2+0x94>
 8000974:	0008      	movs	r0, r1
 8000976:	e7d9      	b.n	800092c <__ledf2+0x84>
 8000978:	45c4      	cmp	ip, r8
 800097a:	d8d1      	bhi.n	8000920 <__ledf2+0x78>
 800097c:	2000      	movs	r0, #0
 800097e:	45c4      	cmp	ip, r8
 8000980:	d2d4      	bcs.n	800092c <__ledf2+0x84>
 8000982:	e7f5      	b.n	8000970 <__ledf2+0xc8>
 8000984:	000007ff 	.word	0x000007ff

08000988 <__aeabi_f2d>:
 8000988:	b570      	push	{r4, r5, r6, lr}
 800098a:	0043      	lsls	r3, r0, #1
 800098c:	0246      	lsls	r6, r0, #9
 800098e:	0fc4      	lsrs	r4, r0, #31
 8000990:	20fe      	movs	r0, #254	; 0xfe
 8000992:	0e1b      	lsrs	r3, r3, #24
 8000994:	1c59      	adds	r1, r3, #1
 8000996:	0a75      	lsrs	r5, r6, #9
 8000998:	4208      	tst	r0, r1
 800099a:	d00c      	beq.n	80009b6 <__aeabi_f2d+0x2e>
 800099c:	22e0      	movs	r2, #224	; 0xe0
 800099e:	0092      	lsls	r2, r2, #2
 80009a0:	4694      	mov	ip, r2
 80009a2:	076d      	lsls	r5, r5, #29
 80009a4:	0b36      	lsrs	r6, r6, #12
 80009a6:	4463      	add	r3, ip
 80009a8:	051b      	lsls	r3, r3, #20
 80009aa:	4333      	orrs	r3, r6
 80009ac:	07e4      	lsls	r4, r4, #31
 80009ae:	4323      	orrs	r3, r4
 80009b0:	0028      	movs	r0, r5
 80009b2:	0019      	movs	r1, r3
 80009b4:	bd70      	pop	{r4, r5, r6, pc}
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d114      	bne.n	80009e4 <__aeabi_f2d+0x5c>
 80009ba:	2d00      	cmp	r5, #0
 80009bc:	d01b      	beq.n	80009f6 <__aeabi_f2d+0x6e>
 80009be:	0028      	movs	r0, r5
 80009c0:	f000 f82a 	bl	8000a18 <__clzsi2>
 80009c4:	280a      	cmp	r0, #10
 80009c6:	dc1c      	bgt.n	8000a02 <__aeabi_f2d+0x7a>
 80009c8:	230b      	movs	r3, #11
 80009ca:	002a      	movs	r2, r5
 80009cc:	1a1b      	subs	r3, r3, r0
 80009ce:	40da      	lsrs	r2, r3
 80009d0:	0003      	movs	r3, r0
 80009d2:	3315      	adds	r3, #21
 80009d4:	409d      	lsls	r5, r3
 80009d6:	4b0e      	ldr	r3, [pc, #56]	; (8000a10 <__aeabi_f2d+0x88>)
 80009d8:	0312      	lsls	r2, r2, #12
 80009da:	1a1b      	subs	r3, r3, r0
 80009dc:	055b      	lsls	r3, r3, #21
 80009de:	0b16      	lsrs	r6, r2, #12
 80009e0:	0d5b      	lsrs	r3, r3, #21
 80009e2:	e7e1      	b.n	80009a8 <__aeabi_f2d+0x20>
 80009e4:	2d00      	cmp	r5, #0
 80009e6:	d009      	beq.n	80009fc <__aeabi_f2d+0x74>
 80009e8:	0b32      	lsrs	r2, r6, #12
 80009ea:	2680      	movs	r6, #128	; 0x80
 80009ec:	0336      	lsls	r6, r6, #12
 80009ee:	4b09      	ldr	r3, [pc, #36]	; (8000a14 <__aeabi_f2d+0x8c>)
 80009f0:	076d      	lsls	r5, r5, #29
 80009f2:	4316      	orrs	r6, r2
 80009f4:	e7d8      	b.n	80009a8 <__aeabi_f2d+0x20>
 80009f6:	2300      	movs	r3, #0
 80009f8:	2600      	movs	r6, #0
 80009fa:	e7d5      	b.n	80009a8 <__aeabi_f2d+0x20>
 80009fc:	2600      	movs	r6, #0
 80009fe:	4b05      	ldr	r3, [pc, #20]	; (8000a14 <__aeabi_f2d+0x8c>)
 8000a00:	e7d2      	b.n	80009a8 <__aeabi_f2d+0x20>
 8000a02:	0003      	movs	r3, r0
 8000a04:	002a      	movs	r2, r5
 8000a06:	3b0b      	subs	r3, #11
 8000a08:	409a      	lsls	r2, r3
 8000a0a:	2500      	movs	r5, #0
 8000a0c:	e7e3      	b.n	80009d6 <__aeabi_f2d+0x4e>
 8000a0e:	46c0      	nop			; (mov r8, r8)
 8000a10:	00000389 	.word	0x00000389
 8000a14:	000007ff 	.word	0x000007ff

08000a18 <__clzsi2>:
 8000a18:	211c      	movs	r1, #28
 8000a1a:	2301      	movs	r3, #1
 8000a1c:	041b      	lsls	r3, r3, #16
 8000a1e:	4298      	cmp	r0, r3
 8000a20:	d301      	bcc.n	8000a26 <__clzsi2+0xe>
 8000a22:	0c00      	lsrs	r0, r0, #16
 8000a24:	3910      	subs	r1, #16
 8000a26:	0a1b      	lsrs	r3, r3, #8
 8000a28:	4298      	cmp	r0, r3
 8000a2a:	d301      	bcc.n	8000a30 <__clzsi2+0x18>
 8000a2c:	0a00      	lsrs	r0, r0, #8
 8000a2e:	3908      	subs	r1, #8
 8000a30:	091b      	lsrs	r3, r3, #4
 8000a32:	4298      	cmp	r0, r3
 8000a34:	d301      	bcc.n	8000a3a <__clzsi2+0x22>
 8000a36:	0900      	lsrs	r0, r0, #4
 8000a38:	3904      	subs	r1, #4
 8000a3a:	a202      	add	r2, pc, #8	; (adr r2, 8000a44 <__clzsi2+0x2c>)
 8000a3c:	5c10      	ldrb	r0, [r2, r0]
 8000a3e:	1840      	adds	r0, r0, r1
 8000a40:	4770      	bx	lr
 8000a42:	46c0      	nop			; (mov r8, r8)
 8000a44:	02020304 	.word	0x02020304
 8000a48:	01010101 	.word	0x01010101
	...

08000a54 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_71CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_239CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTime)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b082      	sub	sp, #8
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
 8000a5c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR, ADC_SMPR_SMP, SamplingTime);
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	695b      	ldr	r3, [r3, #20]
 8000a62:	2207      	movs	r2, #7
 8000a64:	4393      	bics	r3, r2
 8000a66:	001a      	movs	r2, r3
 8000a68:	683b      	ldr	r3, [r7, #0]
 8000a6a:	431a      	orrs	r2, r3
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	615a      	str	r2, [r3, #20]
}
 8000a70:	46c0      	nop			; (mov r8, r8)
 8000a72:	46bd      	mov	sp, r7
 8000a74:	b002      	add	sp, #8
 8000a76:	bd80      	pop	{r7, pc}

08000a78 <LL_ADC_REG_SetSequencerScanDirection>:
  *         @arg @ref LL_ADC_REG_SEQ_SCAN_DIR_FORWARD
  *         @arg @ref LL_ADC_REG_SEQ_SCAN_DIR_BACKWARD
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerScanDirection(ADC_TypeDef *ADCx, uint32_t ScanDirection)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b082      	sub	sp, #8
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
 8000a80:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_SCANDIR, ScanDirection);
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	68db      	ldr	r3, [r3, #12]
 8000a86:	2204      	movs	r2, #4
 8000a88:	4393      	bics	r3, r2
 8000a8a:	001a      	movs	r2, r3
 8000a8c:	683b      	ldr	r3, [r7, #0]
 8000a8e:	431a      	orrs	r2, r3
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	60da      	str	r2, [r3, #12]
}
 8000a94:	46c0      	nop			; (mov r8, r8)
 8000a96:	46bd      	mov	sp, r7
 8000a98:	b002      	add	sp, #8
 8000a9a:	bd80      	pop	{r7, pc}

08000a9c <LL_ADC_REG_SetSequencerChAdd>:
  *         
  *         (1) On STM32F0, parameter not available on all devices: all devices except STM32F030x6, STM32F030x8, STM32F030xC, STM32F070x6, STM32F070xB.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b082      	sub	sp, #8
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
 8000aa4:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000aaa:	683b      	ldr	r3, [r7, #0]
 8000aac:	035b      	lsls	r3, r3, #13
 8000aae:	0b5b      	lsrs	r3, r3, #13
 8000ab0:	431a      	orrs	r2, r3
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000ab6:	46c0      	nop			; (mov r8, r8)
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	b002      	add	sp, #8
 8000abc:	bd80      	pop	{r7, pc}
	...

08000ac0 <LL_DMA_SetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Direction)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b084      	sub	sp, #16
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	60f8      	str	r0, [r7, #12]
 8000ac8:	60b9      	str	r1, [r7, #8]
 8000aca:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8000acc:	68bb      	ldr	r3, [r7, #8]
 8000ace:	3b01      	subs	r3, #1
 8000ad0:	4a0b      	ldr	r2, [pc, #44]	; (8000b00 <LL_DMA_SetDataTransferDirection+0x40>)
 8000ad2:	5cd3      	ldrb	r3, [r2, r3]
 8000ad4:	001a      	movs	r2, r3
 8000ad6:	68fb      	ldr	r3, [r7, #12]
 8000ad8:	18d3      	adds	r3, r2, r3
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	4a09      	ldr	r2, [pc, #36]	; (8000b04 <LL_DMA_SetDataTransferDirection+0x44>)
 8000ade:	4013      	ands	r3, r2
 8000ae0:	0019      	movs	r1, r3
 8000ae2:	68bb      	ldr	r3, [r7, #8]
 8000ae4:	3b01      	subs	r3, #1
 8000ae6:	4a06      	ldr	r2, [pc, #24]	; (8000b00 <LL_DMA_SetDataTransferDirection+0x40>)
 8000ae8:	5cd3      	ldrb	r3, [r2, r3]
 8000aea:	001a      	movs	r2, r3
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	18d3      	adds	r3, r2, r3
 8000af0:	687a      	ldr	r2, [r7, #4]
 8000af2:	430a      	orrs	r2, r1
 8000af4:	601a      	str	r2, [r3, #0]
             DMA_CCR_DIR | DMA_CCR_MEM2MEM, Direction);
}
 8000af6:	46c0      	nop			; (mov r8, r8)
 8000af8:	46bd      	mov	sp, r7
 8000afa:	b004      	add	sp, #16
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	46c0      	nop			; (mov r8, r8)
 8000b00:	08003b70 	.word	0x08003b70
 8000b04:	ffffbfef 	.word	0xffffbfef

08000b08 <LL_DMA_SetMode>:
  *         @arg @ref LL_DMA_MODE_NORMAL
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Mode)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b084      	sub	sp, #16
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	60f8      	str	r0, [r7, #12]
 8000b10:	60b9      	str	r1, [r7, #8]
 8000b12:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 8000b14:	68bb      	ldr	r3, [r7, #8]
 8000b16:	3b01      	subs	r3, #1
 8000b18:	4a0b      	ldr	r2, [pc, #44]	; (8000b48 <LL_DMA_SetMode+0x40>)
 8000b1a:	5cd3      	ldrb	r3, [r2, r3]
 8000b1c:	001a      	movs	r2, r3
 8000b1e:	68fb      	ldr	r3, [r7, #12]
 8000b20:	18d3      	adds	r3, r2, r3
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	2220      	movs	r2, #32
 8000b26:	4393      	bics	r3, r2
 8000b28:	0019      	movs	r1, r3
 8000b2a:	68bb      	ldr	r3, [r7, #8]
 8000b2c:	3b01      	subs	r3, #1
 8000b2e:	4a06      	ldr	r2, [pc, #24]	; (8000b48 <LL_DMA_SetMode+0x40>)
 8000b30:	5cd3      	ldrb	r3, [r2, r3]
 8000b32:	001a      	movs	r2, r3
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	18d3      	adds	r3, r2, r3
 8000b38:	687a      	ldr	r2, [r7, #4]
 8000b3a:	430a      	orrs	r2, r1
 8000b3c:	601a      	str	r2, [r3, #0]
             Mode);
}
 8000b3e:	46c0      	nop			; (mov r8, r8)
 8000b40:	46bd      	mov	sp, r7
 8000b42:	b004      	add	sp, #16
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	46c0      	nop			; (mov r8, r8)
 8000b48:	08003b70 	.word	0x08003b70

08000b4c <LL_DMA_SetPeriphIncMode>:
  *         @arg @ref LL_DMA_PERIPH_INCREMENT
  *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcIncMode)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b084      	sub	sp, #16
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	60f8      	str	r0, [r7, #12]
 8000b54:	60b9      	str	r1, [r7, #8]
 8000b56:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 8000b58:	68bb      	ldr	r3, [r7, #8]
 8000b5a:	3b01      	subs	r3, #1
 8000b5c:	4a0b      	ldr	r2, [pc, #44]	; (8000b8c <LL_DMA_SetPeriphIncMode+0x40>)
 8000b5e:	5cd3      	ldrb	r3, [r2, r3]
 8000b60:	001a      	movs	r2, r3
 8000b62:	68fb      	ldr	r3, [r7, #12]
 8000b64:	18d3      	adds	r3, r2, r3
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	2240      	movs	r2, #64	; 0x40
 8000b6a:	4393      	bics	r3, r2
 8000b6c:	0019      	movs	r1, r3
 8000b6e:	68bb      	ldr	r3, [r7, #8]
 8000b70:	3b01      	subs	r3, #1
 8000b72:	4a06      	ldr	r2, [pc, #24]	; (8000b8c <LL_DMA_SetPeriphIncMode+0x40>)
 8000b74:	5cd3      	ldrb	r3, [r2, r3]
 8000b76:	001a      	movs	r2, r3
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	18d3      	adds	r3, r2, r3
 8000b7c:	687a      	ldr	r2, [r7, #4]
 8000b7e:	430a      	orrs	r2, r1
 8000b80:	601a      	str	r2, [r3, #0]
             PeriphOrM2MSrcIncMode);
}
 8000b82:	46c0      	nop			; (mov r8, r8)
 8000b84:	46bd      	mov	sp, r7
 8000b86:	b004      	add	sp, #16
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	46c0      	nop			; (mov r8, r8)
 8000b8c:	08003b70 	.word	0x08003b70

08000b90 <LL_DMA_SetMemoryIncMode>:
  *         @arg @ref LL_DMA_MEMORY_INCREMENT
  *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstIncMode)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b084      	sub	sp, #16
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	60f8      	str	r0, [r7, #12]
 8000b98:	60b9      	str	r1, [r7, #8]
 8000b9a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 8000b9c:	68bb      	ldr	r3, [r7, #8]
 8000b9e:	3b01      	subs	r3, #1
 8000ba0:	4a0b      	ldr	r2, [pc, #44]	; (8000bd0 <LL_DMA_SetMemoryIncMode+0x40>)
 8000ba2:	5cd3      	ldrb	r3, [r2, r3]
 8000ba4:	001a      	movs	r2, r3
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	18d3      	adds	r3, r2, r3
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	2280      	movs	r2, #128	; 0x80
 8000bae:	4393      	bics	r3, r2
 8000bb0:	0019      	movs	r1, r3
 8000bb2:	68bb      	ldr	r3, [r7, #8]
 8000bb4:	3b01      	subs	r3, #1
 8000bb6:	4a06      	ldr	r2, [pc, #24]	; (8000bd0 <LL_DMA_SetMemoryIncMode+0x40>)
 8000bb8:	5cd3      	ldrb	r3, [r2, r3]
 8000bba:	001a      	movs	r2, r3
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	18d3      	adds	r3, r2, r3
 8000bc0:	687a      	ldr	r2, [r7, #4]
 8000bc2:	430a      	orrs	r2, r1
 8000bc4:	601a      	str	r2, [r3, #0]
             MemoryOrM2MDstIncMode);
}
 8000bc6:	46c0      	nop			; (mov r8, r8)
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	b004      	add	sp, #16
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	46c0      	nop			; (mov r8, r8)
 8000bd0:	08003b70 	.word	0x08003b70

08000bd4 <LL_DMA_SetPeriphSize>:
  *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_PDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphSize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcDataSize)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b084      	sub	sp, #16
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	60f8      	str	r0, [r7, #12]
 8000bdc:	60b9      	str	r1, [r7, #8]
 8000bde:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 8000be0:	68bb      	ldr	r3, [r7, #8]
 8000be2:	3b01      	subs	r3, #1
 8000be4:	4a0b      	ldr	r2, [pc, #44]	; (8000c14 <LL_DMA_SetPeriphSize+0x40>)
 8000be6:	5cd3      	ldrb	r3, [r2, r3]
 8000be8:	001a      	movs	r2, r3
 8000bea:	68fb      	ldr	r3, [r7, #12]
 8000bec:	18d3      	adds	r3, r2, r3
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	4a09      	ldr	r2, [pc, #36]	; (8000c18 <LL_DMA_SetPeriphSize+0x44>)
 8000bf2:	4013      	ands	r3, r2
 8000bf4:	0019      	movs	r1, r3
 8000bf6:	68bb      	ldr	r3, [r7, #8]
 8000bf8:	3b01      	subs	r3, #1
 8000bfa:	4a06      	ldr	r2, [pc, #24]	; (8000c14 <LL_DMA_SetPeriphSize+0x40>)
 8000bfc:	5cd3      	ldrb	r3, [r2, r3]
 8000bfe:	001a      	movs	r2, r3
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	18d3      	adds	r3, r2, r3
 8000c04:	687a      	ldr	r2, [r7, #4]
 8000c06:	430a      	orrs	r2, r1
 8000c08:	601a      	str	r2, [r3, #0]
             PeriphOrM2MSrcDataSize);
}
 8000c0a:	46c0      	nop			; (mov r8, r8)
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	b004      	add	sp, #16
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	46c0      	nop			; (mov r8, r8)
 8000c14:	08003b70 	.word	0x08003b70
 8000c18:	fffffcff 	.word	0xfffffcff

08000c1c <LL_DMA_SetMemorySize>:
  *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_MDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemorySize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstDataSize)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b084      	sub	sp, #16
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	60f8      	str	r0, [r7, #12]
 8000c24:	60b9      	str	r1, [r7, #8]
 8000c26:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 8000c28:	68bb      	ldr	r3, [r7, #8]
 8000c2a:	3b01      	subs	r3, #1
 8000c2c:	4a0b      	ldr	r2, [pc, #44]	; (8000c5c <LL_DMA_SetMemorySize+0x40>)
 8000c2e:	5cd3      	ldrb	r3, [r2, r3]
 8000c30:	001a      	movs	r2, r3
 8000c32:	68fb      	ldr	r3, [r7, #12]
 8000c34:	18d3      	adds	r3, r2, r3
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	4a09      	ldr	r2, [pc, #36]	; (8000c60 <LL_DMA_SetMemorySize+0x44>)
 8000c3a:	4013      	ands	r3, r2
 8000c3c:	0019      	movs	r1, r3
 8000c3e:	68bb      	ldr	r3, [r7, #8]
 8000c40:	3b01      	subs	r3, #1
 8000c42:	4a06      	ldr	r2, [pc, #24]	; (8000c5c <LL_DMA_SetMemorySize+0x40>)
 8000c44:	5cd3      	ldrb	r3, [r2, r3]
 8000c46:	001a      	movs	r2, r3
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	18d3      	adds	r3, r2, r3
 8000c4c:	687a      	ldr	r2, [r7, #4]
 8000c4e:	430a      	orrs	r2, r1
 8000c50:	601a      	str	r2, [r3, #0]
             MemoryOrM2MDstDataSize);
}
 8000c52:	46c0      	nop			; (mov r8, r8)
 8000c54:	46bd      	mov	sp, r7
 8000c56:	b004      	add	sp, #16
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	46c0      	nop			; (mov r8, r8)
 8000c5c:	08003b70 	.word	0x08003b70
 8000c60:	fffff3ff 	.word	0xfffff3ff

08000c64 <LL_DMA_SetChannelPriorityLevel>:
  *         @arg @ref LL_DMA_PRIORITY_HIGH
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelPriorityLevel(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Priority)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b084      	sub	sp, #16
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	60f8      	str	r0, [r7, #12]
 8000c6c:	60b9      	str	r1, [r7, #8]
 8000c6e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 8000c70:	68bb      	ldr	r3, [r7, #8]
 8000c72:	3b01      	subs	r3, #1
 8000c74:	4a0b      	ldr	r2, [pc, #44]	; (8000ca4 <LL_DMA_SetChannelPriorityLevel+0x40>)
 8000c76:	5cd3      	ldrb	r3, [r2, r3]
 8000c78:	001a      	movs	r2, r3
 8000c7a:	68fb      	ldr	r3, [r7, #12]
 8000c7c:	18d3      	adds	r3, r2, r3
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4a09      	ldr	r2, [pc, #36]	; (8000ca8 <LL_DMA_SetChannelPriorityLevel+0x44>)
 8000c82:	4013      	ands	r3, r2
 8000c84:	0019      	movs	r1, r3
 8000c86:	68bb      	ldr	r3, [r7, #8]
 8000c88:	3b01      	subs	r3, #1
 8000c8a:	4a06      	ldr	r2, [pc, #24]	; (8000ca4 <LL_DMA_SetChannelPriorityLevel+0x40>)
 8000c8c:	5cd3      	ldrb	r3, [r2, r3]
 8000c8e:	001a      	movs	r2, r3
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	18d3      	adds	r3, r2, r3
 8000c94:	687a      	ldr	r2, [r7, #4]
 8000c96:	430a      	orrs	r2, r1
 8000c98:	601a      	str	r2, [r3, #0]
             Priority);
}
 8000c9a:	46c0      	nop			; (mov r8, r8)
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	b004      	add	sp, #16
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	46c0      	nop			; (mov r8, r8)
 8000ca4:	08003b70 	.word	0x08003b70
 8000ca8:	ffffcfff 	.word	0xffffcfff

08000cac <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b084      	sub	sp, #16
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8000cb4:	4b07      	ldr	r3, [pc, #28]	; (8000cd4 <LL_AHB1_GRP1_EnableClock+0x28>)
 8000cb6:	6959      	ldr	r1, [r3, #20]
 8000cb8:	4b06      	ldr	r3, [pc, #24]	; (8000cd4 <LL_AHB1_GRP1_EnableClock+0x28>)
 8000cba:	687a      	ldr	r2, [r7, #4]
 8000cbc:	430a      	orrs	r2, r1
 8000cbe:	615a      	str	r2, [r3, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000cc0:	4b04      	ldr	r3, [pc, #16]	; (8000cd4 <LL_AHB1_GRP1_EnableClock+0x28>)
 8000cc2:	695b      	ldr	r3, [r3, #20]
 8000cc4:	687a      	ldr	r2, [r7, #4]
 8000cc6:	4013      	ands	r3, r2
 8000cc8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000cca:	68fb      	ldr	r3, [r7, #12]
}
 8000ccc:	46c0      	nop			; (mov r8, r8)
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	b004      	add	sp, #16
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	40021000 	.word	0x40021000

08000cd8 <LL_APB1_GRP2_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b084      	sub	sp, #16
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000ce0:	4b07      	ldr	r3, [pc, #28]	; (8000d00 <LL_APB1_GRP2_EnableClock+0x28>)
 8000ce2:	6999      	ldr	r1, [r3, #24]
 8000ce4:	4b06      	ldr	r3, [pc, #24]	; (8000d00 <LL_APB1_GRP2_EnableClock+0x28>)
 8000ce6:	687a      	ldr	r2, [r7, #4]
 8000ce8:	430a      	orrs	r2, r1
 8000cea:	619a      	str	r2, [r3, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000cec:	4b04      	ldr	r3, [pc, #16]	; (8000d00 <LL_APB1_GRP2_EnableClock+0x28>)
 8000cee:	699b      	ldr	r3, [r3, #24]
 8000cf0:	687a      	ldr	r2, [r7, #4]
 8000cf2:	4013      	ands	r3, r2
 8000cf4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000cf6:	68fb      	ldr	r3, [r7, #12]
}
 8000cf8:	46c0      	nop			; (mov r8, r8)
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	b004      	add	sp, #16
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	40021000 	.word	0x40021000

08000d04 <MX_ADC_Init>:
/* USER CODE BEGIN 0 */
/* USER CODE END 0 */

/* ADC init function */
void MX_ADC_Init(void)
{
 8000d04:	b5b0      	push	{r4, r5, r7, lr}
 8000d06:	b090      	sub	sp, #64	; 0x40
 8000d08:	af00      	add	r7, sp, #0
  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 8000d0a:	2530      	movs	r5, #48	; 0x30
 8000d0c:	197b      	adds	r3, r7, r5
 8000d0e:	0018      	movs	r0, r3
 8000d10:	2310      	movs	r3, #16
 8000d12:	001a      	movs	r2, r3
 8000d14:	2100      	movs	r1, #0
 8000d16:	f002 fef7 	bl	8003b08 <memset>
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8000d1a:	241c      	movs	r4, #28
 8000d1c:	193b      	adds	r3, r7, r4
 8000d1e:	0018      	movs	r0, r3
 8000d20:	2314      	movs	r3, #20
 8000d22:	001a      	movs	r2, r3
 8000d24:	2100      	movs	r1, #0
 8000d26:	f002 feef 	bl	8003b08 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d2a:	1d3b      	adds	r3, r7, #4
 8000d2c:	0018      	movs	r0, r3
 8000d2e:	2318      	movs	r3, #24
 8000d30:	001a      	movs	r2, r3
 8000d32:	2100      	movs	r1, #0
 8000d34:	f002 fee8 	bl	8003b08 <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_ADC1);
 8000d38:	2380      	movs	r3, #128	; 0x80
 8000d3a:	009b      	lsls	r3, r3, #2
 8000d3c:	0018      	movs	r0, r3
 8000d3e:	f7ff ffcb 	bl	8000cd8 <LL_APB1_GRP2_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000d42:	2380      	movs	r3, #128	; 0x80
 8000d44:	029b      	lsls	r3, r3, #10
 8000d46:	0018      	movs	r0, r3
 8000d48:	f7ff ffb0 	bl	8000cac <LL_AHB1_GRP1_EnableClock>
  /**ADC GPIO Configuration
  PA2   ------> ADC_IN2
  PA3   ------> ADC_IN3
  PA4   ------> ADC_IN4
  */
  GPIO_InitStruct.Pin = ac_sample_Pin;
 8000d4c:	1d3b      	adds	r3, r7, #4
 8000d4e:	2204      	movs	r2, #4
 8000d50:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000d52:	1d3b      	adds	r3, r7, #4
 8000d54:	2203      	movs	r2, #3
 8000d56:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000d58:	1d3b      	adds	r3, r7, #4
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(ac_sample_GPIO_Port, &GPIO_InitStruct);
 8000d5e:	1d3a      	adds	r2, r7, #4
 8000d60:	2390      	movs	r3, #144	; 0x90
 8000d62:	05db      	lsls	r3, r3, #23
 8000d64:	0011      	movs	r1, r2
 8000d66:	0018      	movs	r0, r3
 8000d68:	f002 fb06 	bl	8003378 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 8000d6c:	1d3b      	adds	r3, r7, #4
 8000d6e:	2208      	movs	r2, #8
 8000d70:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000d72:	1d3b      	adds	r3, r7, #4
 8000d74:	2203      	movs	r2, #3
 8000d76:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000d78:	1d3b      	adds	r3, r7, #4
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d7e:	1d3a      	adds	r2, r7, #4
 8000d80:	2390      	movs	r3, #144	; 0x90
 8000d82:	05db      	lsls	r3, r3, #23
 8000d84:	0011      	movs	r1, r2
 8000d86:	0018      	movs	r0, r3
 8000d88:	f002 faf6 	bl	8003378 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = bat_adc_Pin;
 8000d8c:	1d3b      	adds	r3, r7, #4
 8000d8e:	2210      	movs	r2, #16
 8000d90:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000d92:	1d3b      	adds	r3, r7, #4
 8000d94:	2203      	movs	r2, #3
 8000d96:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000d98:	1d3b      	adds	r3, r7, #4
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(bat_adc_GPIO_Port, &GPIO_InitStruct);
 8000d9e:	1d3a      	adds	r2, r7, #4
 8000da0:	2390      	movs	r3, #144	; 0x90
 8000da2:	05db      	lsls	r3, r3, #23
 8000da4:	0011      	movs	r1, r2
 8000da6:	0018      	movs	r0, r3
 8000da8:	f002 fae6 	bl	8003378 <LL_GPIO_Init>

  /* ADC DMA Init */

  /* ADC Init */
  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_1, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8000dac:	4b3a      	ldr	r3, [pc, #232]	; (8000e98 <MX_ADC_Init+0x194>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	2101      	movs	r1, #1
 8000db2:	0018      	movs	r0, r3
 8000db4:	f7ff fe84 	bl	8000ac0 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PRIORITY_HIGH);
 8000db8:	2380      	movs	r3, #128	; 0x80
 8000dba:	019b      	lsls	r3, r3, #6
 8000dbc:	4836      	ldr	r0, [pc, #216]	; (8000e98 <MX_ADC_Init+0x194>)
 8000dbe:	001a      	movs	r2, r3
 8000dc0:	2101      	movs	r1, #1
 8000dc2:	f7ff ff4f 	bl	8000c64 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MODE_CIRCULAR);
 8000dc6:	4b34      	ldr	r3, [pc, #208]	; (8000e98 <MX_ADC_Init+0x194>)
 8000dc8:	2220      	movs	r2, #32
 8000dca:	2101      	movs	r1, #1
 8000dcc:	0018      	movs	r0, r3
 8000dce:	f7ff fe9b 	bl	8000b08 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PERIPH_NOINCREMENT);
 8000dd2:	4b31      	ldr	r3, [pc, #196]	; (8000e98 <MX_ADC_Init+0x194>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	2101      	movs	r1, #1
 8000dd8:	0018      	movs	r0, r3
 8000dda:	f7ff feb7 	bl	8000b4c <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MEMORY_INCREMENT);
 8000dde:	4b2e      	ldr	r3, [pc, #184]	; (8000e98 <MX_ADC_Init+0x194>)
 8000de0:	2280      	movs	r2, #128	; 0x80
 8000de2:	2101      	movs	r1, #1
 8000de4:	0018      	movs	r0, r3
 8000de6:	f7ff fed3 	bl	8000b90 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PDATAALIGN_HALFWORD);
 8000dea:	2380      	movs	r3, #128	; 0x80
 8000dec:	005b      	lsls	r3, r3, #1
 8000dee:	482a      	ldr	r0, [pc, #168]	; (8000e98 <MX_ADC_Init+0x194>)
 8000df0:	001a      	movs	r2, r3
 8000df2:	2101      	movs	r1, #1
 8000df4:	f7ff feee 	bl	8000bd4 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MDATAALIGN_HALFWORD);
 8000df8:	2380      	movs	r3, #128	; 0x80
 8000dfa:	00db      	lsls	r3, r3, #3
 8000dfc:	4826      	ldr	r0, [pc, #152]	; (8000e98 <MX_ADC_Init+0x194>)
 8000dfe:	001a      	movs	r2, r3
 8000e00:	2101      	movs	r1, #1
 8000e02:	f7ff ff0b 	bl	8000c1c <LL_DMA_SetMemorySize>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerChAdd(ADC1, LL_ADC_CHANNEL_2);
 8000e06:	4a25      	ldr	r2, [pc, #148]	; (8000e9c <MX_ADC_Init+0x198>)
 8000e08:	4b25      	ldr	r3, [pc, #148]	; (8000ea0 <MX_ADC_Init+0x19c>)
 8000e0a:	0011      	movs	r1, r2
 8000e0c:	0018      	movs	r0, r3
 8000e0e:	f7ff fe45 	bl	8000a9c <LL_ADC_REG_SetSequencerChAdd>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerChAdd(ADC1, LL_ADC_CHANNEL_3);
 8000e12:	4a24      	ldr	r2, [pc, #144]	; (8000ea4 <MX_ADC_Init+0x1a0>)
 8000e14:	4b22      	ldr	r3, [pc, #136]	; (8000ea0 <MX_ADC_Init+0x19c>)
 8000e16:	0011      	movs	r1, r2
 8000e18:	0018      	movs	r0, r3
 8000e1a:	f7ff fe3f 	bl	8000a9c <LL_ADC_REG_SetSequencerChAdd>
  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerChAdd(ADC1, LL_ADC_CHANNEL_4);
 8000e1e:	4a22      	ldr	r2, [pc, #136]	; (8000ea8 <MX_ADC_Init+0x1a4>)
 8000e20:	4b1f      	ldr	r3, [pc, #124]	; (8000ea0 <MX_ADC_Init+0x19c>)
 8000e22:	0011      	movs	r1, r2
 8000e24:	0018      	movs	r0, r3
 8000e26:	f7ff fe39 	bl	8000a9c <LL_ADC_REG_SetSequencerChAdd>
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  ADC_InitStruct.Clock = LL_ADC_CLOCK_SYNC_PCLK_DIV2;
 8000e2a:	197b      	adds	r3, r7, r5
 8000e2c:	2280      	movs	r2, #128	; 0x80
 8000e2e:	05d2      	lsls	r2, r2, #23
 8000e30:	601a      	str	r2, [r3, #0]
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 8000e32:	197b      	adds	r3, r7, r5
 8000e34:	2200      	movs	r2, #0
 8000e36:	605a      	str	r2, [r3, #4]
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8000e38:	197b      	adds	r3, r7, r5
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	609a      	str	r2, [r3, #8]
  ADC_InitStruct.LowPowerMode = LL_ADC_LP_MODE_NONE;
 8000e3e:	197b      	adds	r3, r7, r5
 8000e40:	2200      	movs	r2, #0
 8000e42:	60da      	str	r2, [r3, #12]
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 8000e44:	197b      	adds	r3, r7, r5
 8000e46:	4a16      	ldr	r2, [pc, #88]	; (8000ea0 <MX_ADC_Init+0x19c>)
 8000e48:	0019      	movs	r1, r3
 8000e4a:	0010      	movs	r0, r2
 8000e4c:	f002 f862 	bl	8002f14 <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 8000e50:	193b      	adds	r3, r7, r4
 8000e52:	2200      	movs	r2, #0
 8000e54:	601a      	str	r2, [r3, #0]
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 8000e56:	193b      	adds	r3, r7, r4
 8000e58:	2200      	movs	r2, #0
 8000e5a:	605a      	str	r2, [r3, #4]
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_CONTINUOUS;
 8000e5c:	193b      	adds	r3, r7, r4
 8000e5e:	2280      	movs	r2, #128	; 0x80
 8000e60:	0192      	lsls	r2, r2, #6
 8000e62:	609a      	str	r2, [r3, #8]
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_UNLIMITED;
 8000e64:	193b      	adds	r3, r7, r4
 8000e66:	2203      	movs	r2, #3
 8000e68:	60da      	str	r2, [r3, #12]
  ADC_REG_InitStruct.Overrun = LL_ADC_REG_OVR_DATA_PRESERVED;
 8000e6a:	193b      	adds	r3, r7, r4
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	611a      	str	r2, [r3, #16]
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 8000e70:	193b      	adds	r3, r7, r4
 8000e72:	4a0b      	ldr	r2, [pc, #44]	; (8000ea0 <MX_ADC_Init+0x19c>)
 8000e74:	0019      	movs	r1, r3
 8000e76:	0010      	movs	r0, r2
 8000e78:	f002 f882 	bl	8002f80 <LL_ADC_REG_Init>
  LL_ADC_REG_SetSequencerScanDirection(ADC1, LL_ADC_REG_SEQ_SCAN_DIR_BACKWARD);
 8000e7c:	4b08      	ldr	r3, [pc, #32]	; (8000ea0 <MX_ADC_Init+0x19c>)
 8000e7e:	2104      	movs	r1, #4
 8000e80:	0018      	movs	r0, r3
 8000e82:	f7ff fdf9 	bl	8000a78 <LL_ADC_REG_SetSequencerScanDirection>
  LL_ADC_SetSamplingTimeCommonChannels(ADC1, LL_ADC_SAMPLINGTIME_71CYCLES_5);
 8000e86:	4b06      	ldr	r3, [pc, #24]	; (8000ea0 <MX_ADC_Init+0x19c>)
 8000e88:	2106      	movs	r1, #6
 8000e8a:	0018      	movs	r0, r3
 8000e8c:	f7ff fde2 	bl	8000a54 <LL_ADC_SetSamplingTimeCommonChannels>

}
 8000e90:	46c0      	nop			; (mov r8, r8)
 8000e92:	46bd      	mov	sp, r7
 8000e94:	b010      	add	sp, #64	; 0x40
 8000e96:	bdb0      	pop	{r4, r5, r7, pc}
 8000e98:	40020000 	.word	0x40020000
 8000e9c:	08000004 	.word	0x08000004
 8000ea0:	40012400 	.word	0x40012400
 8000ea4:	0c000008 	.word	0x0c000008
 8000ea8:	10000010 	.word	0x10000010

08000eac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	0002      	movs	r2, r0
 8000eb4:	1dfb      	adds	r3, r7, #7
 8000eb6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000eb8:	1dfb      	adds	r3, r7, #7
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	2b7f      	cmp	r3, #127	; 0x7f
 8000ebe:	d809      	bhi.n	8000ed4 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ec0:	1dfb      	adds	r3, r7, #7
 8000ec2:	781b      	ldrb	r3, [r3, #0]
 8000ec4:	001a      	movs	r2, r3
 8000ec6:	231f      	movs	r3, #31
 8000ec8:	401a      	ands	r2, r3
 8000eca:	4b04      	ldr	r3, [pc, #16]	; (8000edc <__NVIC_EnableIRQ+0x30>)
 8000ecc:	2101      	movs	r1, #1
 8000ece:	4091      	lsls	r1, r2
 8000ed0:	000a      	movs	r2, r1
 8000ed2:	601a      	str	r2, [r3, #0]
  }
}
 8000ed4:	46c0      	nop			; (mov r8, r8)
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	b002      	add	sp, #8
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	e000e100 	.word	0xe000e100

08000ee0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ee0:	b590      	push	{r4, r7, lr}
 8000ee2:	b083      	sub	sp, #12
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	0002      	movs	r2, r0
 8000ee8:	6039      	str	r1, [r7, #0]
 8000eea:	1dfb      	adds	r3, r7, #7
 8000eec:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000eee:	1dfb      	adds	r3, r7, #7
 8000ef0:	781b      	ldrb	r3, [r3, #0]
 8000ef2:	2b7f      	cmp	r3, #127	; 0x7f
 8000ef4:	d828      	bhi.n	8000f48 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ef6:	4a2f      	ldr	r2, [pc, #188]	; (8000fb4 <__NVIC_SetPriority+0xd4>)
 8000ef8:	1dfb      	adds	r3, r7, #7
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	b25b      	sxtb	r3, r3
 8000efe:	089b      	lsrs	r3, r3, #2
 8000f00:	33c0      	adds	r3, #192	; 0xc0
 8000f02:	009b      	lsls	r3, r3, #2
 8000f04:	589b      	ldr	r3, [r3, r2]
 8000f06:	1dfa      	adds	r2, r7, #7
 8000f08:	7812      	ldrb	r2, [r2, #0]
 8000f0a:	0011      	movs	r1, r2
 8000f0c:	2203      	movs	r2, #3
 8000f0e:	400a      	ands	r2, r1
 8000f10:	00d2      	lsls	r2, r2, #3
 8000f12:	21ff      	movs	r1, #255	; 0xff
 8000f14:	4091      	lsls	r1, r2
 8000f16:	000a      	movs	r2, r1
 8000f18:	43d2      	mvns	r2, r2
 8000f1a:	401a      	ands	r2, r3
 8000f1c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	019b      	lsls	r3, r3, #6
 8000f22:	22ff      	movs	r2, #255	; 0xff
 8000f24:	401a      	ands	r2, r3
 8000f26:	1dfb      	adds	r3, r7, #7
 8000f28:	781b      	ldrb	r3, [r3, #0]
 8000f2a:	0018      	movs	r0, r3
 8000f2c:	2303      	movs	r3, #3
 8000f2e:	4003      	ands	r3, r0
 8000f30:	00db      	lsls	r3, r3, #3
 8000f32:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f34:	481f      	ldr	r0, [pc, #124]	; (8000fb4 <__NVIC_SetPriority+0xd4>)
 8000f36:	1dfb      	adds	r3, r7, #7
 8000f38:	781b      	ldrb	r3, [r3, #0]
 8000f3a:	b25b      	sxtb	r3, r3
 8000f3c:	089b      	lsrs	r3, r3, #2
 8000f3e:	430a      	orrs	r2, r1
 8000f40:	33c0      	adds	r3, #192	; 0xc0
 8000f42:	009b      	lsls	r3, r3, #2
 8000f44:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000f46:	e031      	b.n	8000fac <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f48:	4a1b      	ldr	r2, [pc, #108]	; (8000fb8 <__NVIC_SetPriority+0xd8>)
 8000f4a:	1dfb      	adds	r3, r7, #7
 8000f4c:	781b      	ldrb	r3, [r3, #0]
 8000f4e:	0019      	movs	r1, r3
 8000f50:	230f      	movs	r3, #15
 8000f52:	400b      	ands	r3, r1
 8000f54:	3b08      	subs	r3, #8
 8000f56:	089b      	lsrs	r3, r3, #2
 8000f58:	3306      	adds	r3, #6
 8000f5a:	009b      	lsls	r3, r3, #2
 8000f5c:	18d3      	adds	r3, r2, r3
 8000f5e:	3304      	adds	r3, #4
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	1dfa      	adds	r2, r7, #7
 8000f64:	7812      	ldrb	r2, [r2, #0]
 8000f66:	0011      	movs	r1, r2
 8000f68:	2203      	movs	r2, #3
 8000f6a:	400a      	ands	r2, r1
 8000f6c:	00d2      	lsls	r2, r2, #3
 8000f6e:	21ff      	movs	r1, #255	; 0xff
 8000f70:	4091      	lsls	r1, r2
 8000f72:	000a      	movs	r2, r1
 8000f74:	43d2      	mvns	r2, r2
 8000f76:	401a      	ands	r2, r3
 8000f78:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	019b      	lsls	r3, r3, #6
 8000f7e:	22ff      	movs	r2, #255	; 0xff
 8000f80:	401a      	ands	r2, r3
 8000f82:	1dfb      	adds	r3, r7, #7
 8000f84:	781b      	ldrb	r3, [r3, #0]
 8000f86:	0018      	movs	r0, r3
 8000f88:	2303      	movs	r3, #3
 8000f8a:	4003      	ands	r3, r0
 8000f8c:	00db      	lsls	r3, r3, #3
 8000f8e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f90:	4809      	ldr	r0, [pc, #36]	; (8000fb8 <__NVIC_SetPriority+0xd8>)
 8000f92:	1dfb      	adds	r3, r7, #7
 8000f94:	781b      	ldrb	r3, [r3, #0]
 8000f96:	001c      	movs	r4, r3
 8000f98:	230f      	movs	r3, #15
 8000f9a:	4023      	ands	r3, r4
 8000f9c:	3b08      	subs	r3, #8
 8000f9e:	089b      	lsrs	r3, r3, #2
 8000fa0:	430a      	orrs	r2, r1
 8000fa2:	3306      	adds	r3, #6
 8000fa4:	009b      	lsls	r3, r3, #2
 8000fa6:	18c3      	adds	r3, r0, r3
 8000fa8:	3304      	adds	r3, #4
 8000faa:	601a      	str	r2, [r3, #0]
}
 8000fac:	46c0      	nop			; (mov r8, r8)
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	b003      	add	sp, #12
 8000fb2:	bd90      	pop	{r4, r7, pc}
 8000fb4:	e000e100 	.word	0xe000e100
 8000fb8:	e000ed00 	.word	0xe000ed00

08000fbc <LL_AHB1_GRP1_EnableClock>:
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b084      	sub	sp, #16
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8000fc4:	4b07      	ldr	r3, [pc, #28]	; (8000fe4 <LL_AHB1_GRP1_EnableClock+0x28>)
 8000fc6:	6959      	ldr	r1, [r3, #20]
 8000fc8:	4b06      	ldr	r3, [pc, #24]	; (8000fe4 <LL_AHB1_GRP1_EnableClock+0x28>)
 8000fca:	687a      	ldr	r2, [r7, #4]
 8000fcc:	430a      	orrs	r2, r1
 8000fce:	615a      	str	r2, [r3, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000fd0:	4b04      	ldr	r3, [pc, #16]	; (8000fe4 <LL_AHB1_GRP1_EnableClock+0x28>)
 8000fd2:	695b      	ldr	r3, [r3, #20]
 8000fd4:	687a      	ldr	r2, [r7, #4]
 8000fd6:	4013      	ands	r3, r2
 8000fd8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000fda:	68fb      	ldr	r3, [r7, #12]
}
 8000fdc:	46c0      	nop			; (mov r8, r8)
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	b004      	add	sp, #16
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	40021000 	.word	0x40021000

08000fe8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0

  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 8000fec:	2001      	movs	r0, #1
 8000fee:	f7ff ffe5 	bl	8000fbc <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel1_IRQn, 0);
 8000ff2:	2100      	movs	r1, #0
 8000ff4:	2009      	movs	r0, #9
 8000ff6:	f7ff ff73 	bl	8000ee0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000ffa:	2009      	movs	r0, #9
 8000ffc:	f7ff ff56 	bl	8000eac <__NVIC_EnableIRQ>

}
 8001000:	46c0      	nop			; (mov r8, r8)
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
	...

08001008 <LL_AHB1_GRP1_EnableClock>:
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b084      	sub	sp, #16
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8001010:	4b07      	ldr	r3, [pc, #28]	; (8001030 <LL_AHB1_GRP1_EnableClock+0x28>)
 8001012:	6959      	ldr	r1, [r3, #20]
 8001014:	4b06      	ldr	r3, [pc, #24]	; (8001030 <LL_AHB1_GRP1_EnableClock+0x28>)
 8001016:	687a      	ldr	r2, [r7, #4]
 8001018:	430a      	orrs	r2, r1
 800101a:	615a      	str	r2, [r3, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 800101c:	4b04      	ldr	r3, [pc, #16]	; (8001030 <LL_AHB1_GRP1_EnableClock+0x28>)
 800101e:	695b      	ldr	r3, [r3, #20]
 8001020:	687a      	ldr	r2, [r7, #4]
 8001022:	4013      	ands	r3, r2
 8001024:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001026:	68fb      	ldr	r3, [r7, #12]
}
 8001028:	46c0      	nop			; (mov r8, r8)
 800102a:	46bd      	mov	sp, r7
 800102c:	b004      	add	sp, #16
 800102e:	bd80      	pop	{r7, pc}
 8001030:	40021000 	.word	0x40021000

08001034 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8001034:	b590      	push	{r4, r7, lr}
 8001036:	b083      	sub	sp, #12
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
 800103c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], SYSCFG_EXTICR1_EXTI0 << (Line >> 16), Port << (Line >> 16));
 800103e:	4a0f      	ldr	r2, [pc, #60]	; (800107c <LL_SYSCFG_SetEXTISource+0x48>)
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	21ff      	movs	r1, #255	; 0xff
 8001044:	400b      	ands	r3, r1
 8001046:	3302      	adds	r3, #2
 8001048:	009b      	lsls	r3, r3, #2
 800104a:	589b      	ldr	r3, [r3, r2]
 800104c:	683a      	ldr	r2, [r7, #0]
 800104e:	0c12      	lsrs	r2, r2, #16
 8001050:	210f      	movs	r1, #15
 8001052:	4091      	lsls	r1, r2
 8001054:	000a      	movs	r2, r1
 8001056:	43d2      	mvns	r2, r2
 8001058:	401a      	ands	r2, r3
 800105a:	0011      	movs	r1, r2
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	0c1b      	lsrs	r3, r3, #16
 8001060:	687a      	ldr	r2, [r7, #4]
 8001062:	409a      	lsls	r2, r3
 8001064:	4805      	ldr	r0, [pc, #20]	; (800107c <LL_SYSCFG_SetEXTISource+0x48>)
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	24ff      	movs	r4, #255	; 0xff
 800106a:	4023      	ands	r3, r4
 800106c:	430a      	orrs	r2, r1
 800106e:	3302      	adds	r3, #2
 8001070:	009b      	lsls	r3, r3, #2
 8001072:	501a      	str	r2, [r3, r0]
}
 8001074:	46c0      	nop			; (mov r8, r8)
 8001076:	46bd      	mov	sp, r7
 8001078:	b003      	add	sp, #12
 800107a:	bd90      	pop	{r4, r7, pc}
 800107c:	40010000 	.word	0x40010000

08001080 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b084      	sub	sp, #16
 8001084:	af00      	add	r7, sp, #0
 8001086:	60f8      	str	r0, [r7, #12]
 8001088:	60b9      	str	r1, [r7, #8]
 800108a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODER0), ((Pin * Pin) * Mode));
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	6819      	ldr	r1, [r3, #0]
 8001090:	68bb      	ldr	r3, [r7, #8]
 8001092:	435b      	muls	r3, r3
 8001094:	001a      	movs	r2, r3
 8001096:	0013      	movs	r3, r2
 8001098:	005b      	lsls	r3, r3, #1
 800109a:	189b      	adds	r3, r3, r2
 800109c:	43db      	mvns	r3, r3
 800109e:	400b      	ands	r3, r1
 80010a0:	001a      	movs	r2, r3
 80010a2:	68bb      	ldr	r3, [r7, #8]
 80010a4:	435b      	muls	r3, r3
 80010a6:	6879      	ldr	r1, [r7, #4]
 80010a8:	434b      	muls	r3, r1
 80010aa:	431a      	orrs	r2, r3
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	601a      	str	r2, [r3, #0]
}
 80010b0:	46c0      	nop			; (mov r8, r8)
 80010b2:	46bd      	mov	sp, r7
 80010b4:	b004      	add	sp, #16
 80010b6:	bd80      	pop	{r7, pc}

080010b8 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b084      	sub	sp, #16
 80010bc:	af00      	add	r7, sp, #0
 80010be:	60f8      	str	r0, [r7, #12]
 80010c0:	60b9      	str	r1, [r7, #8]
 80010c2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPDR0), ((Pin * Pin) * Pull));
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	68d9      	ldr	r1, [r3, #12]
 80010c8:	68bb      	ldr	r3, [r7, #8]
 80010ca:	435b      	muls	r3, r3
 80010cc:	001a      	movs	r2, r3
 80010ce:	0013      	movs	r3, r2
 80010d0:	005b      	lsls	r3, r3, #1
 80010d2:	189b      	adds	r3, r3, r2
 80010d4:	43db      	mvns	r3, r3
 80010d6:	400b      	ands	r3, r1
 80010d8:	001a      	movs	r2, r3
 80010da:	68bb      	ldr	r3, [r7, #8]
 80010dc:	435b      	muls	r3, r3
 80010de:	6879      	ldr	r1, [r7, #4]
 80010e0:	434b      	muls	r3, r1
 80010e2:	431a      	orrs	r2, r3
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	60da      	str	r2, [r3, #12]
}
 80010e8:	46c0      	nop			; (mov r8, r8)
 80010ea:	46bd      	mov	sp, r7
 80010ec:	b004      	add	sp, #16
 80010ee:	bd80      	pop	{r7, pc}

080010f0 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
 80010f8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	683a      	ldr	r2, [r7, #0]
 80010fe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001100:	46c0      	nop			; (mov r8, r8)
 8001102:	46bd      	mov	sp, r7
 8001104:	b002      	add	sp, #8
 8001106:	bd80      	pop	{r7, pc}

08001108 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001108:	b590      	push	{r4, r7, lr}
 800110a:	b089      	sub	sp, #36	; 0x24
 800110c:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 800110e:	2418      	movs	r4, #24
 8001110:	193b      	adds	r3, r7, r4
 8001112:	0018      	movs	r0, r3
 8001114:	2308      	movs	r3, #8
 8001116:	001a      	movs	r2, r3
 8001118:	2100      	movs	r1, #0
 800111a:	f002 fcf5 	bl	8003b08 <memset>
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800111e:	003b      	movs	r3, r7
 8001120:	0018      	movs	r0, r3
 8001122:	2318      	movs	r3, #24
 8001124:	001a      	movs	r2, r3
 8001126:	2100      	movs	r1, #0
 8001128:	f002 fcee 	bl	8003b08 <memset>

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 800112c:	2380      	movs	r3, #128	; 0x80
 800112e:	031b      	lsls	r3, r3, #12
 8001130:	0018      	movs	r0, r3
 8001132:	f7ff ff69 	bl	8001008 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001136:	2380      	movs	r3, #128	; 0x80
 8001138:	029b      	lsls	r3, r3, #10
 800113a:	0018      	movs	r0, r3
 800113c:	f7ff ff64 	bl	8001008 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001140:	2380      	movs	r3, #128	; 0x80
 8001142:	02db      	lsls	r3, r3, #11
 8001144:	0018      	movs	r0, r3
 8001146:	f7ff ff5f 	bl	8001008 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(er_GPIO_Port, er_Pin);
 800114a:	2380      	movs	r3, #128	; 0x80
 800114c:	019b      	lsls	r3, r3, #6
 800114e:	4afe      	ldr	r2, [pc, #1016]	; (8001548 <MX_GPIO_Init+0x440>)
 8001150:	0019      	movs	r1, r3
 8001152:	0010      	movs	r0, r2
 8001154:	f7ff ffcc 	bl	80010f0 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(pwr_GPIO_Port, pwr_Pin);
 8001158:	2380      	movs	r3, #128	; 0x80
 800115a:	01db      	lsls	r3, r3, #7
 800115c:	4afa      	ldr	r2, [pc, #1000]	; (8001548 <MX_GPIO_Init+0x440>)
 800115e:	0019      	movs	r1, r3
 8001160:	0010      	movs	r0, r2
 8001162:	f7ff ffc5 	bl	80010f0 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(bat_l_GPIO_Port, bat_l_Pin);
 8001166:	2380      	movs	r3, #128	; 0x80
 8001168:	021b      	lsls	r3, r3, #8
 800116a:	4af7      	ldr	r2, [pc, #988]	; (8001548 <MX_GPIO_Init+0x440>)
 800116c:	0019      	movs	r1, r3
 800116e:	0010      	movs	r0, r2
 8001170:	f7ff ffbe 	bl	80010f0 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(oil_l_GPIO_Port, oil_l_Pin);
 8001174:	4bf5      	ldr	r3, [pc, #980]	; (800154c <MX_GPIO_Init+0x444>)
 8001176:	2104      	movs	r1, #4
 8001178:	0018      	movs	r0, r3
 800117a:	f7ff ffb9 	bl	80010f0 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(water_l_GPIO_Port, water_l_Pin);
 800117e:	2380      	movs	r3, #128	; 0x80
 8001180:	00db      	lsls	r3, r3, #3
 8001182:	4af2      	ldr	r2, [pc, #968]	; (800154c <MX_GPIO_Init+0x444>)
 8001184:	0019      	movs	r1, r3
 8001186:	0010      	movs	r0, r2
 8001188:	f7ff ffb2 	bl	80010f0 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(ol_l_GPIO_Port, ol_l_Pin);
 800118c:	2380      	movs	r3, #128	; 0x80
 800118e:	011b      	lsls	r3, r3, #4
 8001190:	4aee      	ldr	r2, [pc, #952]	; (800154c <MX_GPIO_Init+0x444>)
 8001192:	0019      	movs	r1, r3
 8001194:	0010      	movs	r0, r2
 8001196:	f7ff ffab 	bl	80010f0 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(emr_l_GPIO_Port, emr_l_Pin);
 800119a:	2380      	movs	r3, #128	; 0x80
 800119c:	015b      	lsls	r3, r3, #5
 800119e:	4aeb      	ldr	r2, [pc, #940]	; (800154c <MX_GPIO_Init+0x444>)
 80011a0:	0019      	movs	r1, r3
 80011a2:	0010      	movs	r0, r2
 80011a4:	f7ff ffa4 	bl	80010f0 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(feul_l_GPIO_Port, feul_l_Pin);
 80011a8:	2380      	movs	r3, #128	; 0x80
 80011aa:	019b      	lsls	r3, r3, #6
 80011ac:	4ae7      	ldr	r2, [pc, #924]	; (800154c <MX_GPIO_Init+0x444>)
 80011ae:	0019      	movs	r1, r3
 80011b0:	0010      	movs	r0, r2
 80011b2:	f7ff ff9d 	bl	80010f0 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(start_GPIO_Port, start_Pin);
 80011b6:	4be5      	ldr	r3, [pc, #916]	; (800154c <MX_GPIO_Init+0x444>)
 80011b8:	2110      	movs	r1, #16
 80011ba:	0018      	movs	r0, r3
 80011bc:	f7ff ff98 	bl	80010f0 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(gov_GPIO_Port, gov_Pin);
 80011c0:	4be2      	ldr	r3, [pc, #904]	; (800154c <MX_GPIO_Init+0x444>)
 80011c2:	2120      	movs	r1, #32
 80011c4:	0018      	movs	r0, r3
 80011c6:	f7ff ff93 	bl	80010f0 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(sir_GPIO_Port, sir_Pin);
 80011ca:	4be0      	ldr	r3, [pc, #896]	; (800154c <MX_GPIO_Init+0x444>)
 80011cc:	2140      	movs	r1, #64	; 0x40
 80011ce:	0018      	movs	r0, r3
 80011d0:	f7ff ff8e 	bl	80010f0 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(freq_l_GPIO_Port, freq_l_Pin);
 80011d4:	4bdd      	ldr	r3, [pc, #884]	; (800154c <MX_GPIO_Init+0x444>)
 80011d6:	2180      	movs	r1, #128	; 0x80
 80011d8:	0018      	movs	r0, r3
 80011da:	f7ff ff89 	bl	80010f0 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(vac_l_GPIO_Port, vac_l_Pin);
 80011de:	2380      	movs	r3, #128	; 0x80
 80011e0:	005b      	lsls	r3, r3, #1
 80011e2:	4ada      	ldr	r2, [pc, #872]	; (800154c <MX_GPIO_Init+0x444>)
 80011e4:	0019      	movs	r1, r3
 80011e6:	0010      	movs	r0, r2
 80011e8:	f7ff ff82 	bl	80010f0 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = er_Pin;
 80011ec:	003b      	movs	r3, r7
 80011ee:	2280      	movs	r2, #128	; 0x80
 80011f0:	0192      	lsls	r2, r2, #6
 80011f2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80011f4:	003b      	movs	r3, r7
 80011f6:	2201      	movs	r2, #1
 80011f8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80011fa:	003b      	movs	r3, r7
 80011fc:	2200      	movs	r2, #0
 80011fe:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001200:	003b      	movs	r3, r7
 8001202:	2200      	movs	r2, #0
 8001204:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001206:	003b      	movs	r3, r7
 8001208:	2200      	movs	r2, #0
 800120a:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(er_GPIO_Port, &GPIO_InitStruct);
 800120c:	003b      	movs	r3, r7
 800120e:	4ace      	ldr	r2, [pc, #824]	; (8001548 <MX_GPIO_Init+0x440>)
 8001210:	0019      	movs	r1, r3
 8001212:	0010      	movs	r0, r2
 8001214:	f002 f8b0 	bl	8003378 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = pwr_Pin;
 8001218:	003b      	movs	r3, r7
 800121a:	2280      	movs	r2, #128	; 0x80
 800121c:	01d2      	lsls	r2, r2, #7
 800121e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001220:	003b      	movs	r3, r7
 8001222:	2201      	movs	r2, #1
 8001224:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001226:	003b      	movs	r3, r7
 8001228:	2200      	movs	r2, #0
 800122a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800122c:	003b      	movs	r3, r7
 800122e:	2200      	movs	r2, #0
 8001230:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001232:	003b      	movs	r3, r7
 8001234:	2200      	movs	r2, #0
 8001236:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(pwr_GPIO_Port, &GPIO_InitStruct);
 8001238:	003b      	movs	r3, r7
 800123a:	4ac3      	ldr	r2, [pc, #780]	; (8001548 <MX_GPIO_Init+0x440>)
 800123c:	0019      	movs	r1, r3
 800123e:	0010      	movs	r0, r2
 8001240:	f002 f89a 	bl	8003378 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = bat_l_Pin;
 8001244:	003b      	movs	r3, r7
 8001246:	2280      	movs	r2, #128	; 0x80
 8001248:	0212      	lsls	r2, r2, #8
 800124a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800124c:	003b      	movs	r3, r7
 800124e:	2201      	movs	r2, #1
 8001250:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001252:	003b      	movs	r3, r7
 8001254:	2200      	movs	r2, #0
 8001256:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001258:	003b      	movs	r3, r7
 800125a:	2200      	movs	r2, #0
 800125c:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800125e:	003b      	movs	r3, r7
 8001260:	2200      	movs	r2, #0
 8001262:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(bat_l_GPIO_Port, &GPIO_InitStruct);
 8001264:	003b      	movs	r3, r7
 8001266:	4ab8      	ldr	r2, [pc, #736]	; (8001548 <MX_GPIO_Init+0x440>)
 8001268:	0019      	movs	r1, r3
 800126a:	0010      	movs	r0, r2
 800126c:	f002 f884 	bl	8003378 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = water_Pin;
 8001270:	003b      	movs	r3, r7
 8001272:	2280      	movs	r2, #128	; 0x80
 8001274:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001276:	003b      	movs	r3, r7
 8001278:	2200      	movs	r2, #0
 800127a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800127c:	003b      	movs	r3, r7
 800127e:	2200      	movs	r2, #0
 8001280:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(water_GPIO_Port, &GPIO_InitStruct);
 8001282:	003a      	movs	r2, r7
 8001284:	2390      	movs	r3, #144	; 0x90
 8001286:	05db      	lsls	r3, r3, #23
 8001288:	0011      	movs	r1, r2
 800128a:	0018      	movs	r0, r3
 800128c:	f002 f874 	bl	8003378 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = oil_Pin;
 8001290:	003b      	movs	r3, r7
 8001292:	2201      	movs	r2, #1
 8001294:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001296:	003b      	movs	r3, r7
 8001298:	2200      	movs	r2, #0
 800129a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800129c:	003b      	movs	r3, r7
 800129e:	2200      	movs	r2, #0
 80012a0:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(oil_GPIO_Port, &GPIO_InitStruct);
 80012a2:	003b      	movs	r3, r7
 80012a4:	4aa9      	ldr	r2, [pc, #676]	; (800154c <MX_GPIO_Init+0x444>)
 80012a6:	0019      	movs	r1, r3
 80012a8:	0010      	movs	r0, r2
 80012aa:	f002 f865 	bl	8003378 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = ol_Pin;
 80012ae:	003b      	movs	r3, r7
 80012b0:	2202      	movs	r2, #2
 80012b2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80012b4:	003b      	movs	r3, r7
 80012b6:	2200      	movs	r2, #0
 80012b8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80012ba:	003b      	movs	r3, r7
 80012bc:	2200      	movs	r2, #0
 80012be:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(ol_GPIO_Port, &GPIO_InitStruct);
 80012c0:	003b      	movs	r3, r7
 80012c2:	4aa2      	ldr	r2, [pc, #648]	; (800154c <MX_GPIO_Init+0x444>)
 80012c4:	0019      	movs	r1, r3
 80012c6:	0010      	movs	r0, r2
 80012c8:	f002 f856 	bl	8003378 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = oil_l_Pin;
 80012cc:	003b      	movs	r3, r7
 80012ce:	2204      	movs	r2, #4
 80012d0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80012d2:	003b      	movs	r3, r7
 80012d4:	2201      	movs	r2, #1
 80012d6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80012d8:	003b      	movs	r3, r7
 80012da:	2200      	movs	r2, #0
 80012dc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80012de:	003b      	movs	r3, r7
 80012e0:	2200      	movs	r2, #0
 80012e2:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80012e4:	003b      	movs	r3, r7
 80012e6:	2200      	movs	r2, #0
 80012e8:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(oil_l_GPIO_Port, &GPIO_InitStruct);
 80012ea:	003b      	movs	r3, r7
 80012ec:	4a97      	ldr	r2, [pc, #604]	; (800154c <MX_GPIO_Init+0x444>)
 80012ee:	0019      	movs	r1, r3
 80012f0:	0010      	movs	r0, r2
 80012f2:	f002 f841 	bl	8003378 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = water_l_Pin;
 80012f6:	003b      	movs	r3, r7
 80012f8:	2280      	movs	r2, #128	; 0x80
 80012fa:	00d2      	lsls	r2, r2, #3
 80012fc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80012fe:	003b      	movs	r3, r7
 8001300:	2201      	movs	r2, #1
 8001302:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001304:	003b      	movs	r3, r7
 8001306:	2200      	movs	r2, #0
 8001308:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800130a:	003b      	movs	r3, r7
 800130c:	2200      	movs	r2, #0
 800130e:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001310:	003b      	movs	r3, r7
 8001312:	2200      	movs	r2, #0
 8001314:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(water_l_GPIO_Port, &GPIO_InitStruct);
 8001316:	003b      	movs	r3, r7
 8001318:	4a8c      	ldr	r2, [pc, #560]	; (800154c <MX_GPIO_Init+0x444>)
 800131a:	0019      	movs	r1, r3
 800131c:	0010      	movs	r0, r2
 800131e:	f002 f82b 	bl	8003378 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = ol_l_Pin;
 8001322:	003b      	movs	r3, r7
 8001324:	2280      	movs	r2, #128	; 0x80
 8001326:	0112      	lsls	r2, r2, #4
 8001328:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800132a:	003b      	movs	r3, r7
 800132c:	2201      	movs	r2, #1
 800132e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001330:	003b      	movs	r3, r7
 8001332:	2200      	movs	r2, #0
 8001334:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001336:	003b      	movs	r3, r7
 8001338:	2200      	movs	r2, #0
 800133a:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800133c:	003b      	movs	r3, r7
 800133e:	2200      	movs	r2, #0
 8001340:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(ol_l_GPIO_Port, &GPIO_InitStruct);
 8001342:	003b      	movs	r3, r7
 8001344:	4a81      	ldr	r2, [pc, #516]	; (800154c <MX_GPIO_Init+0x444>)
 8001346:	0019      	movs	r1, r3
 8001348:	0010      	movs	r0, r2
 800134a:	f002 f815 	bl	8003378 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = emr_l_Pin;
 800134e:	003b      	movs	r3, r7
 8001350:	2280      	movs	r2, #128	; 0x80
 8001352:	0152      	lsls	r2, r2, #5
 8001354:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001356:	003b      	movs	r3, r7
 8001358:	2201      	movs	r2, #1
 800135a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800135c:	003b      	movs	r3, r7
 800135e:	2200      	movs	r2, #0
 8001360:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001362:	003b      	movs	r3, r7
 8001364:	2200      	movs	r2, #0
 8001366:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001368:	003b      	movs	r3, r7
 800136a:	2200      	movs	r2, #0
 800136c:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(emr_l_GPIO_Port, &GPIO_InitStruct);
 800136e:	003b      	movs	r3, r7
 8001370:	4a76      	ldr	r2, [pc, #472]	; (800154c <MX_GPIO_Init+0x444>)
 8001372:	0019      	movs	r1, r3
 8001374:	0010      	movs	r0, r2
 8001376:	f001 ffff 	bl	8003378 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = feul_l_Pin;
 800137a:	003b      	movs	r3, r7
 800137c:	2280      	movs	r2, #128	; 0x80
 800137e:	0192      	lsls	r2, r2, #6
 8001380:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001382:	003b      	movs	r3, r7
 8001384:	2201      	movs	r2, #1
 8001386:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001388:	003b      	movs	r3, r7
 800138a:	2200      	movs	r2, #0
 800138c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800138e:	003b      	movs	r3, r7
 8001390:	2200      	movs	r2, #0
 8001392:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001394:	003b      	movs	r3, r7
 8001396:	2200      	movs	r2, #0
 8001398:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(feul_l_GPIO_Port, &GPIO_InitStruct);
 800139a:	003b      	movs	r3, r7
 800139c:	4a6b      	ldr	r2, [pc, #428]	; (800154c <MX_GPIO_Init+0x444>)
 800139e:	0019      	movs	r1, r3
 80013a0:	0010      	movs	r0, r2
 80013a2:	f001 ffe9 	bl	8003378 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = gen_Pin;
 80013a6:	003b      	movs	r3, r7
 80013a8:	2280      	movs	r2, #128	; 0x80
 80013aa:	01d2      	lsls	r2, r2, #7
 80013ac:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80013ae:	003b      	movs	r3, r7
 80013b0:	2200      	movs	r2, #0
 80013b2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80013b4:	003b      	movs	r3, r7
 80013b6:	2200      	movs	r2, #0
 80013b8:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(gen_GPIO_Port, &GPIO_InitStruct);
 80013ba:	003b      	movs	r3, r7
 80013bc:	4a63      	ldr	r2, [pc, #396]	; (800154c <MX_GPIO_Init+0x444>)
 80013be:	0019      	movs	r1, r3
 80013c0:	0010      	movs	r0, r2
 80013c2:	f001 ffd9 	bl	8003378 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = feul_Pin;
 80013c6:	003b      	movs	r3, r7
 80013c8:	2280      	movs	r2, #128	; 0x80
 80013ca:	0212      	lsls	r2, r2, #8
 80013cc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80013ce:	003b      	movs	r3, r7
 80013d0:	2200      	movs	r2, #0
 80013d2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80013d4:	003b      	movs	r3, r7
 80013d6:	2200      	movs	r2, #0
 80013d8:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(feul_GPIO_Port, &GPIO_InitStruct);
 80013da:	003b      	movs	r3, r7
 80013dc:	4a5b      	ldr	r2, [pc, #364]	; (800154c <MX_GPIO_Init+0x444>)
 80013de:	0019      	movs	r1, r3
 80013e0:	0010      	movs	r0, r2
 80013e2:	f001 ffc9 	bl	8003378 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = emr_Pin;
 80013e6:	003b      	movs	r3, r7
 80013e8:	2280      	movs	r2, #128	; 0x80
 80013ea:	0052      	lsls	r2, r2, #1
 80013ec:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80013ee:	003b      	movs	r3, r7
 80013f0:	2200      	movs	r2, #0
 80013f2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80013f4:	003b      	movs	r3, r7
 80013f6:	2200      	movs	r2, #0
 80013f8:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(emr_GPIO_Port, &GPIO_InitStruct);
 80013fa:	003a      	movs	r2, r7
 80013fc:	2390      	movs	r3, #144	; 0x90
 80013fe:	05db      	lsls	r3, r3, #23
 8001400:	0011      	movs	r1, r2
 8001402:	0018      	movs	r0, r3
 8001404:	f001 ffb8 	bl	8003378 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = mute_Pin;
 8001408:	003b      	movs	r3, r7
 800140a:	2280      	movs	r2, #128	; 0x80
 800140c:	0212      	lsls	r2, r2, #8
 800140e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001410:	003b      	movs	r3, r7
 8001412:	2200      	movs	r2, #0
 8001414:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001416:	003b      	movs	r3, r7
 8001418:	2200      	movs	r2, #0
 800141a:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(mute_GPIO_Port, &GPIO_InitStruct);
 800141c:	003a      	movs	r2, r7
 800141e:	2390      	movs	r3, #144	; 0x90
 8001420:	05db      	lsls	r3, r3, #23
 8001422:	0011      	movs	r1, r2
 8001424:	0018      	movs	r0, r3
 8001426:	f001 ffa7 	bl	8003378 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = btn_start_Pin;
 800142a:	003b      	movs	r3, r7
 800142c:	2208      	movs	r2, #8
 800142e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001430:	003b      	movs	r3, r7
 8001432:	2200      	movs	r2, #0
 8001434:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001436:	003b      	movs	r3, r7
 8001438:	2200      	movs	r2, #0
 800143a:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(btn_start_GPIO_Port, &GPIO_InitStruct);
 800143c:	003b      	movs	r3, r7
 800143e:	4a43      	ldr	r2, [pc, #268]	; (800154c <MX_GPIO_Init+0x444>)
 8001440:	0019      	movs	r1, r3
 8001442:	0010      	movs	r0, r2
 8001444:	f001 ff98 	bl	8003378 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = start_Pin;
 8001448:	003b      	movs	r3, r7
 800144a:	2210      	movs	r2, #16
 800144c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800144e:	003b      	movs	r3, r7
 8001450:	2201      	movs	r2, #1
 8001452:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001454:	003b      	movs	r3, r7
 8001456:	2200      	movs	r2, #0
 8001458:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800145a:	003b      	movs	r3, r7
 800145c:	2200      	movs	r2, #0
 800145e:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001460:	003b      	movs	r3, r7
 8001462:	2200      	movs	r2, #0
 8001464:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(start_GPIO_Port, &GPIO_InitStruct);
 8001466:	003b      	movs	r3, r7
 8001468:	4a38      	ldr	r2, [pc, #224]	; (800154c <MX_GPIO_Init+0x444>)
 800146a:	0019      	movs	r1, r3
 800146c:	0010      	movs	r0, r2
 800146e:	f001 ff83 	bl	8003378 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = gov_Pin;
 8001472:	003b      	movs	r3, r7
 8001474:	2220      	movs	r2, #32
 8001476:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001478:	003b      	movs	r3, r7
 800147a:	2201      	movs	r2, #1
 800147c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800147e:	003b      	movs	r3, r7
 8001480:	2200      	movs	r2, #0
 8001482:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001484:	003b      	movs	r3, r7
 8001486:	2200      	movs	r2, #0
 8001488:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800148a:	003b      	movs	r3, r7
 800148c:	2200      	movs	r2, #0
 800148e:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(gov_GPIO_Port, &GPIO_InitStruct);
 8001490:	003b      	movs	r3, r7
 8001492:	4a2e      	ldr	r2, [pc, #184]	; (800154c <MX_GPIO_Init+0x444>)
 8001494:	0019      	movs	r1, r3
 8001496:	0010      	movs	r0, r2
 8001498:	f001 ff6e 	bl	8003378 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = sir_Pin;
 800149c:	003b      	movs	r3, r7
 800149e:	2240      	movs	r2, #64	; 0x40
 80014a0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80014a2:	003b      	movs	r3, r7
 80014a4:	2201      	movs	r2, #1
 80014a6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80014a8:	003b      	movs	r3, r7
 80014aa:	2200      	movs	r2, #0
 80014ac:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80014ae:	003b      	movs	r3, r7
 80014b0:	2200      	movs	r2, #0
 80014b2:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80014b4:	003b      	movs	r3, r7
 80014b6:	2200      	movs	r2, #0
 80014b8:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(sir_GPIO_Port, &GPIO_InitStruct);
 80014ba:	003b      	movs	r3, r7
 80014bc:	4a23      	ldr	r2, [pc, #140]	; (800154c <MX_GPIO_Init+0x444>)
 80014be:	0019      	movs	r1, r3
 80014c0:	0010      	movs	r0, r2
 80014c2:	f001 ff59 	bl	8003378 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = freq_l_Pin;
 80014c6:	003b      	movs	r3, r7
 80014c8:	2280      	movs	r2, #128	; 0x80
 80014ca:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80014cc:	003b      	movs	r3, r7
 80014ce:	2201      	movs	r2, #1
 80014d0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80014d2:	003b      	movs	r3, r7
 80014d4:	2200      	movs	r2, #0
 80014d6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80014d8:	003b      	movs	r3, r7
 80014da:	2200      	movs	r2, #0
 80014dc:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80014de:	003b      	movs	r3, r7
 80014e0:	2200      	movs	r2, #0
 80014e2:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(freq_l_GPIO_Port, &GPIO_InitStruct);
 80014e4:	003b      	movs	r3, r7
 80014e6:	4a19      	ldr	r2, [pc, #100]	; (800154c <MX_GPIO_Init+0x444>)
 80014e8:	0019      	movs	r1, r3
 80014ea:	0010      	movs	r0, r2
 80014ec:	f001 ff44 	bl	8003378 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = vac_l_Pin;
 80014f0:	003b      	movs	r3, r7
 80014f2:	2280      	movs	r2, #128	; 0x80
 80014f4:	0052      	lsls	r2, r2, #1
 80014f6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80014f8:	003b      	movs	r3, r7
 80014fa:	2201      	movs	r2, #1
 80014fc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80014fe:	003b      	movs	r3, r7
 8001500:	2200      	movs	r2, #0
 8001502:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001504:	003b      	movs	r3, r7
 8001506:	2200      	movs	r2, #0
 8001508:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800150a:	003b      	movs	r3, r7
 800150c:	2200      	movs	r2, #0
 800150e:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(vac_l_GPIO_Port, &GPIO_InitStruct);
 8001510:	003b      	movs	r3, r7
 8001512:	4a0e      	ldr	r2, [pc, #56]	; (800154c <MX_GPIO_Init+0x444>)
 8001514:	0019      	movs	r1, r3
 8001516:	0010      	movs	r0, r2
 8001518:	f001 ff2e 	bl	8003378 <LL_GPIO_Init>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTA, LL_SYSCFG_EXTI_LINE1);
 800151c:	2380      	movs	r3, #128	; 0x80
 800151e:	02db      	lsls	r3, r3, #11
 8001520:	0019      	movs	r1, r3
 8001522:	2000      	movs	r0, #0
 8001524:	f7ff fd86 	bl	8001034 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_GPIO_SetPinPull(fr_GPIO_Port, fr_Pin, LL_GPIO_PULL_NO);
 8001528:	2390      	movs	r3, #144	; 0x90
 800152a:	05db      	lsls	r3, r3, #23
 800152c:	2200      	movs	r2, #0
 800152e:	2102      	movs	r1, #2
 8001530:	0018      	movs	r0, r3
 8001532:	f7ff fdc1 	bl	80010b8 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(fr_GPIO_Port, fr_Pin, LL_GPIO_MODE_INPUT);
 8001536:	2390      	movs	r3, #144	; 0x90
 8001538:	05db      	lsls	r3, r3, #23
 800153a:	2200      	movs	r2, #0
 800153c:	2102      	movs	r1, #2
 800153e:	0018      	movs	r0, r3
 8001540:	f7ff fd9e 	bl	8001080 <LL_GPIO_SetPinMode>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_1;
 8001544:	0021      	movs	r1, r4
 8001546:	e003      	b.n	8001550 <MX_GPIO_Init+0x448>
 8001548:	48000800 	.word	0x48000800
 800154c:	48000400 	.word	0x48000400
 8001550:	187b      	adds	r3, r7, r1
 8001552:	2202      	movs	r2, #2
 8001554:	601a      	str	r2, [r3, #0]
  EXTI_InitStruct.LineCommand = ENABLE;
 8001556:	187b      	adds	r3, r7, r1
 8001558:	2201      	movs	r2, #1
 800155a:	711a      	strb	r2, [r3, #4]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 800155c:	187b      	adds	r3, r7, r1
 800155e:	2200      	movs	r2, #0
 8001560:	715a      	strb	r2, [r3, #5]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8001562:	187b      	adds	r3, r7, r1
 8001564:	2201      	movs	r2, #1
 8001566:	719a      	strb	r2, [r3, #6]
  LL_EXTI_Init(&EXTI_InitStruct);
 8001568:	187b      	adds	r3, r7, r1
 800156a:	0018      	movs	r0, r3
 800156c:	f001 fdc2 	bl	80030f4 <LL_EXTI_Init>

}
 8001570:	46c0      	nop			; (mov r8, r8)
 8001572:	46bd      	mov	sp, r7
 8001574:	b009      	add	sp, #36	; 0x24
 8001576:	bd90      	pop	{r4, r7, pc}

08001578 <LL_ADC_DMA_GetRegAddr>:
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b082      	sub	sp, #8
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
 8001580:	6039      	str	r1, [r7, #0]
  return (uint32_t)&(ADCx->DR);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	3340      	adds	r3, #64	; 0x40
}
 8001586:	0018      	movs	r0, r3
 8001588:	46bd      	mov	sp, r7
 800158a:	b002      	add	sp, #8
 800158c:	bd80      	pop	{r7, pc}
	...

08001590 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b082      	sub	sp, #8
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	689b      	ldr	r3, [r3, #8]
 800159c:	4a04      	ldr	r2, [pc, #16]	; (80015b0 <LL_ADC_Enable+0x20>)
 800159e:	4013      	ands	r3, r2
 80015a0:	2201      	movs	r2, #1
 80015a2:	431a      	orrs	r2, r3
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80015a8:	46c0      	nop			; (mov r8, r8)
 80015aa:	46bd      	mov	sp, r7
 80015ac:	b002      	add	sp, #8
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	7fffffe8 	.word	0x7fffffe8

080015b4 <LL_ADC_StartCalibration>:
  * @rmtoll CR       ADCAL          LL_ADC_StartCalibration
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_StartCalibration(ADC_TypeDef *ADCx)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	689b      	ldr	r3, [r3, #8]
 80015c0:	4a05      	ldr	r2, [pc, #20]	; (80015d8 <LL_ADC_StartCalibration+0x24>)
 80015c2:	4013      	ands	r3, r2
 80015c4:	2280      	movs	r2, #128	; 0x80
 80015c6:	0612      	lsls	r2, r2, #24
 80015c8:	431a      	orrs	r2, r3
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADCAL);
}
 80015ce:	46c0      	nop			; (mov r8, r8)
 80015d0:	46bd      	mov	sp, r7
 80015d2:	b002      	add	sp, #8
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	46c0      	nop			; (mov r8, r8)
 80015d8:	7fffffe8 	.word	0x7fffffe8

080015dc <LL_ADC_IsCalibrationOnGoing>:
  * @rmtoll CR       ADCAL          LL_ADC_IsCalibrationOnGoing
  * @param  ADCx ADC instance
  * @retval 0: calibration complete, 1: calibration in progress.
  */
__STATIC_INLINE uint32_t LL_ADC_IsCalibrationOnGoing(ADC_TypeDef *ADCx)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b082      	sub	sp, #8
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL));
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	689b      	ldr	r3, [r3, #8]
 80015e8:	0fdb      	lsrs	r3, r3, #31
 80015ea:	07db      	lsls	r3, r3, #31
 80015ec:	2280      	movs	r2, #128	; 0x80
 80015ee:	0612      	lsls	r2, r2, #24
 80015f0:	4694      	mov	ip, r2
 80015f2:	4463      	add	r3, ip
 80015f4:	425a      	negs	r2, r3
 80015f6:	4153      	adcs	r3, r2
 80015f8:	b2db      	uxtb	r3, r3
}
 80015fa:	0018      	movs	r0, r3
 80015fc:	46bd      	mov	sp, r7
 80015fe:	b002      	add	sp, #8
 8001600:	bd80      	pop	{r7, pc}
	...

08001604 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b082      	sub	sp, #8
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	689b      	ldr	r3, [r3, #8]
 8001610:	4a04      	ldr	r2, [pc, #16]	; (8001624 <LL_ADC_REG_StartConversion+0x20>)
 8001612:	4013      	ands	r3, r2
 8001614:	2204      	movs	r2, #4
 8001616:	431a      	orrs	r2, r3
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800161c:	46c0      	nop			; (mov r8, r8)
 800161e:	46bd      	mov	sp, r7
 8001620:	b002      	add	sp, #8
 8001622:	bd80      	pop	{r7, pc}
 8001624:	7fffffe8 	.word	0x7fffffe8

08001628 <LL_DMA_EnableChannel>:
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b082      	sub	sp, #8
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
 8001630:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	3b01      	subs	r3, #1
 8001636:	4a0a      	ldr	r2, [pc, #40]	; (8001660 <LL_DMA_EnableChannel+0x38>)
 8001638:	5cd3      	ldrb	r3, [r2, r3]
 800163a:	001a      	movs	r2, r3
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	18d3      	adds	r3, r2, r3
 8001640:	681a      	ldr	r2, [r3, #0]
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	3b01      	subs	r3, #1
 8001646:	4906      	ldr	r1, [pc, #24]	; (8001660 <LL_DMA_EnableChannel+0x38>)
 8001648:	5ccb      	ldrb	r3, [r1, r3]
 800164a:	0019      	movs	r1, r3
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	18cb      	adds	r3, r1, r3
 8001650:	2101      	movs	r1, #1
 8001652:	430a      	orrs	r2, r1
 8001654:	601a      	str	r2, [r3, #0]
}
 8001656:	46c0      	nop			; (mov r8, r8)
 8001658:	46bd      	mov	sp, r7
 800165a:	b002      	add	sp, #8
 800165c:	bd80      	pop	{r7, pc}
 800165e:	46c0      	nop			; (mov r8, r8)
 8001660:	08003b78 	.word	0x08003b78

08001664 <LL_DMA_SetDataLength>:
  *         @arg @ref LL_DMA_CHANNEL_7
  * @param  NbData Between Min_Data = 0 and Max_Data = 0x0000FFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataLength(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t NbData)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b084      	sub	sp, #16
 8001668:	af00      	add	r7, sp, #0
 800166a:	60f8      	str	r0, [r7, #12]
 800166c:	60b9      	str	r1, [r7, #8]
 800166e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8001670:	68bb      	ldr	r3, [r7, #8]
 8001672:	3b01      	subs	r3, #1
 8001674:	4a0a      	ldr	r2, [pc, #40]	; (80016a0 <LL_DMA_SetDataLength+0x3c>)
 8001676:	5cd3      	ldrb	r3, [r2, r3]
 8001678:	001a      	movs	r2, r3
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	18d3      	adds	r3, r2, r3
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	0c1b      	lsrs	r3, r3, #16
 8001682:	0419      	lsls	r1, r3, #16
 8001684:	68bb      	ldr	r3, [r7, #8]
 8001686:	3b01      	subs	r3, #1
 8001688:	4a05      	ldr	r2, [pc, #20]	; (80016a0 <LL_DMA_SetDataLength+0x3c>)
 800168a:	5cd3      	ldrb	r3, [r2, r3]
 800168c:	001a      	movs	r2, r3
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	18d3      	adds	r3, r2, r3
 8001692:	687a      	ldr	r2, [r7, #4]
 8001694:	430a      	orrs	r2, r1
 8001696:	605a      	str	r2, [r3, #4]
             DMA_CNDTR_NDT, NbData);
}
 8001698:	46c0      	nop			; (mov r8, r8)
 800169a:	46bd      	mov	sp, r7
 800169c:	b004      	add	sp, #16
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	08003b78 	.word	0x08003b78

080016a4 <LL_DMA_SetMemoryAddress>:
  *         @arg @ref LL_DMA_CHANNEL_7
  * @param  MemoryAddress Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryAddress(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryAddress)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b084      	sub	sp, #16
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	60f8      	str	r0, [r7, #12]
 80016ac:	60b9      	str	r1, [r7, #8]
 80016ae:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, MemoryAddress);
 80016b0:	68bb      	ldr	r3, [r7, #8]
 80016b2:	3b01      	subs	r3, #1
 80016b4:	4a05      	ldr	r2, [pc, #20]	; (80016cc <LL_DMA_SetMemoryAddress+0x28>)
 80016b6:	5cd3      	ldrb	r3, [r2, r3]
 80016b8:	001a      	movs	r2, r3
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	18d3      	adds	r3, r2, r3
 80016be:	687a      	ldr	r2, [r7, #4]
 80016c0:	60da      	str	r2, [r3, #12]
}
 80016c2:	46c0      	nop			; (mov r8, r8)
 80016c4:	46bd      	mov	sp, r7
 80016c6:	b004      	add	sp, #16
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	46c0      	nop			; (mov r8, r8)
 80016cc:	08003b78 	.word	0x08003b78

080016d0 <LL_DMA_SetPeriphAddress>:
  *         @arg @ref LL_DMA_CHANNEL_7
  * @param  PeriphAddress Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphAddress(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphAddress)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b084      	sub	sp, #16
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	60f8      	str	r0, [r7, #12]
 80016d8:	60b9      	str	r1, [r7, #8]
 80016da:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, PeriphAddress);
 80016dc:	68bb      	ldr	r3, [r7, #8]
 80016de:	3b01      	subs	r3, #1
 80016e0:	4a05      	ldr	r2, [pc, #20]	; (80016f8 <LL_DMA_SetPeriphAddress+0x28>)
 80016e2:	5cd3      	ldrb	r3, [r2, r3]
 80016e4:	001a      	movs	r2, r3
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	18d3      	adds	r3, r2, r3
 80016ea:	687a      	ldr	r2, [r7, #4]
 80016ec:	609a      	str	r2, [r3, #8]
}
 80016ee:	46c0      	nop			; (mov r8, r8)
 80016f0:	46bd      	mov	sp, r7
 80016f2:	b004      	add	sp, #16
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	46c0      	nop			; (mov r8, r8)
 80016f8:	08003b78 	.word	0x08003b78

080016fc <LL_DMA_EnableIT_TC>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b082      	sub	sp, #8
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
 8001704:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TCIE);
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	3b01      	subs	r3, #1
 800170a:	4a0a      	ldr	r2, [pc, #40]	; (8001734 <LL_DMA_EnableIT_TC+0x38>)
 800170c:	5cd3      	ldrb	r3, [r2, r3]
 800170e:	001a      	movs	r2, r3
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	18d3      	adds	r3, r2, r3
 8001714:	681a      	ldr	r2, [r3, #0]
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	3b01      	subs	r3, #1
 800171a:	4906      	ldr	r1, [pc, #24]	; (8001734 <LL_DMA_EnableIT_TC+0x38>)
 800171c:	5ccb      	ldrb	r3, [r1, r3]
 800171e:	0019      	movs	r1, r3
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	18cb      	adds	r3, r1, r3
 8001724:	2102      	movs	r1, #2
 8001726:	430a      	orrs	r2, r1
 8001728:	601a      	str	r2, [r3, #0]
}
 800172a:	46c0      	nop			; (mov r8, r8)
 800172c:	46bd      	mov	sp, r7
 800172e:	b002      	add	sp, #8
 8001730:	bd80      	pop	{r7, pc}
 8001732:	46c0      	nop			; (mov r8, r8)
 8001734:	08003b78 	.word	0x08003b78

08001738 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800173c:	4b04      	ldr	r3, [pc, #16]	; (8001750 <LL_RCC_HSI_Enable+0x18>)
 800173e:	681a      	ldr	r2, [r3, #0]
 8001740:	4b03      	ldr	r3, [pc, #12]	; (8001750 <LL_RCC_HSI_Enable+0x18>)
 8001742:	2101      	movs	r1, #1
 8001744:	430a      	orrs	r2, r1
 8001746:	601a      	str	r2, [r3, #0]
}
 8001748:	46c0      	nop			; (mov r8, r8)
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	46c0      	nop			; (mov r8, r8)
 8001750:	40021000 	.word	0x40021000

08001754 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8001758:	4b05      	ldr	r3, [pc, #20]	; (8001770 <LL_RCC_HSI_IsReady+0x1c>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	2202      	movs	r2, #2
 800175e:	4013      	ands	r3, r2
 8001760:	3b02      	subs	r3, #2
 8001762:	425a      	negs	r2, r3
 8001764:	4153      	adcs	r3, r2
 8001766:	b2db      	uxtb	r3, r3
}
 8001768:	0018      	movs	r0, r3
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
 800176e:	46c0      	nop			; (mov r8, r8)
 8001770:	40021000 	.word	0x40021000

08001774 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b082      	sub	sp, #8
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 800177c:	4b06      	ldr	r3, [pc, #24]	; (8001798 <LL_RCC_HSI_SetCalibTrimming+0x24>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	22f8      	movs	r2, #248	; 0xf8
 8001782:	4393      	bics	r3, r2
 8001784:	0019      	movs	r1, r3
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	00da      	lsls	r2, r3, #3
 800178a:	4b03      	ldr	r3, [pc, #12]	; (8001798 <LL_RCC_HSI_SetCalibTrimming+0x24>)
 800178c:	430a      	orrs	r2, r1
 800178e:	601a      	str	r2, [r3, #0]
}
 8001790:	46c0      	nop			; (mov r8, r8)
 8001792:	46bd      	mov	sp, r7
 8001794:	b002      	add	sp, #8
 8001796:	bd80      	pop	{r7, pc}
 8001798:	40021000 	.word	0x40021000

0800179c <LL_RCC_HSI14_Enable>:
  * @brief  Enable HSI14
  * @rmtoll CR2          HSI14ON       LL_RCC_HSI14_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI14_Enable(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR2, RCC_CR2_HSI14ON);
 80017a0:	4b04      	ldr	r3, [pc, #16]	; (80017b4 <LL_RCC_HSI14_Enable+0x18>)
 80017a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80017a4:	4b03      	ldr	r3, [pc, #12]	; (80017b4 <LL_RCC_HSI14_Enable+0x18>)
 80017a6:	2101      	movs	r1, #1
 80017a8:	430a      	orrs	r2, r1
 80017aa:	635a      	str	r2, [r3, #52]	; 0x34
}
 80017ac:	46c0      	nop			; (mov r8, r8)
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	46c0      	nop			; (mov r8, r8)
 80017b4:	40021000 	.word	0x40021000

080017b8 <LL_RCC_HSI14_IsReady>:
  * @brief  Check if HSI14 oscillator Ready
  * @rmtoll CR2          HSI14RDY      LL_RCC_HSI14_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI14_IsReady(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR2, RCC_CR2_HSI14RDY) == (RCC_CR2_HSI14RDY));
 80017bc:	4b05      	ldr	r3, [pc, #20]	; (80017d4 <LL_RCC_HSI14_IsReady+0x1c>)
 80017be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017c0:	2202      	movs	r2, #2
 80017c2:	4013      	ands	r3, r2
 80017c4:	3b02      	subs	r3, #2
 80017c6:	425a      	negs	r2, r3
 80017c8:	4153      	adcs	r3, r2
 80017ca:	b2db      	uxtb	r3, r3
}
 80017cc:	0018      	movs	r0, r3
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	46c0      	nop			; (mov r8, r8)
 80017d4:	40021000 	.word	0x40021000

080017d8 <LL_RCC_HSI14_EnableADCControl>:
  * @brief  ADC interface can turn on the HSI14 oscillator
  * @rmtoll CR2          HSI14DIS      LL_RCC_HSI14_EnableADCControl
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI14_EnableADCControl(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR2, RCC_CR2_HSI14DIS);
 80017dc:	4b04      	ldr	r3, [pc, #16]	; (80017f0 <LL_RCC_HSI14_EnableADCControl+0x18>)
 80017de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80017e0:	4b03      	ldr	r3, [pc, #12]	; (80017f0 <LL_RCC_HSI14_EnableADCControl+0x18>)
 80017e2:	2104      	movs	r1, #4
 80017e4:	438a      	bics	r2, r1
 80017e6:	635a      	str	r2, [r3, #52]	; 0x34
}
 80017e8:	46c0      	nop			; (mov r8, r8)
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	46c0      	nop			; (mov r8, r8)
 80017f0:	40021000 	.word	0x40021000

080017f4 <LL_RCC_HSI14_SetCalibTrimming>:
  * @rmtoll CR2          HSI14TRIM     LL_RCC_HSI14_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0xFF
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI14_SetCalibTrimming(uint32_t Value)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b082      	sub	sp, #8
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR2, RCC_CR2_HSI14TRIM, Value << RCC_POSITION_HSI14TRIM);
 80017fc:	4b06      	ldr	r3, [pc, #24]	; (8001818 <LL_RCC_HSI14_SetCalibTrimming+0x24>)
 80017fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001800:	22f8      	movs	r2, #248	; 0xf8
 8001802:	4393      	bics	r3, r2
 8001804:	0019      	movs	r1, r3
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	00da      	lsls	r2, r3, #3
 800180a:	4b03      	ldr	r3, [pc, #12]	; (8001818 <LL_RCC_HSI14_SetCalibTrimming+0x24>)
 800180c:	430a      	orrs	r2, r1
 800180e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001810:	46c0      	nop			; (mov r8, r8)
 8001812:	46bd      	mov	sp, r7
 8001814:	b002      	add	sp, #8
 8001816:	bd80      	pop	{r7, pc}
 8001818:	40021000 	.word	0x40021000

0800181c <LL_RCC_SetSysClkSource>:
  *
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b082      	sub	sp, #8
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001824:	4b06      	ldr	r3, [pc, #24]	; (8001840 <LL_RCC_SetSysClkSource+0x24>)
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	2203      	movs	r2, #3
 800182a:	4393      	bics	r3, r2
 800182c:	0019      	movs	r1, r3
 800182e:	4b04      	ldr	r3, [pc, #16]	; (8001840 <LL_RCC_SetSysClkSource+0x24>)
 8001830:	687a      	ldr	r2, [r7, #4]
 8001832:	430a      	orrs	r2, r1
 8001834:	605a      	str	r2, [r3, #4]
}
 8001836:	46c0      	nop			; (mov r8, r8)
 8001838:	46bd      	mov	sp, r7
 800183a:	b002      	add	sp, #8
 800183c:	bd80      	pop	{r7, pc}
 800183e:	46c0      	nop			; (mov r8, r8)
 8001840:	40021000 	.word	0x40021000

08001844 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI48 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001848:	4b03      	ldr	r3, [pc, #12]	; (8001858 <LL_RCC_GetSysClkSource+0x14>)
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	220c      	movs	r2, #12
 800184e:	4013      	ands	r3, r2
}
 8001850:	0018      	movs	r0, r3
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
 8001856:	46c0      	nop			; (mov r8, r8)
 8001858:	40021000 	.word	0x40021000

0800185c <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b082      	sub	sp, #8
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001864:	4b06      	ldr	r3, [pc, #24]	; (8001880 <LL_RCC_SetAHBPrescaler+0x24>)
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	22f0      	movs	r2, #240	; 0xf0
 800186a:	4393      	bics	r3, r2
 800186c:	0019      	movs	r1, r3
 800186e:	4b04      	ldr	r3, [pc, #16]	; (8001880 <LL_RCC_SetAHBPrescaler+0x24>)
 8001870:	687a      	ldr	r2, [r7, #4]
 8001872:	430a      	orrs	r2, r1
 8001874:	605a      	str	r2, [r3, #4]
}
 8001876:	46c0      	nop			; (mov r8, r8)
 8001878:	46bd      	mov	sp, r7
 800187a:	b002      	add	sp, #8
 800187c:	bd80      	pop	{r7, pc}
 800187e:	46c0      	nop			; (mov r8, r8)
 8001880:	40021000 	.word	0x40021000

08001884 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b082      	sub	sp, #8
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, Prescaler);
 800188c:	4b06      	ldr	r3, [pc, #24]	; (80018a8 <LL_RCC_SetAPB1Prescaler+0x24>)
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	4a06      	ldr	r2, [pc, #24]	; (80018ac <LL_RCC_SetAPB1Prescaler+0x28>)
 8001892:	4013      	ands	r3, r2
 8001894:	0019      	movs	r1, r3
 8001896:	4b04      	ldr	r3, [pc, #16]	; (80018a8 <LL_RCC_SetAPB1Prescaler+0x24>)
 8001898:	687a      	ldr	r2, [r7, #4]
 800189a:	430a      	orrs	r2, r1
 800189c:	605a      	str	r2, [r3, #4]
}
 800189e:	46c0      	nop			; (mov r8, r8)
 80018a0:	46bd      	mov	sp, r7
 80018a2:	b002      	add	sp, #8
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	46c0      	nop			; (mov r8, r8)
 80018a8:	40021000 	.word	0x40021000
 80018ac:	fffff8ff 	.word	0xfffff8ff

080018b0 <LL_RCC_SetUSARTClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetUSARTClockSource(uint32_t USARTxSource)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b082      	sub	sp, #8
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR3, (RCC_CFGR3_USART1SW << ((USARTxSource  & 0xFF000000U) >> 24U)), (USARTxSource & 0x00FFFFFFU));
 80018b8:	4b09      	ldr	r3, [pc, #36]	; (80018e0 <LL_RCC_SetUSARTClockSource+0x30>)
 80018ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018bc:	687a      	ldr	r2, [r7, #4]
 80018be:	0e12      	lsrs	r2, r2, #24
 80018c0:	2103      	movs	r1, #3
 80018c2:	4091      	lsls	r1, r2
 80018c4:	000a      	movs	r2, r1
 80018c6:	43d2      	mvns	r2, r2
 80018c8:	401a      	ands	r2, r3
 80018ca:	0011      	movs	r1, r2
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	021b      	lsls	r3, r3, #8
 80018d0:	0a1a      	lsrs	r2, r3, #8
 80018d2:	4b03      	ldr	r3, [pc, #12]	; (80018e0 <LL_RCC_SetUSARTClockSource+0x30>)
 80018d4:	430a      	orrs	r2, r1
 80018d6:	631a      	str	r2, [r3, #48]	; 0x30
}
 80018d8:	46c0      	nop			; (mov r8, r8)
 80018da:	46bd      	mov	sp, r7
 80018dc:	b002      	add	sp, #8
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	40021000 	.word	0x40021000

080018e4 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80018e8:	4b04      	ldr	r3, [pc, #16]	; (80018fc <LL_RCC_PLL_Enable+0x18>)
 80018ea:	681a      	ldr	r2, [r3, #0]
 80018ec:	4b03      	ldr	r3, [pc, #12]	; (80018fc <LL_RCC_PLL_Enable+0x18>)
 80018ee:	2180      	movs	r1, #128	; 0x80
 80018f0:	0449      	lsls	r1, r1, #17
 80018f2:	430a      	orrs	r2, r1
 80018f4:	601a      	str	r2, [r3, #0]
}
 80018f6:	46c0      	nop			; (mov r8, r8)
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	40021000 	.word	0x40021000

08001900 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8001904:	4b07      	ldr	r3, [pc, #28]	; (8001924 <LL_RCC_PLL_IsReady+0x24>)
 8001906:	681a      	ldr	r2, [r3, #0]
 8001908:	2380      	movs	r3, #128	; 0x80
 800190a:	049b      	lsls	r3, r3, #18
 800190c:	4013      	ands	r3, r2
 800190e:	22fe      	movs	r2, #254	; 0xfe
 8001910:	0612      	lsls	r2, r2, #24
 8001912:	4694      	mov	ip, r2
 8001914:	4463      	add	r3, ip
 8001916:	425a      	negs	r2, r3
 8001918:	4153      	adcs	r3, r2
 800191a:	b2db      	uxtb	r3, r3
}
 800191c:	0018      	movs	r0, r3
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
 8001922:	46c0      	nop			; (mov r8, r8)
 8001924:	40021000 	.word	0x40021000

08001928 <LL_RCC_PLL_ConfigDomain_SYS>:
  *         @arg @ref LL_RCC_PLL_MUL_15
  *         @arg @ref LL_RCC_PLL_MUL_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLMul)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b082      	sub	sp, #8
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
 8001930:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLMUL, (Source & RCC_CFGR_PLLSRC) | PLLMul);
 8001932:	4b0e      	ldr	r3, [pc, #56]	; (800196c <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	4a0e      	ldr	r2, [pc, #56]	; (8001970 <LL_RCC_PLL_ConfigDomain_SYS+0x48>)
 8001938:	4013      	ands	r3, r2
 800193a:	0019      	movs	r1, r3
 800193c:	687a      	ldr	r2, [r7, #4]
 800193e:	2380      	movs	r3, #128	; 0x80
 8001940:	025b      	lsls	r3, r3, #9
 8001942:	401a      	ands	r2, r3
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	431a      	orrs	r2, r3
 8001948:	4b08      	ldr	r3, [pc, #32]	; (800196c <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 800194a:	430a      	orrs	r2, r1
 800194c:	605a      	str	r2, [r3, #4]
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PREDIV, (Source & RCC_CFGR2_PREDIV));
 800194e:	4b07      	ldr	r3, [pc, #28]	; (800196c <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8001950:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001952:	220f      	movs	r2, #15
 8001954:	4393      	bics	r3, r2
 8001956:	0019      	movs	r1, r3
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	220f      	movs	r2, #15
 800195c:	401a      	ands	r2, r3
 800195e:	4b03      	ldr	r3, [pc, #12]	; (800196c <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8001960:	430a      	orrs	r2, r1
 8001962:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8001964:	46c0      	nop			; (mov r8, r8)
 8001966:	46bd      	mov	sp, r7
 8001968:	b002      	add	sp, #8
 800196a:	bd80      	pop	{r7, pc}
 800196c:	40021000 	.word	0x40021000
 8001970:	ffc2ffff 	.word	0xffc2ffff

08001974 <LL_APB1_GRP1_EnableClock>:
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b084      	sub	sp, #16
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 800197c:	4b07      	ldr	r3, [pc, #28]	; (800199c <LL_APB1_GRP1_EnableClock+0x28>)
 800197e:	69d9      	ldr	r1, [r3, #28]
 8001980:	4b06      	ldr	r3, [pc, #24]	; (800199c <LL_APB1_GRP1_EnableClock+0x28>)
 8001982:	687a      	ldr	r2, [r7, #4]
 8001984:	430a      	orrs	r2, r1
 8001986:	61da      	str	r2, [r3, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001988:	4b04      	ldr	r3, [pc, #16]	; (800199c <LL_APB1_GRP1_EnableClock+0x28>)
 800198a:	69db      	ldr	r3, [r3, #28]
 800198c:	687a      	ldr	r2, [r7, #4]
 800198e:	4013      	ands	r3, r2
 8001990:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001992:	68fb      	ldr	r3, [r7, #12]
}
 8001994:	46c0      	nop			; (mov r8, r8)
 8001996:	46bd      	mov	sp, r7
 8001998:	b004      	add	sp, #16
 800199a:	bd80      	pop	{r7, pc}
 800199c:	40021000 	.word	0x40021000

080019a0 <LL_APB1_GRP2_EnableClock>:
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b084      	sub	sp, #16
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80019a8:	4b07      	ldr	r3, [pc, #28]	; (80019c8 <LL_APB1_GRP2_EnableClock+0x28>)
 80019aa:	6999      	ldr	r1, [r3, #24]
 80019ac:	4b06      	ldr	r3, [pc, #24]	; (80019c8 <LL_APB1_GRP2_EnableClock+0x28>)
 80019ae:	687a      	ldr	r2, [r7, #4]
 80019b0:	430a      	orrs	r2, r1
 80019b2:	619a      	str	r2, [r3, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80019b4:	4b04      	ldr	r3, [pc, #16]	; (80019c8 <LL_APB1_GRP2_EnableClock+0x28>)
 80019b6:	699b      	ldr	r3, [r3, #24]
 80019b8:	687a      	ldr	r2, [r7, #4]
 80019ba:	4013      	ands	r3, r2
 80019bc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80019be:	68fb      	ldr	r3, [r7, #12]
}
 80019c0:	46c0      	nop			; (mov r8, r8)
 80019c2:	46bd      	mov	sp, r7
 80019c4:	b004      	add	sp, #16
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	40021000 	.word	0x40021000

080019cc <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b082      	sub	sp, #8
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80019d4:	4b06      	ldr	r3, [pc, #24]	; (80019f0 <LL_FLASH_SetLatency+0x24>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	2201      	movs	r2, #1
 80019da:	4393      	bics	r3, r2
 80019dc:	0019      	movs	r1, r3
 80019de:	4b04      	ldr	r3, [pc, #16]	; (80019f0 <LL_FLASH_SetLatency+0x24>)
 80019e0:	687a      	ldr	r2, [r7, #4]
 80019e2:	430a      	orrs	r2, r1
 80019e4:	601a      	str	r2, [r3, #0]
}
 80019e6:	46c0      	nop			; (mov r8, r8)
 80019e8:	46bd      	mov	sp, r7
 80019ea:	b002      	add	sp, #8
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	46c0      	nop			; (mov r8, r8)
 80019f0:	40022000 	.word	0x40022000

080019f4 <LL_FLASH_GetLatency>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80019f8:	4b03      	ldr	r3, [pc, #12]	; (8001a08 <LL_FLASH_GetLatency+0x14>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	2201      	movs	r2, #1
 80019fe:	4013      	ands	r3, r2
}
 8001a00:	0018      	movs	r0, r3
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	46c0      	nop			; (mov r8, r8)
 8001a08:	40022000 	.word	0x40022000

08001a0c <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b082      	sub	sp, #8
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	2201      	movs	r2, #1
 8001a1a:	431a      	orrs	r2, r3
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	601a      	str	r2, [r3, #0]
}
 8001a20:	46c0      	nop			; (mov r8, r8)
 8001a22:	46bd      	mov	sp, r7
 8001a24:	b002      	add	sp, #8
 8001a26:	bd80      	pop	{r7, pc}

08001a28 <LL_TIM_EnableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_EnableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b082      	sub	sp, #8
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	68db      	ldr	r3, [r3, #12]
 8001a34:	2201      	movs	r2, #1
 8001a36:	431a      	orrs	r2, r3
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	60da      	str	r2, [r3, #12]
}
 8001a3c:	46c0      	nop			; (mov r8, r8)
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	b002      	add	sp, #8
 8001a42:	bd80      	pop	{r7, pc}

08001a44 <LL_GPIO_ReadInputPort>:
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b082      	sub	sp, #8
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(GPIOx->IDR));
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	691b      	ldr	r3, [r3, #16]
}
 8001a50:	0018      	movs	r0, r3
 8001a52:	46bd      	mov	sp, r7
 8001a54:	b002      	add	sp, #8
 8001a56:	bd80      	pop	{r7, pc}

08001a58 <LL_GPIO_SetOutputPin>:
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b082      	sub	sp, #8
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
 8001a60:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	683a      	ldr	r2, [r7, #0]
 8001a66:	619a      	str	r2, [r3, #24]
}
 8001a68:	46c0      	nop			; (mov r8, r8)
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	b002      	add	sp, #8
 8001a6e:	bd80      	pop	{r7, pc}

08001a70 <LL_GPIO_ResetOutputPin>:
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b082      	sub	sp, #8
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
 8001a78:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	683a      	ldr	r2, [r7, #0]
 8001a7e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001a80:	46c0      	nop			; (mov r8, r8)
 8001a82:	46bd      	mov	sp, r7
 8001a84:	b002      	add	sp, #8
 8001a86:	bd80      	pop	{r7, pc}

08001a88 <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b084      	sub	sp, #16
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
 8001a90:	6039      	str	r1, [r7, #0]
  uint32_t odr = READ_REG(GPIOx->ODR);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	695b      	ldr	r3, [r3, #20]
 8001a96:	60fb      	str	r3, [r7, #12]
  WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	683a      	ldr	r2, [r7, #0]
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	041a      	lsls	r2, r3, #16
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	43db      	mvns	r3, r3
 8001aa4:	6839      	ldr	r1, [r7, #0]
 8001aa6:	400b      	ands	r3, r1
 8001aa8:	431a      	orrs	r2, r3
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	619a      	str	r2, [r3, #24]
}
 8001aae:	46c0      	nop			; (mov r8, r8)
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	b004      	add	sp, #16
 8001ab4:	bd80      	pop	{r7, pc}
	...

08001ab8 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001ab8:	b5b0      	push	{r4, r5, r7, lr}
 8001aba:	af00      	add	r7, sp, #0

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */

	LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_SYSCFG);
 8001abc:	2001      	movs	r0, #1
 8001abe:	f7ff ff6f 	bl	80019a0 <LL_APB1_GRP2_EnableClock>
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8001ac2:	2380      	movs	r3, #128	; 0x80
 8001ac4:	055b      	lsls	r3, r3, #21
 8001ac6:	0018      	movs	r0, r3
 8001ac8:	f7ff ff54 	bl	8001974 <LL_APB1_GRP1_EnableClock>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001acc:	f000 fa2e 	bl	8001f2c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001ad0:	f7ff fb1a 	bl	8001108 <MX_GPIO_Init>
	MX_DMA_Init();
 8001ad4:	f7ff fa88 	bl	8000fe8 <MX_DMA_Init>
	MX_ADC_Init();
 8001ad8:	f7ff f914 	bl	8000d04 <MX_ADC_Init>
	MX_USART1_UART_Init();
 8001adc:	f001 f95a 	bl	8002d94 <MX_USART1_UART_Init>
	MX_TIM3_Init();
 8001ae0:	f001 f82e 	bl	8002b40 <MX_TIM3_Init>
	/* USER CODE BEGIN 2 */
	//print("start\r\n");

	leds_test();
 8001ae4:	f000 fdc2 	bl	800266c <leds_test>
	adc_init();
 8001ae8:	f000 fd76 	bl	80025d8 <adc_init>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		if(is_off){
 8001aec:	4bc7      	ldr	r3, [pc, #796]	; (8001e0c <main+0x354>)
 8001aee:	781b      	ldrb	r3, [r3, #0]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d014      	beq.n	8001b1e <main+0x66>
			off_delay_cnt++;
 8001af4:	4bc6      	ldr	r3, [pc, #792]	; (8001e10 <main+0x358>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	1c5a      	adds	r2, r3, #1
 8001afa:	4bc5      	ldr	r3, [pc, #788]	; (8001e10 <main+0x358>)
 8001afc:	601a      	str	r2, [r3, #0]
			if(off_delay_cnt>20000){
 8001afe:	4bc4      	ldr	r3, [pc, #784]	; (8001e10 <main+0x358>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4ac4      	ldr	r2, [pc, #784]	; (8001e14 <main+0x35c>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d90a      	bls.n	8001b1e <main+0x66>
				gov_off;
 8001b08:	4bc3      	ldr	r3, [pc, #780]	; (8001e18 <main+0x360>)
 8001b0a:	2120      	movs	r1, #32
 8001b0c:	0018      	movs	r0, r3
 8001b0e:	f7ff ffaf 	bl	8001a70 <LL_GPIO_ResetOutputPin>
				//is_off=0;
				working=0;
 8001b12:	4bc2      	ldr	r3, [pc, #776]	; (8001e1c <main+0x364>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	701a      	strb	r2, [r3, #0]
				off_delay_cnt=0;
 8001b18:	4bbd      	ldr	r3, [pc, #756]	; (8001e10 <main+0x358>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	601a      	str	r2, [r3, #0]
			}
		}
		if(check_err()){
 8001b1e:	f000 fa7b 	bl	8002018 <check_err>
 8001b22:	1e03      	subs	r3, r0, #0
 8001b24:	d100      	bne.n	8001b28 <main+0x70>
 8001b26:	e110      	b.n	8001d4a <main+0x292>
			if(mscnt%250==0)
 8001b28:	4bbd      	ldr	r3, [pc, #756]	; (8001e20 <main+0x368>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	21fa      	movs	r1, #250	; 0xfa
 8001b2e:	0018      	movs	r0, r3
 8001b30:	f7fe fb70 	bl	8000214 <__aeabi_uidivmod>
 8001b34:	1e0b      	subs	r3, r1, #0
 8001b36:	d118      	bne.n	8001b6a <main+0xb2>
			{
				pwr_off;
 8001b38:	2380      	movs	r3, #128	; 0x80
 8001b3a:	01db      	lsls	r3, r3, #7
 8001b3c:	4ab9      	ldr	r2, [pc, #740]	; (8001e24 <main+0x36c>)
 8001b3e:	0019      	movs	r1, r3
 8001b40:	0010      	movs	r0, r2
 8001b42:	f7ff ff95 	bl	8001a70 <LL_GPIO_ResetOutputPin>
				er_toggle;
 8001b46:	2380      	movs	r3, #128	; 0x80
 8001b48:	019b      	lsls	r3, r3, #6
 8001b4a:	4ab6      	ldr	r2, [pc, #728]	; (8001e24 <main+0x36c>)
 8001b4c:	0019      	movs	r1, r3
 8001b4e:	0010      	movs	r0, r2
 8001b50:	f7ff ff9a 	bl	8001a88 <LL_GPIO_TogglePin>
				if(vac_err_low_flag){
 8001b54:	4bb4      	ldr	r3, [pc, #720]	; (8001e28 <main+0x370>)
 8001b56:	781b      	ldrb	r3, [r3, #0]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d006      	beq.n	8001b6a <main+0xb2>
					vac_toggle;
 8001b5c:	2380      	movs	r3, #128	; 0x80
 8001b5e:	005b      	lsls	r3, r3, #1
 8001b60:	4aad      	ldr	r2, [pc, #692]	; (8001e18 <main+0x360>)
 8001b62:	0019      	movs	r1, r3
 8001b64:	0010      	movs	r0, r2
 8001b66:	f7ff ff8f 	bl	8001a88 <LL_GPIO_TogglePin>
				}
			}
			pwr_off;
 8001b6a:	2380      	movs	r3, #128	; 0x80
 8001b6c:	01db      	lsls	r3, r3, #7
 8001b6e:	4aad      	ldr	r2, [pc, #692]	; (8001e24 <main+0x36c>)
 8001b70:	0019      	movs	r1, r3
 8001b72:	0010      	movs	r0, r2
 8001b74:	f7ff ff7c 	bl	8001a70 <LL_GPIO_ResetOutputPin>
			if(working){
 8001b78:	4ba8      	ldr	r3, [pc, #672]	; (8001e1c <main+0x364>)
 8001b7a:	781b      	ldrb	r3, [r3, #0]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d100      	bne.n	8001b82 <main+0xca>
 8001b80:	e0a1      	b.n	8001cc6 <main+0x20e>
				if(!mute)
 8001b82:	4baa      	ldr	r3, [pc, #680]	; (8001e2c <main+0x374>)
 8001b84:	781b      	ldrb	r3, [r3, #0]
 8001b86:	2201      	movs	r2, #1
 8001b88:	4053      	eors	r3, r2
 8001b8a:	b2db      	uxtb	r3, r3
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d034      	beq.n	8001bfa <main+0x142>
				{
					siren_on;
 8001b90:	4ba1      	ldr	r3, [pc, #644]	; (8001e18 <main+0x360>)
 8001b92:	2140      	movs	r1, #64	; 0x40
 8001b94:	0018      	movs	r0, r3
 8001b96:	f7ff ff5f 	bl	8001a58 <LL_GPIO_SetOutputPin>
					if(isMutePressed){
 8001b9a:	4b9f      	ldr	r3, [pc, #636]	; (8001e18 <main+0x360>)
 8001b9c:	0018      	movs	r0, r3
 8001b9e:	f7ff ff51 	bl	8001a44 <LL_GPIO_ReadInputPort>
 8001ba2:	0003      	movs	r3, r0
 8001ba4:	2208      	movs	r2, #8
 8001ba6:	4013      	ands	r3, r2
 8001ba8:	d123      	bne.n	8001bf2 <main+0x13a>
						mute_cnt++;
 8001baa:	4ba1      	ldr	r3, [pc, #644]	; (8001e30 <main+0x378>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	1c5a      	adds	r2, r3, #1
 8001bb0:	4b9f      	ldr	r3, [pc, #636]	; (8001e30 <main+0x378>)
 8001bb2:	601a      	str	r2, [r3, #0]
						if (mute_cnt>3000){
 8001bb4:	4b9e      	ldr	r3, [pc, #632]	; (8001e30 <main+0x378>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a9e      	ldr	r2, [pc, #632]	; (8001e34 <main+0x37c>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d90f      	bls.n	8001bde <main+0x126>
							//turn off
							if(!is_off)
 8001bbe:	4b93      	ldr	r3, [pc, #588]	; (8001e0c <main+0x354>)
 8001bc0:	781b      	ldrb	r3, [r3, #0]
 8001bc2:	2201      	movs	r2, #1
 8001bc4:	4053      	eors	r3, r2
 8001bc6:	b2db      	uxtb	r3, r3
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d004      	beq.n	8001bd6 <main+0x11e>
								turn_off;
 8001bcc:	4b92      	ldr	r3, [pc, #584]	; (8001e18 <main+0x360>)
 8001bce:	2120      	movs	r1, #32
 8001bd0:	0018      	movs	r0, r3
 8001bd2:	f7ff ff41 	bl	8001a58 <LL_GPIO_SetOutputPin>
 8001bd6:	4b8d      	ldr	r3, [pc, #564]	; (8001e0c <main+0x354>)
 8001bd8:	2201      	movs	r2, #1
 8001bda:	701a      	strb	r2, [r3, #0]
 8001bdc:	e012      	b.n	8001c04 <main+0x14c>
						}
						else if(mute_cnt>300){
 8001bde:	4b94      	ldr	r3, [pc, #592]	; (8001e30 <main+0x378>)
 8001be0:	681a      	ldr	r2, [r3, #0]
 8001be2:	2396      	movs	r3, #150	; 0x96
 8001be4:	005b      	lsls	r3, r3, #1
 8001be6:	429a      	cmp	r2, r3
 8001be8:	d90c      	bls.n	8001c04 <main+0x14c>
							mute=1;
 8001bea:	4b90      	ldr	r3, [pc, #576]	; (8001e2c <main+0x374>)
 8001bec:	2201      	movs	r2, #1
 8001bee:	701a      	strb	r2, [r3, #0]
 8001bf0:	e008      	b.n	8001c04 <main+0x14c>
						}
					}else{
						mute_cnt=0;
 8001bf2:	4b8f      	ldr	r3, [pc, #572]	; (8001e30 <main+0x378>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	601a      	str	r2, [r3, #0]
 8001bf8:	e004      	b.n	8001c04 <main+0x14c>
					}
				}
				else
				{
					siren_off;
 8001bfa:	4b87      	ldr	r3, [pc, #540]	; (8001e18 <main+0x360>)
 8001bfc:	2140      	movs	r1, #64	; 0x40
 8001bfe:	0018      	movs	r0, r3
 8001c00:	f7ff ff36 	bl	8001a70 <LL_GPIO_ResetOutputPin>
				}

				if(dyn_err_flag){
 8001c04:	4b8c      	ldr	r3, [pc, #560]	; (8001e38 <main+0x380>)
 8001c06:	781b      	ldrb	r3, [r3, #0]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d02c      	beq.n	8001c66 <main+0x1ae>
					if(oil_err_flag||water_err_flag||ol_err_flag||emr_err_flag||freq_err_flag||vac_err_high_flag||vac_err_low_flag){
 8001c0c:	4b8b      	ldr	r3, [pc, #556]	; (8001e3c <main+0x384>)
 8001c0e:	781b      	ldrb	r3, [r3, #0]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d118      	bne.n	8001c46 <main+0x18e>
 8001c14:	4b8a      	ldr	r3, [pc, #552]	; (8001e40 <main+0x388>)
 8001c16:	781b      	ldrb	r3, [r3, #0]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d114      	bne.n	8001c46 <main+0x18e>
 8001c1c:	4b89      	ldr	r3, [pc, #548]	; (8001e44 <main+0x38c>)
 8001c1e:	781b      	ldrb	r3, [r3, #0]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d110      	bne.n	8001c46 <main+0x18e>
 8001c24:	4b88      	ldr	r3, [pc, #544]	; (8001e48 <main+0x390>)
 8001c26:	781b      	ldrb	r3, [r3, #0]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d10c      	bne.n	8001c46 <main+0x18e>
 8001c2c:	4b87      	ldr	r3, [pc, #540]	; (8001e4c <main+0x394>)
 8001c2e:	781b      	ldrb	r3, [r3, #0]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d108      	bne.n	8001c46 <main+0x18e>
 8001c34:	4b86      	ldr	r3, [pc, #536]	; (8001e50 <main+0x398>)
 8001c36:	781b      	ldrb	r3, [r3, #0]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d104      	bne.n	8001c46 <main+0x18e>
 8001c3c:	4b7a      	ldr	r3, [pc, #488]	; (8001e28 <main+0x370>)
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d100      	bne.n	8001c46 <main+0x18e>
 8001c44:	e14f      	b.n	8001ee6 <main+0x42e>
						//turn off
						if(!is_off)
 8001c46:	4b71      	ldr	r3, [pc, #452]	; (8001e0c <main+0x354>)
 8001c48:	781b      	ldrb	r3, [r3, #0]
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	4053      	eors	r3, r2
 8001c4e:	b2db      	uxtb	r3, r3
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d004      	beq.n	8001c5e <main+0x1a6>
							turn_off;
 8001c54:	4b70      	ldr	r3, [pc, #448]	; (8001e18 <main+0x360>)
 8001c56:	2120      	movs	r1, #32
 8001c58:	0018      	movs	r0, r3
 8001c5a:	f7ff fefd 	bl	8001a58 <LL_GPIO_SetOutputPin>
 8001c5e:	4b6b      	ldr	r3, [pc, #428]	; (8001e0c <main+0x354>)
 8001c60:	2201      	movs	r2, #1
 8001c62:	701a      	strb	r2, [r3, #0]
 8001c64:	e13f      	b.n	8001ee6 <main+0x42e>
					}else{

					}
				}else{
					//turn off
					if(oil_err_flag||water_err_flag||ol_err_flag||emr_err_flag||freq_err_flag||vac_err_high_flag||vac_err_low_flag){
 8001c66:	4b75      	ldr	r3, [pc, #468]	; (8001e3c <main+0x384>)
 8001c68:	781b      	ldrb	r3, [r3, #0]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d117      	bne.n	8001c9e <main+0x1e6>
 8001c6e:	4b74      	ldr	r3, [pc, #464]	; (8001e40 <main+0x388>)
 8001c70:	781b      	ldrb	r3, [r3, #0]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d113      	bne.n	8001c9e <main+0x1e6>
 8001c76:	4b73      	ldr	r3, [pc, #460]	; (8001e44 <main+0x38c>)
 8001c78:	781b      	ldrb	r3, [r3, #0]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d10f      	bne.n	8001c9e <main+0x1e6>
 8001c7e:	4b72      	ldr	r3, [pc, #456]	; (8001e48 <main+0x390>)
 8001c80:	781b      	ldrb	r3, [r3, #0]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d10b      	bne.n	8001c9e <main+0x1e6>
 8001c86:	4b71      	ldr	r3, [pc, #452]	; (8001e4c <main+0x394>)
 8001c88:	781b      	ldrb	r3, [r3, #0]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d107      	bne.n	8001c9e <main+0x1e6>
 8001c8e:	4b70      	ldr	r3, [pc, #448]	; (8001e50 <main+0x398>)
 8001c90:	781b      	ldrb	r3, [r3, #0]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d103      	bne.n	8001c9e <main+0x1e6>
 8001c96:	4b64      	ldr	r3, [pc, #400]	; (8001e28 <main+0x370>)
 8001c98:	781b      	ldrb	r3, [r3, #0]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d00f      	beq.n	8001cbe <main+0x206>
						if(!is_off)
 8001c9e:	4b5b      	ldr	r3, [pc, #364]	; (8001e0c <main+0x354>)
 8001ca0:	781b      	ldrb	r3, [r3, #0]
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	4053      	eors	r3, r2
 8001ca6:	b2db      	uxtb	r3, r3
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d004      	beq.n	8001cb6 <main+0x1fe>
							turn_off;
 8001cac:	4b5a      	ldr	r3, [pc, #360]	; (8001e18 <main+0x360>)
 8001cae:	2120      	movs	r1, #32
 8001cb0:	0018      	movs	r0, r3
 8001cb2:	f7ff fed1 	bl	8001a58 <LL_GPIO_SetOutputPin>
 8001cb6:	4b55      	ldr	r3, [pc, #340]	; (8001e0c <main+0x354>)
 8001cb8:	2201      	movs	r2, #1
 8001cba:	701a      	strb	r2, [r3, #0]
 8001cbc:	e113      	b.n	8001ee6 <main+0x42e>
					}else{
						flag=0;
 8001cbe:	4b65      	ldr	r3, [pc, #404]	; (8001e54 <main+0x39c>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	701a      	strb	r2, [r3, #0]
 8001cc4:	e10f      	b.n	8001ee6 <main+0x42e>
					}
				}
			}else{
				if(isStartPressed){
 8001cc6:	2390      	movs	r3, #144	; 0x90
 8001cc8:	05db      	lsls	r3, r3, #23
 8001cca:	0018      	movs	r0, r3
 8001ccc:	f7ff feba 	bl	8001a44 <LL_GPIO_ReadInputPort>
 8001cd0:	0002      	movs	r2, r0
 8001cd2:	2380      	movs	r3, #128	; 0x80
 8001cd4:	021b      	lsls	r3, r3, #8
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	d10b      	bne.n	8001cf2 <main+0x23a>
					if(!mute)
 8001cda:	4b54      	ldr	r3, [pc, #336]	; (8001e2c <main+0x374>)
 8001cdc:	781b      	ldrb	r3, [r3, #0]
 8001cde:	2201      	movs	r2, #1
 8001ce0:	4053      	eors	r3, r2
 8001ce2:	b2db      	uxtb	r3, r3
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d004      	beq.n	8001cf2 <main+0x23a>
					{
						siren_on;
 8001ce8:	4b4b      	ldr	r3, [pc, #300]	; (8001e18 <main+0x360>)
 8001cea:	2140      	movs	r1, #64	; 0x40
 8001cec:	0018      	movs	r0, r3
 8001cee:	f7ff feb3 	bl	8001a58 <LL_GPIO_SetOutputPin>
					}
				}


				if(!mute)
 8001cf2:	4b4e      	ldr	r3, [pc, #312]	; (8001e2c <main+0x374>)
 8001cf4:	781b      	ldrb	r3, [r3, #0]
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	4053      	eors	r3, r2
 8001cfa:	b2db      	uxtb	r3, r3
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d01b      	beq.n	8001d38 <main+0x280>
				{
					if(isMutePressed){
 8001d00:	4b45      	ldr	r3, [pc, #276]	; (8001e18 <main+0x360>)
 8001d02:	0018      	movs	r0, r3
 8001d04:	f7ff fe9e 	bl	8001a44 <LL_GPIO_ReadInputPort>
 8001d08:	0003      	movs	r3, r0
 8001d0a:	2208      	movs	r2, #8
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	d10f      	bne.n	8001d30 <main+0x278>
						mute_cnt++;
 8001d10:	4b47      	ldr	r3, [pc, #284]	; (8001e30 <main+0x378>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	1c5a      	adds	r2, r3, #1
 8001d16:	4b46      	ldr	r3, [pc, #280]	; (8001e30 <main+0x378>)
 8001d18:	601a      	str	r2, [r3, #0]
						if(mute_cnt>300){
 8001d1a:	4b45      	ldr	r3, [pc, #276]	; (8001e30 <main+0x378>)
 8001d1c:	681a      	ldr	r2, [r3, #0]
 8001d1e:	2396      	movs	r3, #150	; 0x96
 8001d20:	005b      	lsls	r3, r3, #1
 8001d22:	429a      	cmp	r2, r3
 8001d24:	d800      	bhi.n	8001d28 <main+0x270>
 8001d26:	e0de      	b.n	8001ee6 <main+0x42e>
							mute=1;
 8001d28:	4b40      	ldr	r3, [pc, #256]	; (8001e2c <main+0x374>)
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	701a      	strb	r2, [r3, #0]
 8001d2e:	e0da      	b.n	8001ee6 <main+0x42e>
						}
					}else{
						mute_cnt=0;
 8001d30:	4b3f      	ldr	r3, [pc, #252]	; (8001e30 <main+0x378>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	601a      	str	r2, [r3, #0]
 8001d36:	e0d6      	b.n	8001ee6 <main+0x42e>
					}
				}
				else
				{
					siren_off;
 8001d38:	4b37      	ldr	r3, [pc, #220]	; (8001e18 <main+0x360>)
 8001d3a:	2140      	movs	r1, #64	; 0x40
 8001d3c:	0018      	movs	r0, r3
 8001d3e:	f7ff fe97 	bl	8001a70 <LL_GPIO_ResetOutputPin>
					mute=0;
 8001d42:	4b3a      	ldr	r3, [pc, #232]	; (8001e2c <main+0x374>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	701a      	strb	r2, [r3, #0]
 8001d48:	e0cd      	b.n	8001ee6 <main+0x42e>
				}
			}

		}else{
			if(first_check){
 8001d4a:	4b43      	ldr	r3, [pc, #268]	; (8001e58 <main+0x3a0>)
 8001d4c:	781b      	ldrb	r3, [r3, #0]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d100      	bne.n	8001d54 <main+0x29c>
 8001d52:	e0c8      	b.n	8001ee6 <main+0x42e>
				er_off;
 8001d54:	2380      	movs	r3, #128	; 0x80
 8001d56:	019b      	lsls	r3, r3, #6
 8001d58:	4a32      	ldr	r2, [pc, #200]	; (8001e24 <main+0x36c>)
 8001d5a:	0019      	movs	r1, r3
 8001d5c:	0010      	movs	r0, r2
 8001d5e:	f7ff fe87 	bl	8001a70 <LL_GPIO_ResetOutputPin>
				siren_off;
 8001d62:	4b2d      	ldr	r3, [pc, #180]	; (8001e18 <main+0x360>)
 8001d64:	2140      	movs	r1, #64	; 0x40
 8001d66:	0018      	movs	r0, r3
 8001d68:	f7ff fe82 	bl	8001a70 <LL_GPIO_ResetOutputPin>
				mute=0;
 8001d6c:	4b2f      	ldr	r3, [pc, #188]	; (8001e2c <main+0x374>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	701a      	strb	r2, [r3, #0]
				if(working){
 8001d72:	4b2a      	ldr	r3, [pc, #168]	; (8001e1c <main+0x364>)
 8001d74:	781b      	ldrb	r3, [r3, #0]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d00f      	beq.n	8001d9a <main+0x2e2>
					if(mscnt%250==0)
 8001d7a:	4b29      	ldr	r3, [pc, #164]	; (8001e20 <main+0x368>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	21fa      	movs	r1, #250	; 0xfa
 8001d80:	0018      	movs	r0, r3
 8001d82:	f7fe fa47 	bl	8000214 <__aeabi_uidivmod>
 8001d86:	1e0b      	subs	r3, r1, #0
 8001d88:	d10e      	bne.n	8001da8 <main+0x2f0>
					{
						pwr_toggle;
 8001d8a:	2380      	movs	r3, #128	; 0x80
 8001d8c:	01db      	lsls	r3, r3, #7
 8001d8e:	4a25      	ldr	r2, [pc, #148]	; (8001e24 <main+0x36c>)
 8001d90:	0019      	movs	r1, r3
 8001d92:	0010      	movs	r0, r2
 8001d94:	f7ff fe78 	bl	8001a88 <LL_GPIO_TogglePin>
 8001d98:	e006      	b.n	8001da8 <main+0x2f0>
					}
				}else{
					pwr_on;
 8001d9a:	2380      	movs	r3, #128	; 0x80
 8001d9c:	01db      	lsls	r3, r3, #7
 8001d9e:	4a21      	ldr	r2, [pc, #132]	; (8001e24 <main+0x36c>)
 8001da0:	0019      	movs	r1, r3
 8001da2:	0010      	movs	r0, r2
 8001da4:	f7ff fe58 	bl	8001a58 <LL_GPIO_SetOutputPin>
				}

				if((isStartPressed)&&!(vbat>vdyn_min && freq>150)){//if(vbat>vdyn_min || freq>150)
 8001da8:	2390      	movs	r3, #144	; 0x90
 8001daa:	05db      	lsls	r3, r3, #23
 8001dac:	0018      	movs	r0, r3
 8001dae:	f7ff fe49 	bl	8001a44 <LL_GPIO_ReadInputPort>
 8001db2:	0002      	movs	r2, r0
 8001db4:	2380      	movs	r3, #128	; 0x80
 8001db6:	021b      	lsls	r3, r3, #8
 8001db8:	4013      	ands	r3, r2
 8001dba:	d16b      	bne.n	8001e94 <main+0x3dc>
 8001dbc:	4b27      	ldr	r3, [pc, #156]	; (8001e5c <main+0x3a4>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	1c18      	adds	r0, r3, #0
 8001dc2:	f7fe fde1 	bl	8000988 <__aeabi_f2d>
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	1c1c      	adds	r4, r3, #0
 8001dca:	4a25      	ldr	r2, [pc, #148]	; (8001e60 <main+0x3a8>)
 8001dcc:	4b25      	ldr	r3, [pc, #148]	; (8001e64 <main+0x3ac>)
 8001dce:	f7fe fa51 	bl	8000274 <__aeabi_dcmpgt>
 8001dd2:	1e03      	subs	r3, r0, #0
 8001dd4:	d101      	bne.n	8001dda <main+0x322>
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	1c1c      	adds	r4, r3, #0
 8001dda:	b2e3      	uxtb	r3, r4
 8001ddc:	2201      	movs	r2, #1
 8001dde:	4053      	eors	r3, r2
 8001de0:	b2db      	uxtb	r3, r3
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d103      	bne.n	8001dee <main+0x336>
 8001de6:	4b20      	ldr	r3, [pc, #128]	; (8001e68 <main+0x3b0>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	2b96      	cmp	r3, #150	; 0x96
 8001dec:	d852      	bhi.n	8001e94 <main+0x3dc>
					if(start_cnt<20000){
 8001dee:	4b1f      	ldr	r3, [pc, #124]	; (8001e6c <main+0x3b4>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4a1f      	ldr	r2, [pc, #124]	; (8001e70 <main+0x3b8>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d83f      	bhi.n	8001e78 <main+0x3c0>
						start_on;
 8001df8:	4b07      	ldr	r3, [pc, #28]	; (8001e18 <main+0x360>)
 8001dfa:	2110      	movs	r1, #16
 8001dfc:	0018      	movs	r0, r3
 8001dfe:	f7ff fe2b 	bl	8001a58 <LL_GPIO_SetOutputPin>
						starting=1;
 8001e02:	4b1c      	ldr	r3, [pc, #112]	; (8001e74 <main+0x3bc>)
 8001e04:	2201      	movs	r2, #1
 8001e06:	701a      	strb	r2, [r3, #0]
 8001e08:	e03e      	b.n	8001e88 <main+0x3d0>
 8001e0a:	46c0      	nop			; (mov r8, r8)
 8001e0c:	20000044 	.word	0x20000044
 8001e10:	20000064 	.word	0x20000064
 8001e14:	00004e20 	.word	0x00004e20
 8001e18:	48000400 	.word	0x48000400
 8001e1c:	20000070 	.word	0x20000070
 8001e20:	2000002c 	.word	0x2000002c
 8001e24:	48000800 	.word	0x48000800
 8001e28:	20000041 	.word	0x20000041
 8001e2c:	20000038 	.word	0x20000038
 8001e30:	20000034 	.word	0x20000034
 8001e34:	00000bb8 	.word	0x00000bb8
 8001e38:	2000003d 	.word	0x2000003d
 8001e3c:	2000003a 	.word	0x2000003a
 8001e40:	2000003e 	.word	0x2000003e
 8001e44:	20000042 	.word	0x20000042
 8001e48:	2000003c 	.word	0x2000003c
 8001e4c:	2000003f 	.word	0x2000003f
 8001e50:	20000040 	.word	0x20000040
 8001e54:	2000006c 	.word	0x2000006c
 8001e58:	2000006d 	.word	0x2000006d
 8001e5c:	2000007c 	.word	0x2000007c
 8001e60:	e147ae14 	.word	0xe147ae14
 8001e64:	4002147a 	.word	0x4002147a
 8001e68:	2000005c 	.word	0x2000005c
 8001e6c:	20000030 	.word	0x20000030
 8001e70:	00004e1f 	.word	0x00004e1f
 8001e74:	2000006e 	.word	0x2000006e
					}else{
						start_off;
 8001e78:	4b23      	ldr	r3, [pc, #140]	; (8001f08 <main+0x450>)
 8001e7a:	2110      	movs	r1, #16
 8001e7c:	0018      	movs	r0, r3
 8001e7e:	f7ff fdf7 	bl	8001a70 <LL_GPIO_ResetOutputPin>
						starting=0;
 8001e82:	4b22      	ldr	r3, [pc, #136]	; (8001f0c <main+0x454>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	701a      	strb	r2, [r3, #0]
					}
					start_cnt++;
 8001e88:	4b21      	ldr	r3, [pc, #132]	; (8001f10 <main+0x458>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	1c5a      	adds	r2, r3, #1
 8001e8e:	4b20      	ldr	r3, [pc, #128]	; (8001f10 <main+0x458>)
 8001e90:	601a      	str	r2, [r3, #0]
 8001e92:	e00a      	b.n	8001eaa <main+0x3f2>
				}else{
					start_off;
 8001e94:	4b1c      	ldr	r3, [pc, #112]	; (8001f08 <main+0x450>)
 8001e96:	2110      	movs	r1, #16
 8001e98:	0018      	movs	r0, r3
 8001e9a:	f7ff fde9 	bl	8001a70 <LL_GPIO_ResetOutputPin>
					start_cnt=0;
 8001e9e:	4b1c      	ldr	r3, [pc, #112]	; (8001f10 <main+0x458>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	601a      	str	r2, [r3, #0]
					starting=0;
 8001ea4:	4b19      	ldr	r3, [pc, #100]	; (8001f0c <main+0x454>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	701a      	strb	r2, [r3, #0]
				}

				if(isMutePressed){
 8001eaa:	4b17      	ldr	r3, [pc, #92]	; (8001f08 <main+0x450>)
 8001eac:	0018      	movs	r0, r3
 8001eae:	f7ff fdc9 	bl	8001a44 <LL_GPIO_ReadInputPort>
 8001eb2:	0003      	movs	r3, r0
 8001eb4:	2208      	movs	r2, #8
 8001eb6:	4013      	ands	r3, r2
 8001eb8:	d112      	bne.n	8001ee0 <main+0x428>
					mute_cnt++;
 8001eba:	4b16      	ldr	r3, [pc, #88]	; (8001f14 <main+0x45c>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	1c5a      	adds	r2, r3, #1
 8001ec0:	4b14      	ldr	r3, [pc, #80]	; (8001f14 <main+0x45c>)
 8001ec2:	601a      	str	r2, [r3, #0]
					if(mute_cnt>1500){
 8001ec4:	4b13      	ldr	r3, [pc, #76]	; (8001f14 <main+0x45c>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a13      	ldr	r2, [pc, #76]	; (8001f18 <main+0x460>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d90b      	bls.n	8001ee6 <main+0x42e>
						//turn off
						turn_off;
 8001ece:	4b0e      	ldr	r3, [pc, #56]	; (8001f08 <main+0x450>)
 8001ed0:	2120      	movs	r1, #32
 8001ed2:	0018      	movs	r0, r3
 8001ed4:	f7ff fdc0 	bl	8001a58 <LL_GPIO_SetOutputPin>
 8001ed8:	4b10      	ldr	r3, [pc, #64]	; (8001f1c <main+0x464>)
 8001eda:	2201      	movs	r2, #1
 8001edc:	701a      	strb	r2, [r3, #0]
 8001ede:	e002      	b.n	8001ee6 <main+0x42e>
					}
				}else{
					mute_cnt=0;
 8001ee0:	4b0c      	ldr	r3, [pc, #48]	; (8001f14 <main+0x45c>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	601a      	str	r2, [r3, #0]
				}
			}
		}


		while(thick==old_thick);
 8001ee6:	46c0      	nop			; (mov r8, r8)
 8001ee8:	4b0d      	ldr	r3, [pc, #52]	; (8001f20 <main+0x468>)
 8001eea:	681a      	ldr	r2, [r3, #0]
 8001eec:	4b0d      	ldr	r3, [pc, #52]	; (8001f24 <main+0x46c>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	d0f9      	beq.n	8001ee8 <main+0x430>
		old_thick=thick;
 8001ef4:	4b0a      	ldr	r3, [pc, #40]	; (8001f20 <main+0x468>)
 8001ef6:	681a      	ldr	r2, [r3, #0]
 8001ef8:	4b0a      	ldr	r3, [pc, #40]	; (8001f24 <main+0x46c>)
 8001efa:	601a      	str	r2, [r3, #0]
		mscnt++;
 8001efc:	4b0a      	ldr	r3, [pc, #40]	; (8001f28 <main+0x470>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	1c5a      	adds	r2, r3, #1
 8001f02:	4b09      	ldr	r3, [pc, #36]	; (8001f28 <main+0x470>)
 8001f04:	601a      	str	r2, [r3, #0]
		if(is_off){
 8001f06:	e5f1      	b.n	8001aec <main+0x34>
 8001f08:	48000400 	.word	0x48000400
 8001f0c:	2000006e 	.word	0x2000006e
 8001f10:	20000030 	.word	0x20000030
 8001f14:	20000034 	.word	0x20000034
 8001f18:	000005dc 	.word	0x000005dc
 8001f1c:	20000044 	.word	0x20000044
 8001f20:	20000074 	.word	0x20000074
 8001f24:	20000028 	.word	0x20000028
 8001f28:	2000002c 	.word	0x2000002c

08001f2c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	af00      	add	r7, sp, #0
	LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 8001f30:	2000      	movs	r0, #0
 8001f32:	f7ff fd4b 	bl	80019cc <LL_FLASH_SetLatency>
	while(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_0)
 8001f36:	46c0      	nop			; (mov r8, r8)
 8001f38:	f7ff fd5c 	bl	80019f4 <LL_FLASH_GetLatency>
 8001f3c:	1e03      	subs	r3, r0, #0
 8001f3e:	d1fb      	bne.n	8001f38 <SystemClock_Config+0xc>
	{
	}
	LL_RCC_HSI_Enable();
 8001f40:	f7ff fbfa 	bl	8001738 <LL_RCC_HSI_Enable>

	/* Wait till HSI is ready */
	while(LL_RCC_HSI_IsReady() != 1)
 8001f44:	46c0      	nop			; (mov r8, r8)
 8001f46:	f7ff fc05 	bl	8001754 <LL_RCC_HSI_IsReady>
 8001f4a:	0003      	movs	r3, r0
 8001f4c:	2b01      	cmp	r3, #1
 8001f4e:	d1fa      	bne.n	8001f46 <SystemClock_Config+0x1a>
	{

	}
	LL_RCC_HSI_SetCalibTrimming(16);
 8001f50:	2010      	movs	r0, #16
 8001f52:	f7ff fc0f 	bl	8001774 <LL_RCC_HSI_SetCalibTrimming>
	LL_RCC_HSI14_Enable();
 8001f56:	f7ff fc21 	bl	800179c <LL_RCC_HSI14_Enable>

	/* Wait till HSI14 is ready */
	while(LL_RCC_HSI14_IsReady() != 1)
 8001f5a:	46c0      	nop			; (mov r8, r8)
 8001f5c:	f7ff fc2c 	bl	80017b8 <LL_RCC_HSI14_IsReady>
 8001f60:	0003      	movs	r3, r0
 8001f62:	2b01      	cmp	r3, #1
 8001f64:	d1fa      	bne.n	8001f5c <SystemClock_Config+0x30>
	{

	}
	LL_RCC_HSI14_SetCalibTrimming(16);
 8001f66:	2010      	movs	r0, #16
 8001f68:	f7ff fc44 	bl	80017f4 <LL_RCC_HSI14_SetCalibTrimming>
	LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI_DIV_2, LL_RCC_PLL_MUL_4);
 8001f6c:	2380      	movs	r3, #128	; 0x80
 8001f6e:	031b      	lsls	r3, r3, #12
 8001f70:	0019      	movs	r1, r3
 8001f72:	2000      	movs	r0, #0
 8001f74:	f7ff fcd8 	bl	8001928 <LL_RCC_PLL_ConfigDomain_SYS>
	LL_RCC_PLL_Enable();
 8001f78:	f7ff fcb4 	bl	80018e4 <LL_RCC_PLL_Enable>

	/* Wait till PLL is ready */
	while(LL_RCC_PLL_IsReady() != 1)
 8001f7c:	46c0      	nop			; (mov r8, r8)
 8001f7e:	f7ff fcbf 	bl	8001900 <LL_RCC_PLL_IsReady>
 8001f82:	0003      	movs	r3, r0
 8001f84:	2b01      	cmp	r3, #1
 8001f86:	d1fa      	bne.n	8001f7e <SystemClock_Config+0x52>
	{

	}
	LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8001f88:	2000      	movs	r0, #0
 8001f8a:	f7ff fc67 	bl	800185c <LL_RCC_SetAHBPrescaler>
	LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8001f8e:	2000      	movs	r0, #0
 8001f90:	f7ff fc78 	bl	8001884 <LL_RCC_SetAPB1Prescaler>
	LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8001f94:	2002      	movs	r0, #2
 8001f96:	f7ff fc41 	bl	800181c <LL_RCC_SetSysClkSource>

	/* Wait till System clock is ready */
	while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8001f9a:	46c0      	nop			; (mov r8, r8)
 8001f9c:	f7ff fc52 	bl	8001844 <LL_RCC_GetSysClkSource>
 8001fa0:	0003      	movs	r3, r0
 8001fa2:	2b08      	cmp	r3, #8
 8001fa4:	d1fa      	bne.n	8001f9c <SystemClock_Config+0x70>
	{

	}
	LL_Init1msTick(16000000);
 8001fa6:	4b08      	ldr	r3, [pc, #32]	; (8001fc8 <SystemClock_Config+0x9c>)
 8001fa8:	0018      	movs	r0, r3
 8001faa:	f001 fd49 	bl	8003a40 <LL_Init1msTick>
	LL_SetSystemCoreClock(16000000);
 8001fae:	4b06      	ldr	r3, [pc, #24]	; (8001fc8 <SystemClock_Config+0x9c>)
 8001fb0:	0018      	movs	r0, r3
 8001fb2:	f001 fd77 	bl	8003aa4 <LL_SetSystemCoreClock>
	LL_RCC_HSI14_EnableADCControl();
 8001fb6:	f7ff fc0f 	bl	80017d8 <LL_RCC_HSI14_EnableADCControl>
	LL_RCC_SetUSARTClockSource(LL_RCC_USART1_CLKSOURCE_PCLK1);
 8001fba:	2000      	movs	r0, #0
 8001fbc:	f7ff fc78 	bl	80018b0 <LL_RCC_SetUSARTClockSource>
}
 8001fc0:	46c0      	nop			; (mov r8, r8)
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	46c0      	nop			; (mov r8, r8)
 8001fc8:	00f42400 	.word	0x00f42400

08001fcc <cal_min>:
	}
}
#endif


float cal_min(float*val){
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b084      	sub	sp, #16
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
	float min=val[0];
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	60fb      	str	r3, [r7, #12]
	for(int i=0;i<200;i++){
 8001fda:	2300      	movs	r3, #0
 8001fdc:	60bb      	str	r3, [r7, #8]
 8001fde:	e013      	b.n	8002008 <cal_min+0x3c>
		if(min>val[i])min=val[i];
 8001fe0:	68bb      	ldr	r3, [r7, #8]
 8001fe2:	009b      	lsls	r3, r3, #2
 8001fe4:	687a      	ldr	r2, [r7, #4]
 8001fe6:	18d3      	adds	r3, r2, r3
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	1c19      	adds	r1, r3, #0
 8001fec:	68f8      	ldr	r0, [r7, #12]
 8001fee:	f7fe f97b 	bl	80002e8 <__aeabi_fcmpgt>
 8001ff2:	1e03      	subs	r3, r0, #0
 8001ff4:	d005      	beq.n	8002002 <cal_min+0x36>
 8001ff6:	68bb      	ldr	r3, [r7, #8]
 8001ff8:	009b      	lsls	r3, r3, #2
 8001ffa:	687a      	ldr	r2, [r7, #4]
 8001ffc:	18d3      	adds	r3, r2, r3
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	60fb      	str	r3, [r7, #12]
	for(int i=0;i<200;i++){
 8002002:	68bb      	ldr	r3, [r7, #8]
 8002004:	3301      	adds	r3, #1
 8002006:	60bb      	str	r3, [r7, #8]
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	2bc7      	cmp	r3, #199	; 0xc7
 800200c:	dde8      	ble.n	8001fe0 <cal_min+0x14>
	}
	return min;
 800200e:	68fb      	ldr	r3, [r7, #12]
}
 8002010:	1c18      	adds	r0, r3, #0
 8002012:	46bd      	mov	sp, r7
 8002014:	b004      	add	sp, #16
 8002016:	bd80      	pop	{r7, pc}

08002018 <check_err>:

_Bool check_err(){
 8002018:	b580      	push	{r7, lr}
 800201a:	af00      	add	r7, sp, #0
	if(!is_off){
 800201c:	4baa      	ldr	r3, [pc, #680]	; (80022c8 <check_err+0x2b0>)
 800201e:	781b      	ldrb	r3, [r3, #0]
 8002020:	2201      	movs	r2, #1
 8002022:	4053      	eors	r3, r2
 8002024:	b2db      	uxtb	r3, r3
 8002026:	2b00      	cmp	r3, #0
 8002028:	d100      	bne.n	800202c <check_err+0x14>
 800202a:	e2a3      	b.n	8002574 <check_err+0x55c>
		if(adc){
 800202c:	4ba7      	ldr	r3, [pc, #668]	; (80022cc <check_err+0x2b4>)
 800202e:	781b      	ldrb	r3, [r3, #0]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d05d      	beq.n	80020f0 <check_err+0xd8>
			new_val=1;
 8002034:	4ba6      	ldr	r3, [pc, #664]	; (80022d0 <check_err+0x2b8>)
 8002036:	2201      	movs	r2, #1
 8002038:	701a      	strb	r2, [r3, #0]
			vac_sample=vac_sample_int*(float)(3.3/4096);
 800203a:	4ba6      	ldr	r3, [pc, #664]	; (80022d4 <check_err+0x2bc>)
 800203c:	881b      	ldrh	r3, [r3, #0]
 800203e:	0018      	movs	r0, r3
 8002040:	f7fe fb3e 	bl	80006c0 <__aeabi_i2f>
 8002044:	1c03      	adds	r3, r0, #0
 8002046:	49a4      	ldr	r1, [pc, #656]	; (80022d8 <check_err+0x2c0>)
 8002048:	1c18      	adds	r0, r3, #0
 800204a:	f7fe fa1f 	bl	800048c <__aeabi_fmul>
 800204e:	1c03      	adds	r3, r0, #0
 8002050:	1c1a      	adds	r2, r3, #0
 8002052:	4ba2      	ldr	r3, [pc, #648]	; (80022dc <check_err+0x2c4>)
 8002054:	601a      	str	r2, [r3, #0]
			if(vac_sample<2.0){
 8002056:	4ba1      	ldr	r3, [pc, #644]	; (80022dc <check_err+0x2c4>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	2180      	movs	r1, #128	; 0x80
 800205c:	05c9      	lsls	r1, r1, #23
 800205e:	1c18      	adds	r0, r3, #0
 8002060:	f7fe f92e 	bl	80002c0 <__aeabi_fcmplt>
 8002064:	1e03      	subs	r3, r0, #0
 8002066:	d003      	beq.n	8002070 <check_err+0x58>
				pulse=1;
 8002068:	4b9d      	ldr	r3, [pc, #628]	; (80022e0 <check_err+0x2c8>)
 800206a:	2201      	movs	r2, #1
 800206c:	601a      	str	r2, [r3, #0]
 800206e:	e016      	b.n	800209e <check_err+0x86>
			}else{
				if(vac_sample>2.7 && pulse){
 8002070:	4b9a      	ldr	r3, [pc, #616]	; (80022dc <check_err+0x2c4>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	1c18      	adds	r0, r3, #0
 8002076:	f7fe fc87 	bl	8000988 <__aeabi_f2d>
 800207a:	4a9a      	ldr	r2, [pc, #616]	; (80022e4 <check_err+0x2cc>)
 800207c:	4b9a      	ldr	r3, [pc, #616]	; (80022e8 <check_err+0x2d0>)
 800207e:	f7fe f8f9 	bl	8000274 <__aeabi_dcmpgt>
 8002082:	1e03      	subs	r3, r0, #0
 8002084:	d00b      	beq.n	800209e <check_err+0x86>
 8002086:	4b96      	ldr	r3, [pc, #600]	; (80022e0 <check_err+0x2c8>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d007      	beq.n	800209e <check_err+0x86>
					fr++;
 800208e:	4b97      	ldr	r3, [pc, #604]	; (80022ec <check_err+0x2d4>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	1c5a      	adds	r2, r3, #1
 8002094:	4b95      	ldr	r3, [pc, #596]	; (80022ec <check_err+0x2d4>)
 8002096:	601a      	str	r2, [r3, #0]
					pulse=0;
 8002098:	4b91      	ldr	r3, [pc, #580]	; (80022e0 <check_err+0x2c8>)
 800209a:	2200      	movs	r2, #0
 800209c:	601a      	str	r2, [r3, #0]
				}
			}
			samples[sample_cnt++]=vac_sample;
 800209e:	4b94      	ldr	r3, [pc, #592]	; (80022f0 <check_err+0x2d8>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	1c59      	adds	r1, r3, #1
 80020a4:	4a92      	ldr	r2, [pc, #584]	; (80022f0 <check_err+0x2d8>)
 80020a6:	6011      	str	r1, [r2, #0]
 80020a8:	4a8c      	ldr	r2, [pc, #560]	; (80022dc <check_err+0x2c4>)
 80020aa:	6811      	ldr	r1, [r2, #0]
 80020ac:	4a91      	ldr	r2, [pc, #580]	; (80022f4 <check_err+0x2dc>)
 80020ae:	009b      	lsls	r3, r3, #2
 80020b0:	5099      	str	r1, [r3, r2]
			if(sample_cnt==sizeof(samples)/4){
 80020b2:	4b8f      	ldr	r3, [pc, #572]	; (80022f0 <check_err+0x2d8>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	2bc8      	cmp	r3, #200	; 0xc8
 80020b8:	d109      	bne.n	80020ce <check_err+0xb6>
				sample_cnt=0;
 80020ba:	4b8d      	ldr	r3, [pc, #564]	; (80022f0 <check_err+0x2d8>)
 80020bc:	2200      	movs	r2, #0
 80020be:	601a      	str	r2, [r3, #0]
				min_sample=cal_min(samples);
 80020c0:	4b8c      	ldr	r3, [pc, #560]	; (80022f4 <check_err+0x2dc>)
 80020c2:	0018      	movs	r0, r3
 80020c4:	f7ff ff82 	bl	8001fcc <cal_min>
 80020c8:	1c02      	adds	r2, r0, #0
 80020ca:	4b8b      	ldr	r3, [pc, #556]	; (80022f8 <check_err+0x2e0>)
 80020cc:	601a      	str	r2, [r3, #0]
				//if(min_sample)
			}



			vadc=vadc_int*(float)(3.3/4096);
 80020ce:	4b8b      	ldr	r3, [pc, #556]	; (80022fc <check_err+0x2e4>)
 80020d0:	881b      	ldrh	r3, [r3, #0]
 80020d2:	0018      	movs	r0, r3
 80020d4:	f7fe faf4 	bl	80006c0 <__aeabi_i2f>
 80020d8:	1c03      	adds	r3, r0, #0
 80020da:	497f      	ldr	r1, [pc, #508]	; (80022d8 <check_err+0x2c0>)
 80020dc:	1c18      	adds	r0, r3, #0
 80020de:	f7fe f9d5 	bl	800048c <__aeabi_fmul>
 80020e2:	1c03      	adds	r3, r0, #0
 80020e4:	1c1a      	adds	r2, r3, #0
 80020e6:	4b86      	ldr	r3, [pc, #536]	; (8002300 <check_err+0x2e8>)
 80020e8:	601a      	str	r2, [r3, #0]
			adc=0;
 80020ea:	4b78      	ldr	r3, [pc, #480]	; (80022cc <check_err+0x2b4>)
 80020ec:	2200      	movs	r2, #0
 80020ee:	701a      	strb	r2, [r3, #0]

		}


		if(working){
 80020f0:	4b84      	ldr	r3, [pc, #528]	; (8002304 <check_err+0x2ec>)
 80020f2:	781b      	ldrb	r3, [r3, #0]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d100      	bne.n	80020fa <check_err+0xe2>
 80020f8:	e0b2      	b.n	8002260 <check_err+0x248>
			if((oil_err)&& working_time>3000){
 80020fa:	2390      	movs	r3, #144	; 0x90
 80020fc:	05db      	lsls	r3, r3, #23
 80020fe:	0018      	movs	r0, r3
 8002100:	f7ff fca0 	bl	8001a44 <LL_GPIO_ReadInputPort>
 8002104:	0003      	movs	r3, r0
 8002106:	2280      	movs	r2, #128	; 0x80
 8002108:	4013      	ands	r3, r2
 800210a:	d10f      	bne.n	800212c <check_err+0x114>
 800210c:	4b7e      	ldr	r3, [pc, #504]	; (8002308 <check_err+0x2f0>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a7e      	ldr	r2, [pc, #504]	; (800230c <check_err+0x2f4>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d90a      	bls.n	800212c <check_err+0x114>
				oil_on;
 8002116:	4b7e      	ldr	r3, [pc, #504]	; (8002310 <check_err+0x2f8>)
 8002118:	2104      	movs	r1, #4
 800211a:	0018      	movs	r0, r3
 800211c:	f7ff fc9c 	bl	8001a58 <LL_GPIO_SetOutputPin>
				oil_err_flag=1;
 8002120:	4b7c      	ldr	r3, [pc, #496]	; (8002314 <check_err+0x2fc>)
 8002122:	2201      	movs	r2, #1
 8002124:	701a      	strb	r2, [r3, #0]
				//err_cnt++;
				flag=1;
 8002126:	4b7c      	ldr	r3, [pc, #496]	; (8002318 <check_err+0x300>)
 8002128:	2201      	movs	r2, #1
 800212a:	701a      	strb	r2, [r3, #0]
			}
			//		else{
			//			oil_err_flag=0;
			//			oil_off;
			//		}
			if(new_val){
 800212c:	4b68      	ldr	r3, [pc, #416]	; (80022d0 <check_err+0x2b8>)
 800212e:	781b      	ldrb	r3, [r3, #0]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d010      	beq.n	8002156 <check_err+0x13e>
				new_val=0;
 8002134:	4b66      	ldr	r3, [pc, #408]	; (80022d0 <check_err+0x2b8>)
 8002136:	2200      	movs	r2, #0
 8002138:	701a      	strb	r2, [r3, #0]
				vbat=vbat_int*(float)(3.3/4096);
 800213a:	4b78      	ldr	r3, [pc, #480]	; (800231c <check_err+0x304>)
 800213c:	881b      	ldrh	r3, [r3, #0]
 800213e:	0018      	movs	r0, r3
 8002140:	f7fe fabe 	bl	80006c0 <__aeabi_i2f>
 8002144:	1c03      	adds	r3, r0, #0
 8002146:	4964      	ldr	r1, [pc, #400]	; (80022d8 <check_err+0x2c0>)
 8002148:	1c18      	adds	r0, r3, #0
 800214a:	f7fe f99f 	bl	800048c <__aeabi_fmul>
 800214e:	1c03      	adds	r3, r0, #0
 8002150:	1c1a      	adds	r2, r3, #0
 8002152:	4b73      	ldr	r3, [pc, #460]	; (8002320 <check_err+0x308>)
 8002154:	601a      	str	r2, [r3, #0]
				//			vbat*=5.54;
				//			vbat+=0.6;
			}
			if((vbat<vdyn_min && working_time>10000) || dyn_err){
 8002156:	4b72      	ldr	r3, [pc, #456]	; (8002320 <check_err+0x308>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	1c18      	adds	r0, r3, #0
 800215c:	f7fe fc14 	bl	8000988 <__aeabi_f2d>
 8002160:	4a70      	ldr	r2, [pc, #448]	; (8002324 <check_err+0x30c>)
 8002162:	4b71      	ldr	r3, [pc, #452]	; (8002328 <check_err+0x310>)
 8002164:	f7fe f872 	bl	800024c <__aeabi_dcmplt>
 8002168:	1e03      	subs	r3, r0, #0
 800216a:	d004      	beq.n	8002176 <check_err+0x15e>
 800216c:	4b66      	ldr	r3, [pc, #408]	; (8002308 <check_err+0x2f0>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a6e      	ldr	r2, [pc, #440]	; (800232c <check_err+0x314>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d808      	bhi.n	8002188 <check_err+0x170>
 8002176:	4b66      	ldr	r3, [pc, #408]	; (8002310 <check_err+0x2f8>)
 8002178:	0018      	movs	r0, r3
 800217a:	f7ff fc63 	bl	8001a44 <LL_GPIO_ReadInputPort>
 800217e:	0002      	movs	r2, r0
 8002180:	2380      	movs	r3, #128	; 0x80
 8002182:	01db      	lsls	r3, r3, #7
 8002184:	4013      	ands	r3, r2
 8002186:	d10d      	bne.n	80021a4 <check_err+0x18c>
				bat_on;
 8002188:	2380      	movs	r3, #128	; 0x80
 800218a:	011b      	lsls	r3, r3, #4
 800218c:	4a60      	ldr	r2, [pc, #384]	; (8002310 <check_err+0x2f8>)
 800218e:	0019      	movs	r1, r3
 8002190:	0010      	movs	r0, r2
 8002192:	f7ff fc61 	bl	8001a58 <LL_GPIO_SetOutputPin>
				dyn_err_flag=1;
 8002196:	4b66      	ldr	r3, [pc, #408]	; (8002330 <check_err+0x318>)
 8002198:	2201      	movs	r2, #1
 800219a:	701a      	strb	r2, [r3, #0]

				flag=1;
 800219c:	4b5e      	ldr	r3, [pc, #376]	; (8002318 <check_err+0x300>)
 800219e:	2201      	movs	r2, #1
 80021a0:	701a      	strb	r2, [r3, #0]
 80021a2:	e009      	b.n	80021b8 <check_err+0x1a0>
			}else{
				dyn_err_flag=0;
 80021a4:	4b62      	ldr	r3, [pc, #392]	; (8002330 <check_err+0x318>)
 80021a6:	2200      	movs	r2, #0
 80021a8:	701a      	strb	r2, [r3, #0]
				bat_off;
 80021aa:	2380      	movs	r3, #128	; 0x80
 80021ac:	011b      	lsls	r3, r3, #4
 80021ae:	4a58      	ldr	r2, [pc, #352]	; (8002310 <check_err+0x2f8>)
 80021b0:	0019      	movs	r1, r3
 80021b2:	0010      	movs	r0, r2
 80021b4:	f7ff fc5c 	bl	8001a70 <LL_GPIO_ResetOutputPin>
			}

			if((min_sample<vac_min)&& working_time>200000){
 80021b8:	4b4f      	ldr	r3, [pc, #316]	; (80022f8 <check_err+0x2e0>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	1c18      	adds	r0, r3, #0
 80021be:	f7fe fbe3 	bl	8000988 <__aeabi_f2d>
 80021c2:	4a5c      	ldr	r2, [pc, #368]	; (8002334 <check_err+0x31c>)
 80021c4:	4b5c      	ldr	r3, [pc, #368]	; (8002338 <check_err+0x320>)
 80021c6:	f7fe f841 	bl	800024c <__aeabi_dcmplt>
 80021ca:	1e03      	subs	r3, r0, #0
 80021cc:	d007      	beq.n	80021de <check_err+0x1c6>
 80021ce:	4b4e      	ldr	r3, [pc, #312]	; (8002308 <check_err+0x2f0>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4a5a      	ldr	r2, [pc, #360]	; (800233c <check_err+0x324>)
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d902      	bls.n	80021de <check_err+0x1c6>
				//vac_on;
				//flag=1;
				//err_cnt++;
				vac_err_high_flag=1;
 80021d8:	4b59      	ldr	r3, [pc, #356]	; (8002340 <check_err+0x328>)
 80021da:	2201      	movs	r2, #1
 80021dc:	701a      	strb	r2, [r3, #0]
			}

			if((min_sample>vac_max)&& working_time>200000){
 80021de:	4b46      	ldr	r3, [pc, #280]	; (80022f8 <check_err+0x2e0>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	1c18      	adds	r0, r3, #0
 80021e4:	f7fe fbd0 	bl	8000988 <__aeabi_f2d>
 80021e8:	4a56      	ldr	r2, [pc, #344]	; (8002344 <check_err+0x32c>)
 80021ea:	4b57      	ldr	r3, [pc, #348]	; (8002348 <check_err+0x330>)
 80021ec:	f7fe f842 	bl	8000274 <__aeabi_dcmpgt>
 80021f0:	1e03      	subs	r3, r0, #0
 80021f2:	d007      	beq.n	8002204 <check_err+0x1ec>
 80021f4:	4b44      	ldr	r3, [pc, #272]	; (8002308 <check_err+0x2f0>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a50      	ldr	r2, [pc, #320]	; (800233c <check_err+0x324>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d902      	bls.n	8002204 <check_err+0x1ec>
				//flag=1;
				//err_cnt++;
				vac_err_low_flag=1;
 80021fe:	4b53      	ldr	r3, [pc, #332]	; (800234c <check_err+0x334>)
 8002200:	2201      	movs	r2, #1
 8002202:	701a      	strb	r2, [r3, #0]
			}

			if(!(vac_err_high_flag||vac_err_low_flag)){
 8002204:	4b4e      	ldr	r3, [pc, #312]	; (8002340 <check_err+0x328>)
 8002206:	781b      	ldrb	r3, [r3, #0]
 8002208:	2201      	movs	r2, #1
 800220a:	4053      	eors	r3, r2
 800220c:	b2db      	uxtb	r3, r3
 800220e:	2b00      	cmp	r3, #0
 8002210:	d00a      	beq.n	8002228 <check_err+0x210>
 8002212:	4b4e      	ldr	r3, [pc, #312]	; (800234c <check_err+0x334>)
 8002214:	781b      	ldrb	r3, [r3, #0]
 8002216:	2201      	movs	r2, #1
 8002218:	4053      	eors	r3, r2
 800221a:	b2db      	uxtb	r3, r3
 800221c:	2b00      	cmp	r3, #0
 800221e:	d003      	beq.n	8002228 <check_err+0x210>
				//vac_off;
				vac_err_cnt=0;
 8002220:	4b4b      	ldr	r3, [pc, #300]	; (8002350 <check_err+0x338>)
 8002222:	2200      	movs	r2, #0
 8002224:	601a      	str	r2, [r3, #0]
 8002226:	e004      	b.n	8002232 <check_err+0x21a>
			}else{
				vac_err_cnt++;
 8002228:	4b49      	ldr	r3, [pc, #292]	; (8002350 <check_err+0x338>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	1c5a      	adds	r2, r3, #1
 800222e:	4b48      	ldr	r3, [pc, #288]	; (8002350 <check_err+0x338>)
 8002230:	601a      	str	r2, [r3, #0]
			}
			if((freq<192||freq>208)&&(working_time>200000)){//
 8002232:	4b48      	ldr	r3, [pc, #288]	; (8002354 <check_err+0x33c>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	2bbf      	cmp	r3, #191	; 0xbf
 8002238:	d903      	bls.n	8002242 <check_err+0x22a>
 800223a:	4b46      	ldr	r3, [pc, #280]	; (8002354 <check_err+0x33c>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	2bd0      	cmp	r3, #208	; 0xd0
 8002240:	d90a      	bls.n	8002258 <check_err+0x240>
 8002242:	4b31      	ldr	r3, [pc, #196]	; (8002308 <check_err+0x2f0>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a3d      	ldr	r2, [pc, #244]	; (800233c <check_err+0x324>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d905      	bls.n	8002258 <check_err+0x240>
				//fr_on;
				fr_err_cnt++;
 800224c:	4b42      	ldr	r3, [pc, #264]	; (8002358 <check_err+0x340>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	1c5a      	adds	r2, r3, #1
 8002252:	4b41      	ldr	r3, [pc, #260]	; (8002358 <check_err+0x340>)
 8002254:	601a      	str	r2, [r3, #0]
 8002256:	e0a1      	b.n	800239c <check_err+0x384>
				//flag=1;
				//err_cnt++;
				//freq_err_flag=1;
			}else{
				fr_err_cnt=0;
 8002258:	4b3f      	ldr	r3, [pc, #252]	; (8002358 <check_err+0x340>)
 800225a:	2200      	movs	r2, #0
 800225c:	601a      	str	r2, [r3, #0]
 800225e:	e09d      	b.n	800239c <check_err+0x384>
			}
		}else{
			//not working


			if(new_val){
 8002260:	4b1b      	ldr	r3, [pc, #108]	; (80022d0 <check_err+0x2b8>)
 8002262:	781b      	ldrb	r3, [r3, #0]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d010      	beq.n	800228a <check_err+0x272>

				new_val=0;
 8002268:	4b19      	ldr	r3, [pc, #100]	; (80022d0 <check_err+0x2b8>)
 800226a:	2200      	movs	r2, #0
 800226c:	701a      	strb	r2, [r3, #0]
				vbat=vbat_int*(float)(3.3/4096);
 800226e:	4b2b      	ldr	r3, [pc, #172]	; (800231c <check_err+0x304>)
 8002270:	881b      	ldrh	r3, [r3, #0]
 8002272:	0018      	movs	r0, r3
 8002274:	f7fe fa24 	bl	80006c0 <__aeabi_i2f>
 8002278:	1c03      	adds	r3, r0, #0
 800227a:	4917      	ldr	r1, [pc, #92]	; (80022d8 <check_err+0x2c0>)
 800227c:	1c18      	adds	r0, r3, #0
 800227e:	f7fe f905 	bl	800048c <__aeabi_fmul>
 8002282:	1c03      	adds	r3, r0, #0
 8002284:	1c1a      	adds	r2, r3, #0
 8002286:	4b26      	ldr	r3, [pc, #152]	; (8002320 <check_err+0x308>)
 8002288:	601a      	str	r2, [r3, #0]
				//			vbat*=5.54;
				//			vbat+=0.6;
			}


			if(vbat<vbat_min&&!starting){
 800228a:	4b25      	ldr	r3, [pc, #148]	; (8002320 <check_err+0x308>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	2180      	movs	r1, #128	; 0x80
 8002290:	05c9      	lsls	r1, r1, #23
 8002292:	1c18      	adds	r0, r3, #0
 8002294:	f7fe f814 	bl	80002c0 <__aeabi_fcmplt>
 8002298:	1e03      	subs	r3, r0, #0
 800229a:	d063      	beq.n	8002364 <check_err+0x34c>
 800229c:	4b2f      	ldr	r3, [pc, #188]	; (800235c <check_err+0x344>)
 800229e:	781b      	ldrb	r3, [r3, #0]
 80022a0:	2201      	movs	r2, #1
 80022a2:	4053      	eors	r3, r2
 80022a4:	b2db      	uxtb	r3, r3
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d05c      	beq.n	8002364 <check_err+0x34c>
				bat_on;
 80022aa:	2380      	movs	r3, #128	; 0x80
 80022ac:	011b      	lsls	r3, r3, #4
 80022ae:	4a18      	ldr	r2, [pc, #96]	; (8002310 <check_err+0x2f8>)
 80022b0:	0019      	movs	r1, r3
 80022b2:	0010      	movs	r0, r2
 80022b4:	f7ff fbd0 	bl	8001a58 <LL_GPIO_SetOutputPin>
				flag=1;
 80022b8:	4b17      	ldr	r3, [pc, #92]	; (8002318 <check_err+0x300>)
 80022ba:	2201      	movs	r2, #1
 80022bc:	701a      	strb	r2, [r3, #0]
				//err_cnt++;
				bat_err_flag=1;
 80022be:	4b28      	ldr	r3, [pc, #160]	; (8002360 <check_err+0x348>)
 80022c0:	2201      	movs	r2, #1
 80022c2:	701a      	strb	r2, [r3, #0]
 80022c4:	e058      	b.n	8002378 <check_err+0x360>
 80022c6:	46c0      	nop			; (mov r8, r8)
 80022c8:	20000044 	.word	0x20000044
 80022cc:	2000006f 	.word	0x2000006f
 80022d0:	20000039 	.word	0x20000039
 80022d4:	200003a8 	.word	0x200003a8
 80022d8:	3a533333 	.word	0x3a533333
 80022dc:	200003a0 	.word	0x200003a0
 80022e0:	20000058 	.word	0x20000058
 80022e4:	9999999a 	.word	0x9999999a
 80022e8:	40059999 	.word	0x40059999
 80022ec:	20000054 	.word	0x20000054
 80022f0:	2000004c 	.word	0x2000004c
 80022f4:	20000080 	.word	0x20000080
 80022f8:	20000048 	.word	0x20000048
 80022fc:	200003aa 	.word	0x200003aa
 8002300:	200003a4 	.word	0x200003a4
 8002304:	20000070 	.word	0x20000070
 8002308:	20000078 	.word	0x20000078
 800230c:	00000bb8 	.word	0x00000bb8
 8002310:	48000400 	.word	0x48000400
 8002314:	2000003a 	.word	0x2000003a
 8002318:	2000006c 	.word	0x2000006c
 800231c:	200003ac 	.word	0x200003ac
 8002320:	2000007c 	.word	0x2000007c
 8002324:	e147ae14 	.word	0xe147ae14
 8002328:	4002147a 	.word	0x4002147a
 800232c:	00002710 	.word	0x00002710
 8002330:	2000003d 	.word	0x2000003d
 8002334:	66666666 	.word	0x66666666
 8002338:	3fd66666 	.word	0x3fd66666
 800233c:	00030d40 	.word	0x00030d40
 8002340:	20000040 	.word	0x20000040
 8002344:	851eb852 	.word	0x851eb852
 8002348:	3ff451eb 	.word	0x3ff451eb
 800234c:	20000041 	.word	0x20000041
 8002350:	20000068 	.word	0x20000068
 8002354:	2000005c 	.word	0x2000005c
 8002358:	20000060 	.word	0x20000060
 800235c:	2000006e 	.word	0x2000006e
 8002360:	20000043 	.word	0x20000043
			}else{
				bat_off;
 8002364:	2380      	movs	r3, #128	; 0x80
 8002366:	011b      	lsls	r3, r3, #4
 8002368:	4a85      	ldr	r2, [pc, #532]	; (8002580 <check_err+0x568>)
 800236a:	0019      	movs	r1, r3
 800236c:	0010      	movs	r0, r2
 800236e:	f7ff fb7f 	bl	8001a70 <LL_GPIO_ResetOutputPin>
				bat_err_flag=0;
 8002372:	4b84      	ldr	r3, [pc, #528]	; (8002584 <check_err+0x56c>)
 8002374:	2200      	movs	r2, #0
 8002376:	701a      	strb	r2, [r3, #0]
			}

			if(vbat>vdyn_min || freq>150){
 8002378:	4b83      	ldr	r3, [pc, #524]	; (8002588 <check_err+0x570>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	1c18      	adds	r0, r3, #0
 800237e:	f7fe fb03 	bl	8000988 <__aeabi_f2d>
 8002382:	4a82      	ldr	r2, [pc, #520]	; (800258c <check_err+0x574>)
 8002384:	4b82      	ldr	r3, [pc, #520]	; (8002590 <check_err+0x578>)
 8002386:	f7fd ff75 	bl	8000274 <__aeabi_dcmpgt>
 800238a:	1e03      	subs	r3, r0, #0
 800238c:	d103      	bne.n	8002396 <check_err+0x37e>
 800238e:	4b81      	ldr	r3, [pc, #516]	; (8002594 <check_err+0x57c>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	2b96      	cmp	r3, #150	; 0x96
 8002394:	d902      	bls.n	800239c <check_err+0x384>
				working=1;
 8002396:	4b80      	ldr	r3, [pc, #512]	; (8002598 <check_err+0x580>)
 8002398:	2201      	movs	r2, #1
 800239a:	701a      	strb	r2, [r3, #0]
			}

		}

		if(water_err){
 800239c:	4b78      	ldr	r3, [pc, #480]	; (8002580 <check_err+0x568>)
 800239e:	0018      	movs	r0, r3
 80023a0:	f7ff fb50 	bl	8001a44 <LL_GPIO_ReadInputPort>
 80023a4:	0003      	movs	r3, r0
 80023a6:	2201      	movs	r2, #1
 80023a8:	4013      	ands	r3, r2
 80023aa:	d10c      	bne.n	80023c6 <check_err+0x3ae>
			water_on;
 80023ac:	2380      	movs	r3, #128	; 0x80
 80023ae:	00db      	lsls	r3, r3, #3
 80023b0:	4a73      	ldr	r2, [pc, #460]	; (8002580 <check_err+0x568>)
 80023b2:	0019      	movs	r1, r3
 80023b4:	0010      	movs	r0, r2
 80023b6:	f7ff fb4f 	bl	8001a58 <LL_GPIO_SetOutputPin>
			water_err_flag=1;
 80023ba:	4b78      	ldr	r3, [pc, #480]	; (800259c <check_err+0x584>)
 80023bc:	2201      	movs	r2, #1
 80023be:	701a      	strb	r2, [r3, #0]
			flag=1;
 80023c0:	4b77      	ldr	r3, [pc, #476]	; (80025a0 <check_err+0x588>)
 80023c2:	2201      	movs	r2, #1
 80023c4:	701a      	strb	r2, [r3, #0]
			//err_cnt++;
		}

		if(feul_err){
 80023c6:	4b6e      	ldr	r3, [pc, #440]	; (8002580 <check_err+0x568>)
 80023c8:	0018      	movs	r0, r3
 80023ca:	f7ff fb3b 	bl	8001a44 <LL_GPIO_ReadInputPort>
 80023ce:	0002      	movs	r2, r0
 80023d0:	2380      	movs	r3, #128	; 0x80
 80023d2:	021b      	lsls	r3, r3, #8
 80023d4:	4013      	ands	r3, r2
 80023d6:	d10c      	bne.n	80023f2 <check_err+0x3da>
			feul_on;
 80023d8:	2380      	movs	r3, #128	; 0x80
 80023da:	019b      	lsls	r3, r3, #6
 80023dc:	4a68      	ldr	r2, [pc, #416]	; (8002580 <check_err+0x568>)
 80023de:	0019      	movs	r1, r3
 80023e0:	0010      	movs	r0, r2
 80023e2:	f7ff fb39 	bl	8001a58 <LL_GPIO_SetOutputPin>
			flag=1;
 80023e6:	4b6e      	ldr	r3, [pc, #440]	; (80025a0 <check_err+0x588>)
 80023e8:	2201      	movs	r2, #1
 80023ea:	701a      	strb	r2, [r3, #0]
			//err_cnt++;
			feul_err_flag=1;
 80023ec:	4b6d      	ldr	r3, [pc, #436]	; (80025a4 <check_err+0x58c>)
 80023ee:	2201      	movs	r2, #1
 80023f0:	701a      	strb	r2, [r3, #0]
		}

		if(emr_err){
 80023f2:	2390      	movs	r3, #144	; 0x90
 80023f4:	05db      	lsls	r3, r3, #23
 80023f6:	0018      	movs	r0, r3
 80023f8:	f7ff fb24 	bl	8001a44 <LL_GPIO_ReadInputPort>
 80023fc:	0002      	movs	r2, r0
 80023fe:	2380      	movs	r3, #128	; 0x80
 8002400:	005b      	lsls	r3, r3, #1
 8002402:	4013      	ands	r3, r2
 8002404:	d10c      	bne.n	8002420 <check_err+0x408>
			emr_on;
 8002406:	2380      	movs	r3, #128	; 0x80
 8002408:	015b      	lsls	r3, r3, #5
 800240a:	4a5d      	ldr	r2, [pc, #372]	; (8002580 <check_err+0x568>)
 800240c:	0019      	movs	r1, r3
 800240e:	0010      	movs	r0, r2
 8002410:	f7ff fb22 	bl	8001a58 <LL_GPIO_SetOutputPin>
			flag=1;
 8002414:	4b62      	ldr	r3, [pc, #392]	; (80025a0 <check_err+0x588>)
 8002416:	2201      	movs	r2, #1
 8002418:	701a      	strb	r2, [r3, #0]
			//err_cnt++;
			emr_err_flag=1;
 800241a:	4b63      	ldr	r3, [pc, #396]	; (80025a8 <check_err+0x590>)
 800241c:	2201      	movs	r2, #1
 800241e:	701a      	strb	r2, [r3, #0]
		}


		if(ol_err){
 8002420:	4b57      	ldr	r3, [pc, #348]	; (8002580 <check_err+0x568>)
 8002422:	0018      	movs	r0, r3
 8002424:	f7ff fb0e 	bl	8001a44 <LL_GPIO_ReadInputPort>
 8002428:	0003      	movs	r3, r0
 800242a:	2202      	movs	r2, #2
 800242c:	4013      	ands	r3, r2
 800242e:	d10c      	bne.n	800244a <check_err+0x432>
			ol_err_flag=1;
 8002430:	4b5e      	ldr	r3, [pc, #376]	; (80025ac <check_err+0x594>)
 8002432:	2201      	movs	r2, #1
 8002434:	701a      	strb	r2, [r3, #0]
			ol_on;
 8002436:	2380      	movs	r3, #128	; 0x80
 8002438:	021b      	lsls	r3, r3, #8
 800243a:	4a5d      	ldr	r2, [pc, #372]	; (80025b0 <check_err+0x598>)
 800243c:	0019      	movs	r1, r3
 800243e:	0010      	movs	r0, r2
 8002440:	f7ff fb0a 	bl	8001a58 <LL_GPIO_SetOutputPin>
			flag=1;
 8002444:	4b56      	ldr	r3, [pc, #344]	; (80025a0 <check_err+0x588>)
 8002446:	2201      	movs	r2, #1
 8002448:	701a      	strb	r2, [r3, #0]
			//err_cnt++;
		}

		if(vac_err_cnt>100){
 800244a:	4b5a      	ldr	r3, [pc, #360]	; (80025b4 <check_err+0x59c>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	2b64      	cmp	r3, #100	; 0x64
 8002450:	d913      	bls.n	800247a <check_err+0x462>
			flag=1;
 8002452:	4b53      	ldr	r3, [pc, #332]	; (80025a0 <check_err+0x588>)
 8002454:	2201      	movs	r2, #1
 8002456:	701a      	strb	r2, [r3, #0]
			err_cnt++;
 8002458:	4b57      	ldr	r3, [pc, #348]	; (80025b8 <check_err+0x5a0>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	1c5a      	adds	r2, r3, #1
 800245e:	4b56      	ldr	r3, [pc, #344]	; (80025b8 <check_err+0x5a0>)
 8002460:	601a      	str	r2, [r3, #0]
			//freq_err_flag=1;
			if(vac_err_high_flag){
 8002462:	4b56      	ldr	r3, [pc, #344]	; (80025bc <check_err+0x5a4>)
 8002464:	781b      	ldrb	r3, [r3, #0]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d014      	beq.n	8002494 <check_err+0x47c>
				vac_on;
 800246a:	2380      	movs	r3, #128	; 0x80
 800246c:	005b      	lsls	r3, r3, #1
 800246e:	4a44      	ldr	r2, [pc, #272]	; (8002580 <check_err+0x568>)
 8002470:	0019      	movs	r1, r3
 8002472:	0010      	movs	r0, r2
 8002474:	f7ff faf0 	bl	8001a58 <LL_GPIO_SetOutputPin>
 8002478:	e00c      	b.n	8002494 <check_err+0x47c>
			}
		}else{
			vac_err_high_flag=0;
 800247a:	4b50      	ldr	r3, [pc, #320]	; (80025bc <check_err+0x5a4>)
 800247c:	2200      	movs	r2, #0
 800247e:	701a      	strb	r2, [r3, #0]
			vac_err_low_flag=0;
 8002480:	4b4f      	ldr	r3, [pc, #316]	; (80025c0 <check_err+0x5a8>)
 8002482:	2200      	movs	r2, #0
 8002484:	701a      	strb	r2, [r3, #0]
			vac_off;
 8002486:	2380      	movs	r3, #128	; 0x80
 8002488:	005b      	lsls	r3, r3, #1
 800248a:	4a3d      	ldr	r2, [pc, #244]	; (8002580 <check_err+0x568>)
 800248c:	0019      	movs	r1, r3
 800248e:	0010      	movs	r0, r2
 8002490:	f7ff faee 	bl	8001a70 <LL_GPIO_ResetOutputPin>
		}

		if(fr_err_cnt>3000){
 8002494:	4b4b      	ldr	r3, [pc, #300]	; (80025c4 <check_err+0x5ac>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a4b      	ldr	r2, [pc, #300]	; (80025c8 <check_err+0x5b0>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d90f      	bls.n	80024be <check_err+0x4a6>
			flag=1;
 800249e:	4b40      	ldr	r3, [pc, #256]	; (80025a0 <check_err+0x588>)
 80024a0:	2201      	movs	r2, #1
 80024a2:	701a      	strb	r2, [r3, #0]
			err_cnt++;
 80024a4:	4b44      	ldr	r3, [pc, #272]	; (80025b8 <check_err+0x5a0>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	1c5a      	adds	r2, r3, #1
 80024aa:	4b43      	ldr	r3, [pc, #268]	; (80025b8 <check_err+0x5a0>)
 80024ac:	601a      	str	r2, [r3, #0]
			fr_on;
 80024ae:	4b34      	ldr	r3, [pc, #208]	; (8002580 <check_err+0x568>)
 80024b0:	2180      	movs	r1, #128	; 0x80
 80024b2:	0018      	movs	r0, r3
 80024b4:	f7ff fad0 	bl	8001a58 <LL_GPIO_SetOutputPin>
			freq_err_flag=1;
 80024b8:	4b44      	ldr	r3, [pc, #272]	; (80025cc <check_err+0x5b4>)
 80024ba:	2201      	movs	r2, #1
 80024bc:	701a      	strb	r2, [r3, #0]
		}

		if(!flag){
 80024be:	4b38      	ldr	r3, [pc, #224]	; (80025a0 <check_err+0x588>)
 80024c0:	781b      	ldrb	r3, [r3, #0]
 80024c2:	2201      	movs	r2, #1
 80024c4:	4053      	eors	r3, r2
 80024c6:	b2db      	uxtb	r3, r3
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d003      	beq.n	80024d4 <check_err+0x4bc>
			err_cnt=0;
 80024cc:	4b3a      	ldr	r3, [pc, #232]	; (80025b8 <check_err+0x5a0>)
 80024ce:	2200      	movs	r2, #0
 80024d0:	601a      	str	r2, [r3, #0]
 80024d2:	e00b      	b.n	80024ec <check_err+0x4d4>
		}else{
			err_cnt++;
 80024d4:	4b38      	ldr	r3, [pc, #224]	; (80025b8 <check_err+0x5a0>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	1c5a      	adds	r2, r3, #1
 80024da:	4b37      	ldr	r3, [pc, #220]	; (80025b8 <check_err+0x5a0>)
 80024dc:	601a      	str	r2, [r3, #0]
			if(err_cnt<200){
 80024de:	4b36      	ldr	r3, [pc, #216]	; (80025b8 <check_err+0x5a0>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	2bc7      	cmp	r3, #199	; 0xc7
 80024e4:	d802      	bhi.n	80024ec <check_err+0x4d4>
				flag=0;
 80024e6:	4b2e      	ldr	r3, [pc, #184]	; (80025a0 <check_err+0x588>)
 80024e8:	2200      	movs	r2, #0
 80024ea:	701a      	strb	r2, [r3, #0]
			}
		}
		if(mscnt>1000){
 80024ec:	4b38      	ldr	r3, [pc, #224]	; (80025d0 <check_err+0x5b8>)
 80024ee:	681a      	ldr	r2, [r3, #0]
 80024f0:	23fa      	movs	r3, #250	; 0xfa
 80024f2:	009b      	lsls	r3, r3, #2
 80024f4:	429a      	cmp	r2, r3
 80024f6:	d902      	bls.n	80024fe <check_err+0x4e6>
			first_check=1;
 80024f8:	4b36      	ldr	r3, [pc, #216]	; (80025d4 <check_err+0x5bc>)
 80024fa:	2201      	movs	r2, #1
 80024fc:	701a      	strb	r2, [r3, #0]
		}
		if(!flag){
 80024fe:	4b28      	ldr	r3, [pc, #160]	; (80025a0 <check_err+0x588>)
 8002500:	781b      	ldrb	r3, [r3, #0]
 8002502:	2201      	movs	r2, #1
 8002504:	4053      	eors	r3, r2
 8002506:	b2db      	uxtb	r3, r3
 8002508:	2b00      	cmp	r3, #0
 800250a:	d033      	beq.n	8002574 <check_err+0x55c>
			oil_off;
 800250c:	4b1c      	ldr	r3, [pc, #112]	; (8002580 <check_err+0x568>)
 800250e:	2104      	movs	r1, #4
 8002510:	0018      	movs	r0, r3
 8002512:	f7ff faad 	bl	8001a70 <LL_GPIO_ResetOutputPin>
			water_off;
 8002516:	2380      	movs	r3, #128	; 0x80
 8002518:	00db      	lsls	r3, r3, #3
 800251a:	4a19      	ldr	r2, [pc, #100]	; (8002580 <check_err+0x568>)
 800251c:	0019      	movs	r1, r3
 800251e:	0010      	movs	r0, r2
 8002520:	f7ff faa6 	bl	8001a70 <LL_GPIO_ResetOutputPin>
			emr_off;
 8002524:	2380      	movs	r3, #128	; 0x80
 8002526:	015b      	lsls	r3, r3, #5
 8002528:	4a15      	ldr	r2, [pc, #84]	; (8002580 <check_err+0x568>)
 800252a:	0019      	movs	r1, r3
 800252c:	0010      	movs	r0, r2
 800252e:	f7ff fa9f 	bl	8001a70 <LL_GPIO_ResetOutputPin>
			ol_off;
 8002532:	2380      	movs	r3, #128	; 0x80
 8002534:	021b      	lsls	r3, r3, #8
 8002536:	4a1e      	ldr	r2, [pc, #120]	; (80025b0 <check_err+0x598>)
 8002538:	0019      	movs	r1, r3
 800253a:	0010      	movs	r0, r2
 800253c:	f7ff fa98 	bl	8001a70 <LL_GPIO_ResetOutputPin>
			feul_off;
 8002540:	2380      	movs	r3, #128	; 0x80
 8002542:	019b      	lsls	r3, r3, #6
 8002544:	4a0e      	ldr	r2, [pc, #56]	; (8002580 <check_err+0x568>)
 8002546:	0019      	movs	r1, r3
 8002548:	0010      	movs	r0, r2
 800254a:	f7ff fa91 	bl	8001a70 <LL_GPIO_ResetOutputPin>
			bat_off;
 800254e:	2380      	movs	r3, #128	; 0x80
 8002550:	011b      	lsls	r3, r3, #4
 8002552:	4a0b      	ldr	r2, [pc, #44]	; (8002580 <check_err+0x568>)
 8002554:	0019      	movs	r1, r3
 8002556:	0010      	movs	r0, r2
 8002558:	f7ff fa8a 	bl	8001a70 <LL_GPIO_ResetOutputPin>
			fr_off;
 800255c:	4b08      	ldr	r3, [pc, #32]	; (8002580 <check_err+0x568>)
 800255e:	2180      	movs	r1, #128	; 0x80
 8002560:	0018      	movs	r0, r3
 8002562:	f7ff fa85 	bl	8001a70 <LL_GPIO_ResetOutputPin>
			vac_off;
 8002566:	2380      	movs	r3, #128	; 0x80
 8002568:	005b      	lsls	r3, r3, #1
 800256a:	4a05      	ldr	r2, [pc, #20]	; (8002580 <check_err+0x568>)
 800256c:	0019      	movs	r1, r3
 800256e:	0010      	movs	r0, r2
 8002570:	f7ff fa7e 	bl	8001a70 <LL_GPIO_ResetOutputPin>
		}
	}
	return flag;
 8002574:	4b0a      	ldr	r3, [pc, #40]	; (80025a0 <check_err+0x588>)
 8002576:	781b      	ldrb	r3, [r3, #0]
}
 8002578:	0018      	movs	r0, r3
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}
 800257e:	46c0      	nop			; (mov r8, r8)
 8002580:	48000400 	.word	0x48000400
 8002584:	20000043 	.word	0x20000043
 8002588:	2000007c 	.word	0x2000007c
 800258c:	e147ae14 	.word	0xe147ae14
 8002590:	4002147a 	.word	0x4002147a
 8002594:	2000005c 	.word	0x2000005c
 8002598:	20000070 	.word	0x20000070
 800259c:	2000003e 	.word	0x2000003e
 80025a0:	2000006c 	.word	0x2000006c
 80025a4:	2000003b 	.word	0x2000003b
 80025a8:	2000003c 	.word	0x2000003c
 80025ac:	20000042 	.word	0x20000042
 80025b0:	48000800 	.word	0x48000800
 80025b4:	20000068 	.word	0x20000068
 80025b8:	20000050 	.word	0x20000050
 80025bc:	20000040 	.word	0x20000040
 80025c0:	20000041 	.word	0x20000041
 80025c4:	20000060 	.word	0x20000060
 80025c8:	00000bb8 	.word	0x00000bb8
 80025cc:	2000003f 	.word	0x2000003f
 80025d0:	2000002c 	.word	0x2000002c
 80025d4:	2000006d 	.word	0x2000006d

080025d8 <adc_init>:
void adc_init() {
 80025d8:	b580      	push	{r7, lr}
 80025da:	af00      	add	r7, sp, #0
	LL_TIM_EnableCounter(TIM3);
 80025dc:	4b1f      	ldr	r3, [pc, #124]	; (800265c <adc_init+0x84>)
 80025de:	0018      	movs	r0, r3
 80025e0:	f7ff fa14 	bl	8001a0c <LL_TIM_EnableCounter>
	LL_TIM_EnableIT_UPDATE(TIM3);
 80025e4:	4b1d      	ldr	r3, [pc, #116]	; (800265c <adc_init+0x84>)
 80025e6:	0018      	movs	r0, r3
 80025e8:	f7ff fa1e 	bl	8001a28 <LL_TIM_EnableIT_UPDATE>
	LL_ADC_StartCalibration(ADC1);
 80025ec:	4b1c      	ldr	r3, [pc, #112]	; (8002660 <adc_init+0x88>)
 80025ee:	0018      	movs	r0, r3
 80025f0:	f7fe ffe0 	bl	80015b4 <LL_ADC_StartCalibration>
	while (LL_ADC_IsCalibrationOnGoing(ADC1));
 80025f4:	46c0      	nop			; (mov r8, r8)
 80025f6:	4b1a      	ldr	r3, [pc, #104]	; (8002660 <adc_init+0x88>)
 80025f8:	0018      	movs	r0, r3
 80025fa:	f7fe ffef 	bl	80015dc <LL_ADC_IsCalibrationOnGoing>
 80025fe:	1e03      	subs	r3, r0, #0
 8002600:	d1f9      	bne.n	80025f6 <adc_init+0x1e>

	LL_ADC_Enable(ADC1);
 8002602:	4b17      	ldr	r3, [pc, #92]	; (8002660 <adc_init+0x88>)
 8002604:	0018      	movs	r0, r3
 8002606:	f7fe ffc3 	bl	8001590 <LL_ADC_Enable>
	LL_ADC_REG_StartConversion(ADC1);
 800260a:	4b15      	ldr	r3, [pc, #84]	; (8002660 <adc_init+0x88>)
 800260c:	0018      	movs	r0, r3
 800260e:	f7fe fff9 	bl	8001604 <LL_ADC_REG_StartConversion>
	LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_1, 3);
 8002612:	4b14      	ldr	r3, [pc, #80]	; (8002664 <adc_init+0x8c>)
 8002614:	2203      	movs	r2, #3
 8002616:	2101      	movs	r1, #1
 8002618:	0018      	movs	r0, r3
 800261a:	f7ff f823 	bl	8001664 <LL_DMA_SetDataLength>
	LL_DMA_SetPeriphAddress(DMA1, LL_DMA_CHANNEL_1,
 800261e:	4b10      	ldr	r3, [pc, #64]	; (8002660 <adc_init+0x88>)
 8002620:	2100      	movs	r1, #0
 8002622:	0018      	movs	r0, r3
 8002624:	f7fe ffa8 	bl	8001578 <LL_ADC_DMA_GetRegAddr>
 8002628:	0003      	movs	r3, r0
 800262a:	480e      	ldr	r0, [pc, #56]	; (8002664 <adc_init+0x8c>)
 800262c:	001a      	movs	r2, r3
 800262e:	2101      	movs	r1, #1
 8002630:	f7ff f84e 	bl	80016d0 <LL_DMA_SetPeriphAddress>
			LL_ADC_DMA_GetRegAddr(ADC1, LL_ADC_DMA_REG_REGULAR_DATA));
	LL_DMA_SetMemoryAddress(DMA1, LL_DMA_CHANNEL_1,(uint32_t)adc_val);
 8002634:	4b0c      	ldr	r3, [pc, #48]	; (8002668 <adc_init+0x90>)
 8002636:	480b      	ldr	r0, [pc, #44]	; (8002664 <adc_init+0x8c>)
 8002638:	001a      	movs	r2, r3
 800263a:	2101      	movs	r1, #1
 800263c:	f7ff f832 	bl	80016a4 <LL_DMA_SetMemoryAddress>
	LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_1);
 8002640:	4b08      	ldr	r3, [pc, #32]	; (8002664 <adc_init+0x8c>)
 8002642:	2101      	movs	r1, #1
 8002644:	0018      	movs	r0, r3
 8002646:	f7fe ffef 	bl	8001628 <LL_DMA_EnableChannel>
	LL_DMA_EnableIT_TC(DMA1, LL_DMA_CHANNEL_1);
 800264a:	4b06      	ldr	r3, [pc, #24]	; (8002664 <adc_init+0x8c>)
 800264c:	2101      	movs	r1, #1
 800264e:	0018      	movs	r0, r3
 8002650:	f7ff f854 	bl	80016fc <LL_DMA_EnableIT_TC>
}
 8002654:	46c0      	nop			; (mov r8, r8)
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}
 800265a:	46c0      	nop			; (mov r8, r8)
 800265c:	40000400 	.word	0x40000400
 8002660:	40012400 	.word	0x40012400
 8002664:	40020000 	.word	0x40020000
 8002668:	20000020 	.word	0x20000020

0800266c <leds_test>:

void leds_test() {
 800266c:	b580      	push	{r7, lr}
 800266e:	b082      	sub	sp, #8
 8002670:	af00      	add	r7, sp, #0
	for (int i = 0; i < 5; i++) {
 8002672:	2300      	movs	r3, #0
 8002674:	607b      	str	r3, [r7, #4]
 8002676:	e0a4      	b.n	80027c2 <leds_test+0x156>
		vac_off;
 8002678:	2380      	movs	r3, #128	; 0x80
 800267a:	005b      	lsls	r3, r3, #1
 800267c:	4a58      	ldr	r2, [pc, #352]	; (80027e0 <leds_test+0x174>)
 800267e:	0019      	movs	r1, r3
 8002680:	0010      	movs	r0, r2
 8002682:	f7ff f9f5 	bl	8001a70 <LL_GPIO_ResetOutputPin>
		oil_on;
 8002686:	4b56      	ldr	r3, [pc, #344]	; (80027e0 <leds_test+0x174>)
 8002688:	2104      	movs	r1, #4
 800268a:	0018      	movs	r0, r3
 800268c:	f7ff f9e4 	bl	8001a58 <LL_GPIO_SetOutputPin>
		ms_delay(250);
 8002690:	20fa      	movs	r0, #250	; 0xfa
 8002692:	f001 f9e5 	bl	8003a60 <LL_mDelay>
		oil_off;
 8002696:	4b52      	ldr	r3, [pc, #328]	; (80027e0 <leds_test+0x174>)
 8002698:	2104      	movs	r1, #4
 800269a:	0018      	movs	r0, r3
 800269c:	f7ff f9e8 	bl	8001a70 <LL_GPIO_ResetOutputPin>
		water_on;
 80026a0:	2380      	movs	r3, #128	; 0x80
 80026a2:	00db      	lsls	r3, r3, #3
 80026a4:	4a4e      	ldr	r2, [pc, #312]	; (80027e0 <leds_test+0x174>)
 80026a6:	0019      	movs	r1, r3
 80026a8:	0010      	movs	r0, r2
 80026aa:	f7ff f9d5 	bl	8001a58 <LL_GPIO_SetOutputPin>
		ms_delay(250);
 80026ae:	20fa      	movs	r0, #250	; 0xfa
 80026b0:	f001 f9d6 	bl	8003a60 <LL_mDelay>
		feul_on;
 80026b4:	2380      	movs	r3, #128	; 0x80
 80026b6:	019b      	lsls	r3, r3, #6
 80026b8:	4a49      	ldr	r2, [pc, #292]	; (80027e0 <leds_test+0x174>)
 80026ba:	0019      	movs	r1, r3
 80026bc:	0010      	movs	r0, r2
 80026be:	f7ff f9cb 	bl	8001a58 <LL_GPIO_SetOutputPin>
		water_off;
 80026c2:	2380      	movs	r3, #128	; 0x80
 80026c4:	00db      	lsls	r3, r3, #3
 80026c6:	4a46      	ldr	r2, [pc, #280]	; (80027e0 <leds_test+0x174>)
 80026c8:	0019      	movs	r1, r3
 80026ca:	0010      	movs	r0, r2
 80026cc:	f7ff f9d0 	bl	8001a70 <LL_GPIO_ResetOutputPin>
		ms_delay(250);
 80026d0:	20fa      	movs	r0, #250	; 0xfa
 80026d2:	f001 f9c5 	bl	8003a60 <LL_mDelay>
		feul_off;
 80026d6:	2380      	movs	r3, #128	; 0x80
 80026d8:	019b      	lsls	r3, r3, #6
 80026da:	4a41      	ldr	r2, [pc, #260]	; (80027e0 <leds_test+0x174>)
 80026dc:	0019      	movs	r1, r3
 80026de:	0010      	movs	r0, r2
 80026e0:	f7ff f9c6 	bl	8001a70 <LL_GPIO_ResetOutputPin>
		emr_on;
 80026e4:	2380      	movs	r3, #128	; 0x80
 80026e6:	015b      	lsls	r3, r3, #5
 80026e8:	4a3d      	ldr	r2, [pc, #244]	; (80027e0 <leds_test+0x174>)
 80026ea:	0019      	movs	r1, r3
 80026ec:	0010      	movs	r0, r2
 80026ee:	f7ff f9b3 	bl	8001a58 <LL_GPIO_SetOutputPin>
		ms_delay(250);
 80026f2:	20fa      	movs	r0, #250	; 0xfa
 80026f4:	f001 f9b4 	bl	8003a60 <LL_mDelay>
		bat_on;
 80026f8:	2380      	movs	r3, #128	; 0x80
 80026fa:	011b      	lsls	r3, r3, #4
 80026fc:	4a38      	ldr	r2, [pc, #224]	; (80027e0 <leds_test+0x174>)
 80026fe:	0019      	movs	r1, r3
 8002700:	0010      	movs	r0, r2
 8002702:	f7ff f9a9 	bl	8001a58 <LL_GPIO_SetOutputPin>
		emr_off;
 8002706:	2380      	movs	r3, #128	; 0x80
 8002708:	015b      	lsls	r3, r3, #5
 800270a:	4a35      	ldr	r2, [pc, #212]	; (80027e0 <leds_test+0x174>)
 800270c:	0019      	movs	r1, r3
 800270e:	0010      	movs	r0, r2
 8002710:	f7ff f9ae 	bl	8001a70 <LL_GPIO_ResetOutputPin>
		ms_delay(250);
 8002714:	20fa      	movs	r0, #250	; 0xfa
 8002716:	f001 f9a3 	bl	8003a60 <LL_mDelay>
		bat_off;
 800271a:	2380      	movs	r3, #128	; 0x80
 800271c:	011b      	lsls	r3, r3, #4
 800271e:	4a30      	ldr	r2, [pc, #192]	; (80027e0 <leds_test+0x174>)
 8002720:	0019      	movs	r1, r3
 8002722:	0010      	movs	r0, r2
 8002724:	f7ff f9a4 	bl	8001a70 <LL_GPIO_ResetOutputPin>
		ol_on;
 8002728:	2380      	movs	r3, #128	; 0x80
 800272a:	021b      	lsls	r3, r3, #8
 800272c:	4a2d      	ldr	r2, [pc, #180]	; (80027e4 <leds_test+0x178>)
 800272e:	0019      	movs	r1, r3
 8002730:	0010      	movs	r0, r2
 8002732:	f7ff f991 	bl	8001a58 <LL_GPIO_SetOutputPin>
		ms_delay(250);
 8002736:	20fa      	movs	r0, #250	; 0xfa
 8002738:	f001 f992 	bl	8003a60 <LL_mDelay>
		ol_off;
 800273c:	2380      	movs	r3, #128	; 0x80
 800273e:	021b      	lsls	r3, r3, #8
 8002740:	4a28      	ldr	r2, [pc, #160]	; (80027e4 <leds_test+0x178>)
 8002742:	0019      	movs	r1, r3
 8002744:	0010      	movs	r0, r2
 8002746:	f7ff f993 	bl	8001a70 <LL_GPIO_ResetOutputPin>
		pwr_on;
 800274a:	2380      	movs	r3, #128	; 0x80
 800274c:	01db      	lsls	r3, r3, #7
 800274e:	4a25      	ldr	r2, [pc, #148]	; (80027e4 <leds_test+0x178>)
 8002750:	0019      	movs	r1, r3
 8002752:	0010      	movs	r0, r2
 8002754:	f7ff f980 	bl	8001a58 <LL_GPIO_SetOutputPin>
		ms_delay(250);
 8002758:	20fa      	movs	r0, #250	; 0xfa
 800275a:	f001 f981 	bl	8003a60 <LL_mDelay>
		pwr_off;
 800275e:	2380      	movs	r3, #128	; 0x80
 8002760:	01db      	lsls	r3, r3, #7
 8002762:	4a20      	ldr	r2, [pc, #128]	; (80027e4 <leds_test+0x178>)
 8002764:	0019      	movs	r1, r3
 8002766:	0010      	movs	r0, r2
 8002768:	f7ff f982 	bl	8001a70 <LL_GPIO_ResetOutputPin>
		er_on;
 800276c:	2380      	movs	r3, #128	; 0x80
 800276e:	019b      	lsls	r3, r3, #6
 8002770:	4a1c      	ldr	r2, [pc, #112]	; (80027e4 <leds_test+0x178>)
 8002772:	0019      	movs	r1, r3
 8002774:	0010      	movs	r0, r2
 8002776:	f7ff f96f 	bl	8001a58 <LL_GPIO_SetOutputPin>
		ms_delay(250);
 800277a:	20fa      	movs	r0, #250	; 0xfa
 800277c:	f001 f970 	bl	8003a60 <LL_mDelay>
		fr_on;
 8002780:	4b17      	ldr	r3, [pc, #92]	; (80027e0 <leds_test+0x174>)
 8002782:	2180      	movs	r1, #128	; 0x80
 8002784:	0018      	movs	r0, r3
 8002786:	f7ff f967 	bl	8001a58 <LL_GPIO_SetOutputPin>
		er_off;
 800278a:	2380      	movs	r3, #128	; 0x80
 800278c:	019b      	lsls	r3, r3, #6
 800278e:	4a15      	ldr	r2, [pc, #84]	; (80027e4 <leds_test+0x178>)
 8002790:	0019      	movs	r1, r3
 8002792:	0010      	movs	r0, r2
 8002794:	f7ff f96c 	bl	8001a70 <LL_GPIO_ResetOutputPin>
		ms_delay(250);
 8002798:	20fa      	movs	r0, #250	; 0xfa
 800279a:	f001 f961 	bl	8003a60 <LL_mDelay>
		vac_on;
 800279e:	2380      	movs	r3, #128	; 0x80
 80027a0:	005b      	lsls	r3, r3, #1
 80027a2:	4a0f      	ldr	r2, [pc, #60]	; (80027e0 <leds_test+0x174>)
 80027a4:	0019      	movs	r1, r3
 80027a6:	0010      	movs	r0, r2
 80027a8:	f7ff f956 	bl	8001a58 <LL_GPIO_SetOutputPin>
		fr_off;
 80027ac:	4b0c      	ldr	r3, [pc, #48]	; (80027e0 <leds_test+0x174>)
 80027ae:	2180      	movs	r1, #128	; 0x80
 80027b0:	0018      	movs	r0, r3
 80027b2:	f7ff f95d 	bl	8001a70 <LL_GPIO_ResetOutputPin>
		ms_delay(250);
 80027b6:	20fa      	movs	r0, #250	; 0xfa
 80027b8:	f001 f952 	bl	8003a60 <LL_mDelay>
	for (int i = 0; i < 5; i++) {
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	3301      	adds	r3, #1
 80027c0:	607b      	str	r3, [r7, #4]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2b04      	cmp	r3, #4
 80027c6:	dc00      	bgt.n	80027ca <leds_test+0x15e>
 80027c8:	e756      	b.n	8002678 <leds_test+0xc>
	}
	vac_off;
 80027ca:	2380      	movs	r3, #128	; 0x80
 80027cc:	005b      	lsls	r3, r3, #1
 80027ce:	4a04      	ldr	r2, [pc, #16]	; (80027e0 <leds_test+0x174>)
 80027d0:	0019      	movs	r1, r3
 80027d2:	0010      	movs	r0, r2
 80027d4:	f7ff f94c 	bl	8001a70 <LL_GPIO_ResetOutputPin>
}
 80027d8:	46c0      	nop			; (mov r8, r8)
 80027da:	46bd      	mov	sp, r7
 80027dc:	b002      	add	sp, #8
 80027de:	bd80      	pop	{r7, pc}
 80027e0:	48000400 	.word	0x48000400
 80027e4:	48000800 	.word	0x48000800

080027e8 <LL_DMA_IsActiveFlag_TC1>:
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b082      	sub	sp, #8
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF1) == (DMA_ISR_TCIF1));
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	2202      	movs	r2, #2
 80027f6:	4013      	ands	r3, r2
 80027f8:	3b02      	subs	r3, #2
 80027fa:	425a      	negs	r2, r3
 80027fc:	4153      	adcs	r3, r2
 80027fe:	b2db      	uxtb	r3, r3
}
 8002800:	0018      	movs	r0, r3
 8002802:	46bd      	mov	sp, r7
 8002804:	b002      	add	sp, #8
 8002806:	bd80      	pop	{r7, pc}

08002808 <LL_DMA_ClearFlag_TC1>:
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b082      	sub	sp, #8
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF1);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2202      	movs	r2, #2
 8002814:	605a      	str	r2, [r3, #4]
}
 8002816:	46c0      	nop			; (mov r8, r8)
 8002818:	46bd      	mov	sp, r7
 800281a:	b002      	add	sp, #8
 800281c:	bd80      	pop	{r7, pc}

0800281e <LL_TIM_ClearFlag_UPDATE>:
{
 800281e:	b580      	push	{r7, lr}
 8002820:	b082      	sub	sp, #8
 8002822:	af00      	add	r7, sp, #0
 8002824:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2202      	movs	r2, #2
 800282a:	4252      	negs	r2, r2
 800282c:	611a      	str	r2, [r3, #16]
}
 800282e:	46c0      	nop			; (mov r8, r8)
 8002830:	46bd      	mov	sp, r7
 8002832:	b002      	add	sp, #8
 8002834:	bd80      	pop	{r7, pc}

08002836 <LL_TIM_IsActiveFlag_UPDATE>:
{
 8002836:	b580      	push	{r7, lr}
 8002838:	b082      	sub	sp, #8
 800283a:	af00      	add	r7, sp, #0
 800283c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	691b      	ldr	r3, [r3, #16]
 8002842:	2201      	movs	r2, #1
 8002844:	4013      	ands	r3, r2
 8002846:	2b01      	cmp	r3, #1
 8002848:	d101      	bne.n	800284e <LL_TIM_IsActiveFlag_UPDATE+0x18>
 800284a:	2301      	movs	r3, #1
 800284c:	e000      	b.n	8002850 <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 800284e:	2300      	movs	r3, #0
}
 8002850:	0018      	movs	r0, r3
 8002852:	46bd      	mov	sp, r7
 8002854:	b002      	add	sp, #8
 8002856:	bd80      	pop	{r7, pc}

08002858 <NMI_Handler>:
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN NonMaskableInt_IRQn 0 */

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 800285c:	e7fe      	b.n	800285c <NMI_Handler+0x4>

0800285e <HardFault_Handler>:

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void)
{
 800285e:	b580      	push	{r7, lr}
 8002860:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN HardFault_IRQn 0 */

	/* USER CODE END HardFault_IRQn 0 */
	while (1)
 8002862:	e7fe      	b.n	8002862 <HardFault_Handler+0x4>

08002864 <SVC_Handler>:

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	af00      	add	r7, sp, #0

	/* USER CODE END SVC_IRQn 0 */
	/* USER CODE BEGIN SVC_IRQn 1 */

	/* USER CODE END SVC_IRQn 1 */
}
 8002868:	46c0      	nop			; (mov r8, r8)
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}

0800286e <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void)
{
 800286e:	b580      	push	{r7, lr}
 8002870:	af00      	add	r7, sp, #0

	/* USER CODE END PendSV_IRQn 0 */
	/* USER CODE BEGIN PendSV_IRQn 1 */

	/* USER CODE END PendSV_IRQn 1 */
}
 8002872:	46c0      	nop			; (mov r8, r8)
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}

08002878 <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	af00      	add	r7, sp, #0
	/* USER CODE END SysTick_IRQn 0 */

	/* USER CODE BEGIN SysTick_IRQn 1 */

	/* USER CODE END SysTick_IRQn 1 */
}
 800287c:	46c0      	nop			; (mov r8, r8)
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}
	...

08002884 <DMA1_Channel1_IRQHandler>:

/**
 * @brief This function handles DMA1 channel 1 interrupt.
 */
void DMA1_Channel1_IRQHandler(void)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

	if(LL_DMA_IsActiveFlag_TC1(DMA1) == 1)
 8002888:	4b11      	ldr	r3, [pc, #68]	; (80028d0 <DMA1_Channel1_IRQHandler+0x4c>)
 800288a:	0018      	movs	r0, r3
 800288c:	f7ff ffac 	bl	80027e8 <LL_DMA_IsActiveFlag_TC1>
 8002890:	0003      	movs	r3, r0
 8002892:	2b01      	cmp	r3, #1
 8002894:	d119      	bne.n	80028ca <DMA1_Channel1_IRQHandler+0x46>
	{
		if(!adc)
 8002896:	4b0f      	ldr	r3, [pc, #60]	; (80028d4 <DMA1_Channel1_IRQHandler+0x50>)
 8002898:	781b      	ldrb	r3, [r3, #0]
 800289a:	2201      	movs	r2, #1
 800289c:	4053      	eors	r3, r2
 800289e:	b2db      	uxtb	r3, r3
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d00e      	beq.n	80028c2 <DMA1_Channel1_IRQHandler+0x3e>
		{
			adc=1;
 80028a4:	4b0b      	ldr	r3, [pc, #44]	; (80028d4 <DMA1_Channel1_IRQHandler+0x50>)
 80028a6:	2201      	movs	r2, #1
 80028a8:	701a      	strb	r2, [r3, #0]
			vac_sample_int=adc_val[2];
 80028aa:	4b0b      	ldr	r3, [pc, #44]	; (80028d8 <DMA1_Channel1_IRQHandler+0x54>)
 80028ac:	889a      	ldrh	r2, [r3, #4]
 80028ae:	4b0b      	ldr	r3, [pc, #44]	; (80028dc <DMA1_Channel1_IRQHandler+0x58>)
 80028b0:	801a      	strh	r2, [r3, #0]
			vadc_int=adc_val[1];
 80028b2:	4b09      	ldr	r3, [pc, #36]	; (80028d8 <DMA1_Channel1_IRQHandler+0x54>)
 80028b4:	885a      	ldrh	r2, [r3, #2]
 80028b6:	4b0a      	ldr	r3, [pc, #40]	; (80028e0 <DMA1_Channel1_IRQHandler+0x5c>)
 80028b8:	801a      	strh	r2, [r3, #0]
			vbat_int=adc_val[0];
 80028ba:	4b07      	ldr	r3, [pc, #28]	; (80028d8 <DMA1_Channel1_IRQHandler+0x54>)
 80028bc:	881a      	ldrh	r2, [r3, #0]
 80028be:	4b09      	ldr	r3, [pc, #36]	; (80028e4 <DMA1_Channel1_IRQHandler+0x60>)
 80028c0:	801a      	strh	r2, [r3, #0]
		}
		/* Clear flag DMA transfer complete */
		LL_DMA_ClearFlag_TC1(DMA1);
 80028c2:	4b03      	ldr	r3, [pc, #12]	; (80028d0 <DMA1_Channel1_IRQHandler+0x4c>)
 80028c4:	0018      	movs	r0, r3
 80028c6:	f7ff ff9f 	bl	8002808 <LL_DMA_ClearFlag_TC1>
	/* USER CODE END DMA1_Channel1_IRQn 0 */

	/* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

	/* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80028ca:	46c0      	nop			; (mov r8, r8)
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}
 80028d0:	40020000 	.word	0x40020000
 80028d4:	2000006f 	.word	0x2000006f
 80028d8:	20000020 	.word	0x20000020
 80028dc:	200003a8 	.word	0x200003a8
 80028e0:	200003aa 	.word	0x200003aa
 80028e4:	200003ac 	.word	0x200003ac

080028e8 <TIM3_IRQHandler>:

/**
 * @brief This function handles TIM3 global interrupt.
 */
void TIM3_IRQHandler(void)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM3_IRQn 0 */
	if(LL_TIM_IsActiveFlag_UPDATE(TIM3) == 1)
 80028ec:	4b17      	ldr	r3, [pc, #92]	; (800294c <TIM3_IRQHandler+0x64>)
 80028ee:	0018      	movs	r0, r3
 80028f0:	f7ff ffa1 	bl	8002836 <LL_TIM_IsActiveFlag_UPDATE>
 80028f4:	0003      	movs	r3, r0
 80028f6:	2b01      	cmp	r3, #1
 80028f8:	d125      	bne.n	8002946 <TIM3_IRQHandler+0x5e>
	{
		/* Clear the update interrupt flag*/
		LL_TIM_ClearFlag_UPDATE(TIM3);
 80028fa:	4b14      	ldr	r3, [pc, #80]	; (800294c <TIM3_IRQHandler+0x64>)
 80028fc:	0018      	movs	r0, r3
 80028fe:	f7ff ff8e 	bl	800281e <LL_TIM_ClearFlag_UPDATE>
		thick++;
 8002902:	4b13      	ldr	r3, [pc, #76]	; (8002950 <TIM3_IRQHandler+0x68>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	1c5a      	adds	r2, r3, #1
 8002908:	4b11      	ldr	r3, [pc, #68]	; (8002950 <TIM3_IRQHandler+0x68>)
 800290a:	601a      	str	r2, [r3, #0]
		if(thick%2000==0){
 800290c:	4b10      	ldr	r3, [pc, #64]	; (8002950 <TIM3_IRQHandler+0x68>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	22fa      	movs	r2, #250	; 0xfa
 8002912:	00d1      	lsls	r1, r2, #3
 8002914:	0018      	movs	r0, r3
 8002916:	f7fd fc7d 	bl	8000214 <__aeabi_uidivmod>
 800291a:	1e0b      	subs	r3, r1, #0
 800291c:	d106      	bne.n	800292c <TIM3_IRQHandler+0x44>
			freq=fr;
 800291e:	4b0d      	ldr	r3, [pc, #52]	; (8002954 <TIM3_IRQHandler+0x6c>)
 8002920:	681a      	ldr	r2, [r3, #0]
 8002922:	4b0d      	ldr	r3, [pc, #52]	; (8002958 <TIM3_IRQHandler+0x70>)
 8002924:	601a      	str	r2, [r3, #0]
			fr=0;
 8002926:	4b0b      	ldr	r3, [pc, #44]	; (8002954 <TIM3_IRQHandler+0x6c>)
 8002928:	2200      	movs	r2, #0
 800292a:	601a      	str	r2, [r3, #0]
		}
		if(working){
 800292c:	4b0b      	ldr	r3, [pc, #44]	; (800295c <TIM3_IRQHandler+0x74>)
 800292e:	781b      	ldrb	r3, [r3, #0]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d005      	beq.n	8002940 <TIM3_IRQHandler+0x58>
			working_time++;
 8002934:	4b0a      	ldr	r3, [pc, #40]	; (8002960 <TIM3_IRQHandler+0x78>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	1c5a      	adds	r2, r3, #1
 800293a:	4b09      	ldr	r3, [pc, #36]	; (8002960 <TIM3_IRQHandler+0x78>)
 800293c:	601a      	str	r2, [r3, #0]
	}
	/* USER CODE END TIM3_IRQn 0 */
	/* USER CODE BEGIN TIM3_IRQn 1 */

	/* USER CODE END TIM3_IRQn 1 */
}
 800293e:	e002      	b.n	8002946 <TIM3_IRQHandler+0x5e>
			working_time=0;
 8002940:	4b07      	ldr	r3, [pc, #28]	; (8002960 <TIM3_IRQHandler+0x78>)
 8002942:	2200      	movs	r2, #0
 8002944:	601a      	str	r2, [r3, #0]
}
 8002946:	46c0      	nop			; (mov r8, r8)
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}
 800294c:	40000400 	.word	0x40000400
 8002950:	20000074 	.word	0x20000074
 8002954:	20000054 	.word	0x20000054
 8002958:	2000005c 	.word	0x2000005c
 800295c:	20000070 	.word	0x20000070
 8002960:	20000078 	.word	0x20000078

08002964 <USART1_IRQHandler>:

/**
 * @brief This function handles USART1 global interrupt.
 */
void USART1_IRQHandler(void)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	af00      	add	r7, sp, #0

	/* USER CODE END USART1_IRQn 0 */
	/* USER CODE BEGIN USART1_IRQn 1 */

	/* USER CODE END USART1_IRQn 1 */
}
 8002968:	46c0      	nop			; (mov r8, r8)
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}

0800296e <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800296e:	b580      	push	{r7, lr}
 8002970:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8002972:	46c0      	nop			; (mov r8, r8)
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}

08002978 <__NVIC_EnableIRQ>:
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b082      	sub	sp, #8
 800297c:	af00      	add	r7, sp, #0
 800297e:	0002      	movs	r2, r0
 8002980:	1dfb      	adds	r3, r7, #7
 8002982:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002984:	1dfb      	adds	r3, r7, #7
 8002986:	781b      	ldrb	r3, [r3, #0]
 8002988:	2b7f      	cmp	r3, #127	; 0x7f
 800298a:	d809      	bhi.n	80029a0 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800298c:	1dfb      	adds	r3, r7, #7
 800298e:	781b      	ldrb	r3, [r3, #0]
 8002990:	001a      	movs	r2, r3
 8002992:	231f      	movs	r3, #31
 8002994:	401a      	ands	r2, r3
 8002996:	4b04      	ldr	r3, [pc, #16]	; (80029a8 <__NVIC_EnableIRQ+0x30>)
 8002998:	2101      	movs	r1, #1
 800299a:	4091      	lsls	r1, r2
 800299c:	000a      	movs	r2, r1
 800299e:	601a      	str	r2, [r3, #0]
}
 80029a0:	46c0      	nop			; (mov r8, r8)
 80029a2:	46bd      	mov	sp, r7
 80029a4:	b002      	add	sp, #8
 80029a6:	bd80      	pop	{r7, pc}
 80029a8:	e000e100 	.word	0xe000e100

080029ac <__NVIC_SetPriority>:
{
 80029ac:	b590      	push	{r4, r7, lr}
 80029ae:	b083      	sub	sp, #12
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	0002      	movs	r2, r0
 80029b4:	6039      	str	r1, [r7, #0]
 80029b6:	1dfb      	adds	r3, r7, #7
 80029b8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80029ba:	1dfb      	adds	r3, r7, #7
 80029bc:	781b      	ldrb	r3, [r3, #0]
 80029be:	2b7f      	cmp	r3, #127	; 0x7f
 80029c0:	d828      	bhi.n	8002a14 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80029c2:	4a2f      	ldr	r2, [pc, #188]	; (8002a80 <__NVIC_SetPriority+0xd4>)
 80029c4:	1dfb      	adds	r3, r7, #7
 80029c6:	781b      	ldrb	r3, [r3, #0]
 80029c8:	b25b      	sxtb	r3, r3
 80029ca:	089b      	lsrs	r3, r3, #2
 80029cc:	33c0      	adds	r3, #192	; 0xc0
 80029ce:	009b      	lsls	r3, r3, #2
 80029d0:	589b      	ldr	r3, [r3, r2]
 80029d2:	1dfa      	adds	r2, r7, #7
 80029d4:	7812      	ldrb	r2, [r2, #0]
 80029d6:	0011      	movs	r1, r2
 80029d8:	2203      	movs	r2, #3
 80029da:	400a      	ands	r2, r1
 80029dc:	00d2      	lsls	r2, r2, #3
 80029de:	21ff      	movs	r1, #255	; 0xff
 80029e0:	4091      	lsls	r1, r2
 80029e2:	000a      	movs	r2, r1
 80029e4:	43d2      	mvns	r2, r2
 80029e6:	401a      	ands	r2, r3
 80029e8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	019b      	lsls	r3, r3, #6
 80029ee:	22ff      	movs	r2, #255	; 0xff
 80029f0:	401a      	ands	r2, r3
 80029f2:	1dfb      	adds	r3, r7, #7
 80029f4:	781b      	ldrb	r3, [r3, #0]
 80029f6:	0018      	movs	r0, r3
 80029f8:	2303      	movs	r3, #3
 80029fa:	4003      	ands	r3, r0
 80029fc:	00db      	lsls	r3, r3, #3
 80029fe:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002a00:	481f      	ldr	r0, [pc, #124]	; (8002a80 <__NVIC_SetPriority+0xd4>)
 8002a02:	1dfb      	adds	r3, r7, #7
 8002a04:	781b      	ldrb	r3, [r3, #0]
 8002a06:	b25b      	sxtb	r3, r3
 8002a08:	089b      	lsrs	r3, r3, #2
 8002a0a:	430a      	orrs	r2, r1
 8002a0c:	33c0      	adds	r3, #192	; 0xc0
 8002a0e:	009b      	lsls	r3, r3, #2
 8002a10:	501a      	str	r2, [r3, r0]
}
 8002a12:	e031      	b.n	8002a78 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002a14:	4a1b      	ldr	r2, [pc, #108]	; (8002a84 <__NVIC_SetPriority+0xd8>)
 8002a16:	1dfb      	adds	r3, r7, #7
 8002a18:	781b      	ldrb	r3, [r3, #0]
 8002a1a:	0019      	movs	r1, r3
 8002a1c:	230f      	movs	r3, #15
 8002a1e:	400b      	ands	r3, r1
 8002a20:	3b08      	subs	r3, #8
 8002a22:	089b      	lsrs	r3, r3, #2
 8002a24:	3306      	adds	r3, #6
 8002a26:	009b      	lsls	r3, r3, #2
 8002a28:	18d3      	adds	r3, r2, r3
 8002a2a:	3304      	adds	r3, #4
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	1dfa      	adds	r2, r7, #7
 8002a30:	7812      	ldrb	r2, [r2, #0]
 8002a32:	0011      	movs	r1, r2
 8002a34:	2203      	movs	r2, #3
 8002a36:	400a      	ands	r2, r1
 8002a38:	00d2      	lsls	r2, r2, #3
 8002a3a:	21ff      	movs	r1, #255	; 0xff
 8002a3c:	4091      	lsls	r1, r2
 8002a3e:	000a      	movs	r2, r1
 8002a40:	43d2      	mvns	r2, r2
 8002a42:	401a      	ands	r2, r3
 8002a44:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	019b      	lsls	r3, r3, #6
 8002a4a:	22ff      	movs	r2, #255	; 0xff
 8002a4c:	401a      	ands	r2, r3
 8002a4e:	1dfb      	adds	r3, r7, #7
 8002a50:	781b      	ldrb	r3, [r3, #0]
 8002a52:	0018      	movs	r0, r3
 8002a54:	2303      	movs	r3, #3
 8002a56:	4003      	ands	r3, r0
 8002a58:	00db      	lsls	r3, r3, #3
 8002a5a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002a5c:	4809      	ldr	r0, [pc, #36]	; (8002a84 <__NVIC_SetPriority+0xd8>)
 8002a5e:	1dfb      	adds	r3, r7, #7
 8002a60:	781b      	ldrb	r3, [r3, #0]
 8002a62:	001c      	movs	r4, r3
 8002a64:	230f      	movs	r3, #15
 8002a66:	4023      	ands	r3, r4
 8002a68:	3b08      	subs	r3, #8
 8002a6a:	089b      	lsrs	r3, r3, #2
 8002a6c:	430a      	orrs	r2, r1
 8002a6e:	3306      	adds	r3, #6
 8002a70:	009b      	lsls	r3, r3, #2
 8002a72:	18c3      	adds	r3, r0, r3
 8002a74:	3304      	adds	r3, #4
 8002a76:	601a      	str	r2, [r3, #0]
}
 8002a78:	46c0      	nop			; (mov r8, r8)
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	b003      	add	sp, #12
 8002a7e:	bd90      	pop	{r4, r7, pc}
 8002a80:	e000e100 	.word	0xe000e100
 8002a84:	e000ed00 	.word	0xe000ed00

08002a88 <LL_APB1_GRP1_EnableClock>:
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b084      	sub	sp, #16
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8002a90:	4b07      	ldr	r3, [pc, #28]	; (8002ab0 <LL_APB1_GRP1_EnableClock+0x28>)
 8002a92:	69d9      	ldr	r1, [r3, #28]
 8002a94:	4b06      	ldr	r3, [pc, #24]	; (8002ab0 <LL_APB1_GRP1_EnableClock+0x28>)
 8002a96:	687a      	ldr	r2, [r7, #4]
 8002a98:	430a      	orrs	r2, r1
 8002a9a:	61da      	str	r2, [r3, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8002a9c:	4b04      	ldr	r3, [pc, #16]	; (8002ab0 <LL_APB1_GRP1_EnableClock+0x28>)
 8002a9e:	69db      	ldr	r3, [r3, #28]
 8002aa0:	687a      	ldr	r2, [r7, #4]
 8002aa2:	4013      	ands	r3, r2
 8002aa4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
}
 8002aa8:	46c0      	nop			; (mov r8, r8)
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	b004      	add	sp, #16
 8002aae:	bd80      	pop	{r7, pc}
 8002ab0:	40021000 	.word	0x40021000

08002ab4 <LL_TIM_DisableARRPreload>:
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b082      	sub	sp, #8
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	2280      	movs	r2, #128	; 0x80
 8002ac2:	4393      	bics	r3, r2
 8002ac4:	001a      	movs	r2, r3
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	601a      	str	r2, [r3, #0]
}
 8002aca:	46c0      	nop			; (mov r8, r8)
 8002acc:	46bd      	mov	sp, r7
 8002ace:	b002      	add	sp, #8
 8002ad0:	bd80      	pop	{r7, pc}
	...

08002ad4 <LL_TIM_SetClockSource>:
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b082      	sub	sp, #8
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
 8002adc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	689b      	ldr	r3, [r3, #8]
 8002ae2:	4a05      	ldr	r2, [pc, #20]	; (8002af8 <LL_TIM_SetClockSource+0x24>)
 8002ae4:	401a      	ands	r2, r3
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	431a      	orrs	r2, r3
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	609a      	str	r2, [r3, #8]
}
 8002aee:	46c0      	nop			; (mov r8, r8)
 8002af0:	46bd      	mov	sp, r7
 8002af2:	b002      	add	sp, #8
 8002af4:	bd80      	pop	{r7, pc}
 8002af6:	46c0      	nop			; (mov r8, r8)
 8002af8:	ffffbff8 	.word	0xffffbff8

08002afc <LL_TIM_SetTriggerOutput>:
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b082      	sub	sp, #8
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
 8002b04:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	2270      	movs	r2, #112	; 0x70
 8002b0c:	4393      	bics	r3, r2
 8002b0e:	001a      	movs	r2, r3
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	431a      	orrs	r2, r3
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	605a      	str	r2, [r3, #4]
}
 8002b18:	46c0      	nop			; (mov r8, r8)
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	b002      	add	sp, #8
 8002b1e:	bd80      	pop	{r7, pc}

08002b20 <LL_TIM_DisableMasterSlaveMode>:
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b082      	sub	sp, #8
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	689b      	ldr	r3, [r3, #8]
 8002b2c:	2280      	movs	r2, #128	; 0x80
 8002b2e:	4393      	bics	r3, r2
 8002b30:	001a      	movs	r2, r3
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	609a      	str	r2, [r3, #8]
}
 8002b36:	46c0      	nop			; (mov r8, r8)
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	b002      	add	sp, #8
 8002b3c:	bd80      	pop	{r7, pc}
	...

08002b40 <MX_TIM3_Init>:

/* USER CODE END 0 */

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b086      	sub	sp, #24
 8002b44:	af00      	add	r7, sp, #0
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8002b46:	1d3b      	adds	r3, r7, #4
 8002b48:	0018      	movs	r0, r3
 8002b4a:	2314      	movs	r3, #20
 8002b4c:	001a      	movs	r2, r3
 8002b4e:	2100      	movs	r1, #0
 8002b50:	f000 ffda 	bl	8003b08 <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 8002b54:	2002      	movs	r0, #2
 8002b56:	f7ff ff97 	bl	8002a88 <LL_APB1_GRP1_EnableClock>

  /* TIM3 interrupt Init */
  NVIC_SetPriority(TIM3_IRQn, 0);
 8002b5a:	2100      	movs	r1, #0
 8002b5c:	2010      	movs	r0, #16
 8002b5e:	f7ff ff25 	bl	80029ac <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM3_IRQn);
 8002b62:	2010      	movs	r0, #16
 8002b64:	f7ff ff08 	bl	8002978 <__NVIC_EnableIRQ>

  TIM_InitStruct.Prescaler = 799;
 8002b68:	1d3b      	adds	r3, r7, #4
 8002b6a:	4a13      	ldr	r2, [pc, #76]	; (8002bb8 <MX_TIM3_Init+0x78>)
 8002b6c:	801a      	strh	r2, [r3, #0]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8002b6e:	1d3b      	adds	r3, r7, #4
 8002b70:	2200      	movs	r2, #0
 8002b72:	605a      	str	r2, [r3, #4]
  TIM_InitStruct.Autoreload = 19;
 8002b74:	1d3b      	adds	r3, r7, #4
 8002b76:	2213      	movs	r2, #19
 8002b78:	609a      	str	r2, [r3, #8]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8002b7a:	1d3b      	adds	r3, r7, #4
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	60da      	str	r2, [r3, #12]
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 8002b80:	1d3b      	adds	r3, r7, #4
 8002b82:	4a0e      	ldr	r2, [pc, #56]	; (8002bbc <MX_TIM3_Init+0x7c>)
 8002b84:	0019      	movs	r1, r3
 8002b86:	0010      	movs	r0, r2
 8002b88:	f000 fdea 	bl	8003760 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM3);
 8002b8c:	4b0b      	ldr	r3, [pc, #44]	; (8002bbc <MX_TIM3_Init+0x7c>)
 8002b8e:	0018      	movs	r0, r3
 8002b90:	f7ff ff90 	bl	8002ab4 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM3, LL_TIM_CLOCKSOURCE_INTERNAL);
 8002b94:	4b09      	ldr	r3, [pc, #36]	; (8002bbc <MX_TIM3_Init+0x7c>)
 8002b96:	2100      	movs	r1, #0
 8002b98:	0018      	movs	r0, r3
 8002b9a:	f7ff ff9b 	bl	8002ad4 <LL_TIM_SetClockSource>
  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 8002b9e:	4b07      	ldr	r3, [pc, #28]	; (8002bbc <MX_TIM3_Init+0x7c>)
 8002ba0:	2100      	movs	r1, #0
 8002ba2:	0018      	movs	r0, r3
 8002ba4:	f7ff ffaa 	bl	8002afc <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 8002ba8:	4b04      	ldr	r3, [pc, #16]	; (8002bbc <MX_TIM3_Init+0x7c>)
 8002baa:	0018      	movs	r0, r3
 8002bac:	f7ff ffb8 	bl	8002b20 <LL_TIM_DisableMasterSlaveMode>

}
 8002bb0:	46c0      	nop			; (mov r8, r8)
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	b006      	add	sp, #24
 8002bb6:	bd80      	pop	{r7, pc}
 8002bb8:	0000031f 	.word	0x0000031f
 8002bbc:	40000400 	.word	0x40000400

08002bc0 <__NVIC_EnableIRQ>:
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b082      	sub	sp, #8
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	0002      	movs	r2, r0
 8002bc8:	1dfb      	adds	r3, r7, #7
 8002bca:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002bcc:	1dfb      	adds	r3, r7, #7
 8002bce:	781b      	ldrb	r3, [r3, #0]
 8002bd0:	2b7f      	cmp	r3, #127	; 0x7f
 8002bd2:	d809      	bhi.n	8002be8 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002bd4:	1dfb      	adds	r3, r7, #7
 8002bd6:	781b      	ldrb	r3, [r3, #0]
 8002bd8:	001a      	movs	r2, r3
 8002bda:	231f      	movs	r3, #31
 8002bdc:	401a      	ands	r2, r3
 8002bde:	4b04      	ldr	r3, [pc, #16]	; (8002bf0 <__NVIC_EnableIRQ+0x30>)
 8002be0:	2101      	movs	r1, #1
 8002be2:	4091      	lsls	r1, r2
 8002be4:	000a      	movs	r2, r1
 8002be6:	601a      	str	r2, [r3, #0]
}
 8002be8:	46c0      	nop			; (mov r8, r8)
 8002bea:	46bd      	mov	sp, r7
 8002bec:	b002      	add	sp, #8
 8002bee:	bd80      	pop	{r7, pc}
 8002bf0:	e000e100 	.word	0xe000e100

08002bf4 <__NVIC_SetPriority>:
{
 8002bf4:	b590      	push	{r4, r7, lr}
 8002bf6:	b083      	sub	sp, #12
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	0002      	movs	r2, r0
 8002bfc:	6039      	str	r1, [r7, #0]
 8002bfe:	1dfb      	adds	r3, r7, #7
 8002c00:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002c02:	1dfb      	adds	r3, r7, #7
 8002c04:	781b      	ldrb	r3, [r3, #0]
 8002c06:	2b7f      	cmp	r3, #127	; 0x7f
 8002c08:	d828      	bhi.n	8002c5c <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002c0a:	4a2f      	ldr	r2, [pc, #188]	; (8002cc8 <__NVIC_SetPriority+0xd4>)
 8002c0c:	1dfb      	adds	r3, r7, #7
 8002c0e:	781b      	ldrb	r3, [r3, #0]
 8002c10:	b25b      	sxtb	r3, r3
 8002c12:	089b      	lsrs	r3, r3, #2
 8002c14:	33c0      	adds	r3, #192	; 0xc0
 8002c16:	009b      	lsls	r3, r3, #2
 8002c18:	589b      	ldr	r3, [r3, r2]
 8002c1a:	1dfa      	adds	r2, r7, #7
 8002c1c:	7812      	ldrb	r2, [r2, #0]
 8002c1e:	0011      	movs	r1, r2
 8002c20:	2203      	movs	r2, #3
 8002c22:	400a      	ands	r2, r1
 8002c24:	00d2      	lsls	r2, r2, #3
 8002c26:	21ff      	movs	r1, #255	; 0xff
 8002c28:	4091      	lsls	r1, r2
 8002c2a:	000a      	movs	r2, r1
 8002c2c:	43d2      	mvns	r2, r2
 8002c2e:	401a      	ands	r2, r3
 8002c30:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	019b      	lsls	r3, r3, #6
 8002c36:	22ff      	movs	r2, #255	; 0xff
 8002c38:	401a      	ands	r2, r3
 8002c3a:	1dfb      	adds	r3, r7, #7
 8002c3c:	781b      	ldrb	r3, [r3, #0]
 8002c3e:	0018      	movs	r0, r3
 8002c40:	2303      	movs	r3, #3
 8002c42:	4003      	ands	r3, r0
 8002c44:	00db      	lsls	r3, r3, #3
 8002c46:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002c48:	481f      	ldr	r0, [pc, #124]	; (8002cc8 <__NVIC_SetPriority+0xd4>)
 8002c4a:	1dfb      	adds	r3, r7, #7
 8002c4c:	781b      	ldrb	r3, [r3, #0]
 8002c4e:	b25b      	sxtb	r3, r3
 8002c50:	089b      	lsrs	r3, r3, #2
 8002c52:	430a      	orrs	r2, r1
 8002c54:	33c0      	adds	r3, #192	; 0xc0
 8002c56:	009b      	lsls	r3, r3, #2
 8002c58:	501a      	str	r2, [r3, r0]
}
 8002c5a:	e031      	b.n	8002cc0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002c5c:	4a1b      	ldr	r2, [pc, #108]	; (8002ccc <__NVIC_SetPriority+0xd8>)
 8002c5e:	1dfb      	adds	r3, r7, #7
 8002c60:	781b      	ldrb	r3, [r3, #0]
 8002c62:	0019      	movs	r1, r3
 8002c64:	230f      	movs	r3, #15
 8002c66:	400b      	ands	r3, r1
 8002c68:	3b08      	subs	r3, #8
 8002c6a:	089b      	lsrs	r3, r3, #2
 8002c6c:	3306      	adds	r3, #6
 8002c6e:	009b      	lsls	r3, r3, #2
 8002c70:	18d3      	adds	r3, r2, r3
 8002c72:	3304      	adds	r3, #4
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	1dfa      	adds	r2, r7, #7
 8002c78:	7812      	ldrb	r2, [r2, #0]
 8002c7a:	0011      	movs	r1, r2
 8002c7c:	2203      	movs	r2, #3
 8002c7e:	400a      	ands	r2, r1
 8002c80:	00d2      	lsls	r2, r2, #3
 8002c82:	21ff      	movs	r1, #255	; 0xff
 8002c84:	4091      	lsls	r1, r2
 8002c86:	000a      	movs	r2, r1
 8002c88:	43d2      	mvns	r2, r2
 8002c8a:	401a      	ands	r2, r3
 8002c8c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	019b      	lsls	r3, r3, #6
 8002c92:	22ff      	movs	r2, #255	; 0xff
 8002c94:	401a      	ands	r2, r3
 8002c96:	1dfb      	adds	r3, r7, #7
 8002c98:	781b      	ldrb	r3, [r3, #0]
 8002c9a:	0018      	movs	r0, r3
 8002c9c:	2303      	movs	r3, #3
 8002c9e:	4003      	ands	r3, r0
 8002ca0:	00db      	lsls	r3, r3, #3
 8002ca2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002ca4:	4809      	ldr	r0, [pc, #36]	; (8002ccc <__NVIC_SetPriority+0xd8>)
 8002ca6:	1dfb      	adds	r3, r7, #7
 8002ca8:	781b      	ldrb	r3, [r3, #0]
 8002caa:	001c      	movs	r4, r3
 8002cac:	230f      	movs	r3, #15
 8002cae:	4023      	ands	r3, r4
 8002cb0:	3b08      	subs	r3, #8
 8002cb2:	089b      	lsrs	r3, r3, #2
 8002cb4:	430a      	orrs	r2, r1
 8002cb6:	3306      	adds	r3, #6
 8002cb8:	009b      	lsls	r3, r3, #2
 8002cba:	18c3      	adds	r3, r0, r3
 8002cbc:	3304      	adds	r3, #4
 8002cbe:	601a      	str	r2, [r3, #0]
}
 8002cc0:	46c0      	nop			; (mov r8, r8)
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	b003      	add	sp, #12
 8002cc6:	bd90      	pop	{r4, r7, pc}
 8002cc8:	e000e100 	.word	0xe000e100
 8002ccc:	e000ed00 	.word	0xe000ed00

08002cd0 <LL_AHB1_GRP1_EnableClock>:
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b084      	sub	sp, #16
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8002cd8:	4b07      	ldr	r3, [pc, #28]	; (8002cf8 <LL_AHB1_GRP1_EnableClock+0x28>)
 8002cda:	6959      	ldr	r1, [r3, #20]
 8002cdc:	4b06      	ldr	r3, [pc, #24]	; (8002cf8 <LL_AHB1_GRP1_EnableClock+0x28>)
 8002cde:	687a      	ldr	r2, [r7, #4]
 8002ce0:	430a      	orrs	r2, r1
 8002ce2:	615a      	str	r2, [r3, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8002ce4:	4b04      	ldr	r3, [pc, #16]	; (8002cf8 <LL_AHB1_GRP1_EnableClock+0x28>)
 8002ce6:	695b      	ldr	r3, [r3, #20]
 8002ce8:	687a      	ldr	r2, [r7, #4]
 8002cea:	4013      	ands	r3, r2
 8002cec:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002cee:	68fb      	ldr	r3, [r7, #12]
}
 8002cf0:	46c0      	nop			; (mov r8, r8)
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	b004      	add	sp, #16
 8002cf6:	bd80      	pop	{r7, pc}
 8002cf8:	40021000 	.word	0x40021000

08002cfc <LL_APB1_GRP2_EnableClock>:
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b084      	sub	sp, #16
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8002d04:	4b07      	ldr	r3, [pc, #28]	; (8002d24 <LL_APB1_GRP2_EnableClock+0x28>)
 8002d06:	6999      	ldr	r1, [r3, #24]
 8002d08:	4b06      	ldr	r3, [pc, #24]	; (8002d24 <LL_APB1_GRP2_EnableClock+0x28>)
 8002d0a:	687a      	ldr	r2, [r7, #4]
 8002d0c:	430a      	orrs	r2, r1
 8002d0e:	619a      	str	r2, [r3, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002d10:	4b04      	ldr	r3, [pc, #16]	; (8002d24 <LL_APB1_GRP2_EnableClock+0x28>)
 8002d12:	699b      	ldr	r3, [r3, #24]
 8002d14:	687a      	ldr	r2, [r7, #4]
 8002d16:	4013      	ands	r3, r2
 8002d18:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
}
 8002d1c:	46c0      	nop			; (mov r8, r8)
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	b004      	add	sp, #16
 8002d22:	bd80      	pop	{r7, pc}
 8002d24:	40021000 	.word	0x40021000

08002d28 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b082      	sub	sp, #8
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	2201      	movs	r2, #1
 8002d36:	431a      	orrs	r2, r3
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	601a      	str	r2, [r3, #0]
}
 8002d3c:	46c0      	nop			; (mov r8, r8)
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	b002      	add	sp, #8
 8002d42:	bd80      	pop	{r7, pc}

08002d44 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b082      	sub	sp, #8
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  - SCEN (if Smartcard feature is supported), IREN (if Irda feature is supported) and HDSEL bits in the USART_CR3 register.
  */
#if defined(USART_LIN_SUPPORT)
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(USARTx->CR2, USART_CR2_CLKEN);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	4a07      	ldr	r2, [pc, #28]	; (8002d70 <LL_USART_ConfigAsyncMode+0x2c>)
 8002d52:	401a      	ands	r2, r3
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	605a      	str	r2, [r3, #4]
#endif /* USART_IRDA_SUPPORT */
#else
#if defined(USART_IRDA_SUPPORT)
  CLEAR_BIT(USARTx->CR3, (USART_CR3_IREN | USART_CR3_HDSEL));
#else
  CLEAR_BIT(USARTx->CR3, USART_CR3_HDSEL);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	2208      	movs	r2, #8
 8002d5e:	4393      	bics	r3, r2
 8002d60:	001a      	movs	r2, r3
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	609a      	str	r2, [r3, #8]
#endif /* USART_IRDA_SUPPORT */
#endif /* USART_SMARTCARD_SUPPORT */
}
 8002d66:	46c0      	nop			; (mov r8, r8)
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	b002      	add	sp, #8
 8002d6c:	bd80      	pop	{r7, pc}
 8002d6e:	46c0      	nop			; (mov r8, r8)
 8002d70:	fffff7ff 	.word	0xfffff7ff

08002d74 <LL_USART_DisableIT_CTS>:
  * @rmtoll CR3          CTSIE         LL_USART_DisableIT_CTS
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_CTS(USART_TypeDef *USARTx)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b082      	sub	sp, #8
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR3, USART_CR3_CTSIE);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	689b      	ldr	r3, [r3, #8]
 8002d80:	4a03      	ldr	r2, [pc, #12]	; (8002d90 <LL_USART_DisableIT_CTS+0x1c>)
 8002d82:	401a      	ands	r2, r3
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	609a      	str	r2, [r3, #8]
}
 8002d88:	46c0      	nop			; (mov r8, r8)
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	b002      	add	sp, #8
 8002d8e:	bd80      	pop	{r7, pc}
 8002d90:	fffffbff 	.word	0xfffffbff

08002d94 <MX_USART1_UART_Init>:
/* USER CODE END 0 */

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002d94:	b590      	push	{r4, r7, lr}
 8002d96:	b08f      	sub	sp, #60	; 0x3c
 8002d98:	af00      	add	r7, sp, #0
  LL_USART_InitTypeDef USART_InitStruct = {0};
 8002d9a:	241c      	movs	r4, #28
 8002d9c:	193b      	adds	r3, r7, r4
 8002d9e:	0018      	movs	r0, r3
 8002da0:	231c      	movs	r3, #28
 8002da2:	001a      	movs	r2, r3
 8002da4:	2100      	movs	r1, #0
 8002da6:	f000 feaf 	bl	8003b08 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002daa:	1d3b      	adds	r3, r7, #4
 8002dac:	0018      	movs	r0, r3
 8002dae:	2318      	movs	r3, #24
 8002db0:	001a      	movs	r2, r3
 8002db2:	2100      	movs	r1, #0
 8002db4:	f000 fea8 	bl	8003b08 <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_USART1);
 8002db8:	2380      	movs	r3, #128	; 0x80
 8002dba:	01db      	lsls	r3, r3, #7
 8002dbc:	0018      	movs	r0, r3
 8002dbe:	f7ff ff9d 	bl	8002cfc <LL_APB1_GRP2_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8002dc2:	2380      	movs	r3, #128	; 0x80
 8002dc4:	029b      	lsls	r3, r3, #10
 8002dc6:	0018      	movs	r0, r3
 8002dc8:	f7ff ff82 	bl	8002cd0 <LL_AHB1_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PA9   ------> USART1_TX
  PA10   ------> USART1_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 8002dcc:	1d3b      	adds	r3, r7, #4
 8002dce:	2280      	movs	r2, #128	; 0x80
 8002dd0:	0092      	lsls	r2, r2, #2
 8002dd2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002dd4:	1d3b      	adds	r3, r7, #4
 8002dd6:	2202      	movs	r2, #2
 8002dd8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8002dda:	1d3b      	adds	r3, r7, #4
 8002ddc:	2203      	movs	r2, #3
 8002dde:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002de0:	1d3b      	adds	r3, r7, #4
 8002de2:	2200      	movs	r2, #0
 8002de4:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002de6:	1d3b      	adds	r3, r7, #4
 8002de8:	2200      	movs	r2, #0
 8002dea:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8002dec:	1d3b      	adds	r3, r7, #4
 8002dee:	2201      	movs	r2, #1
 8002df0:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002df2:	1d3a      	adds	r2, r7, #4
 8002df4:	2390      	movs	r3, #144	; 0x90
 8002df6:	05db      	lsls	r3, r3, #23
 8002df8:	0011      	movs	r1, r2
 8002dfa:	0018      	movs	r0, r3
 8002dfc:	f000 fabc 	bl	8003378 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 8002e00:	1d3b      	adds	r3, r7, #4
 8002e02:	2280      	movs	r2, #128	; 0x80
 8002e04:	00d2      	lsls	r2, r2, #3
 8002e06:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002e08:	1d3b      	adds	r3, r7, #4
 8002e0a:	2202      	movs	r2, #2
 8002e0c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8002e0e:	1d3b      	adds	r3, r7, #4
 8002e10:	2203      	movs	r2, #3
 8002e12:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002e14:	1d3b      	adds	r3, r7, #4
 8002e16:	2200      	movs	r2, #0
 8002e18:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002e1a:	1d3b      	adds	r3, r7, #4
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8002e20:	1d3b      	adds	r3, r7, #4
 8002e22:	2201      	movs	r2, #1
 8002e24:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e26:	1d3a      	adds	r2, r7, #4
 8002e28:	2390      	movs	r3, #144	; 0x90
 8002e2a:	05db      	lsls	r3, r3, #23
 8002e2c:	0011      	movs	r1, r2
 8002e2e:	0018      	movs	r0, r3
 8002e30:	f000 faa2 	bl	8003378 <LL_GPIO_Init>

  /* USART1 interrupt Init */
  NVIC_SetPriority(USART1_IRQn, 0);
 8002e34:	2100      	movs	r1, #0
 8002e36:	201b      	movs	r0, #27
 8002e38:	f7ff fedc 	bl	8002bf4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART1_IRQn);
 8002e3c:	201b      	movs	r0, #27
 8002e3e:	f7ff febf 	bl	8002bc0 <__NVIC_EnableIRQ>

  USART_InitStruct.BaudRate = 115200;
 8002e42:	193b      	adds	r3, r7, r4
 8002e44:	22e1      	movs	r2, #225	; 0xe1
 8002e46:	0252      	lsls	r2, r2, #9
 8002e48:	601a      	str	r2, [r3, #0]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8002e4a:	0021      	movs	r1, r4
 8002e4c:	187b      	adds	r3, r7, r1
 8002e4e:	2200      	movs	r2, #0
 8002e50:	605a      	str	r2, [r3, #4]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8002e52:	187b      	adds	r3, r7, r1
 8002e54:	2200      	movs	r2, #0
 8002e56:	609a      	str	r2, [r3, #8]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8002e58:	187b      	adds	r3, r7, r1
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	60da      	str	r2, [r3, #12]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8002e5e:	187b      	adds	r3, r7, r1
 8002e60:	220c      	movs	r2, #12
 8002e62:	611a      	str	r2, [r3, #16]
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8002e64:	187b      	adds	r3, r7, r1
 8002e66:	2200      	movs	r2, #0
 8002e68:	615a      	str	r2, [r3, #20]
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8002e6a:	187b      	adds	r3, r7, r1
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	619a      	str	r2, [r3, #24]
  LL_USART_Init(USART1, &USART_InitStruct);
 8002e70:	187b      	adds	r3, r7, r1
 8002e72:	4a0a      	ldr	r2, [pc, #40]	; (8002e9c <MX_USART1_UART_Init+0x108>)
 8002e74:	0019      	movs	r1, r3
 8002e76:	0010      	movs	r0, r2
 8002e78:	f000 fd60 	bl	800393c <LL_USART_Init>
  LL_USART_DisableIT_CTS(USART1);
 8002e7c:	4b07      	ldr	r3, [pc, #28]	; (8002e9c <MX_USART1_UART_Init+0x108>)
 8002e7e:	0018      	movs	r0, r3
 8002e80:	f7ff ff78 	bl	8002d74 <LL_USART_DisableIT_CTS>
  LL_USART_ConfigAsyncMode(USART1);
 8002e84:	4b05      	ldr	r3, [pc, #20]	; (8002e9c <MX_USART1_UART_Init+0x108>)
 8002e86:	0018      	movs	r0, r3
 8002e88:	f7ff ff5c 	bl	8002d44 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART1);
 8002e8c:	4b03      	ldr	r3, [pc, #12]	; (8002e9c <MX_USART1_UART_Init+0x108>)
 8002e8e:	0018      	movs	r0, r3
 8002e90:	f7ff ff4a 	bl	8002d28 <LL_USART_Enable>

}
 8002e94:	46c0      	nop			; (mov r8, r8)
 8002e96:	46bd      	mov	sp, r7
 8002e98:	b00f      	add	sp, #60	; 0x3c
 8002e9a:	bd90      	pop	{r4, r7, pc}
 8002e9c:	40013800 	.word	0x40013800

08002ea0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002ea0:	480d      	ldr	r0, [pc, #52]	; (8002ed8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002ea2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002ea4:	480d      	ldr	r0, [pc, #52]	; (8002edc <LoopForever+0x6>)
  ldr r1, =_edata
 8002ea6:	490e      	ldr	r1, [pc, #56]	; (8002ee0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002ea8:	4a0e      	ldr	r2, [pc, #56]	; (8002ee4 <LoopForever+0xe>)
  movs r3, #0
 8002eaa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002eac:	e002      	b.n	8002eb4 <LoopCopyDataInit>

08002eae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002eae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002eb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002eb2:	3304      	adds	r3, #4

08002eb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002eb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002eb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002eb8:	d3f9      	bcc.n	8002eae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002eba:	4a0b      	ldr	r2, [pc, #44]	; (8002ee8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002ebc:	4c0b      	ldr	r4, [pc, #44]	; (8002eec <LoopForever+0x16>)
  movs r3, #0
 8002ebe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ec0:	e001      	b.n	8002ec6 <LoopFillZerobss>

08002ec2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002ec2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ec4:	3204      	adds	r2, #4

08002ec6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002ec6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ec8:	d3fb      	bcc.n	8002ec2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002eca:	f7ff fd50 	bl	800296e <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8002ece:	f000 fdf7 	bl	8003ac0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002ed2:	f7fe fdf1 	bl	8001ab8 <main>

08002ed6 <LoopForever>:

LoopForever:
    b LoopForever
 8002ed6:	e7fe      	b.n	8002ed6 <LoopForever>
  ldr   r0, =_estack
 8002ed8:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8002edc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ee0:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8002ee4:	08003ba0 	.word	0x08003ba0
  ldr r2, =_sbss
 8002ee8:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8002eec:	200003b0 	.word	0x200003b0

08002ef0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002ef0:	e7fe      	b.n	8002ef0 <ADC1_IRQHandler>

08002ef2 <LL_ADC_IsEnabled>:
{
 8002ef2:	b580      	push	{r7, lr}
 8002ef4:	b082      	sub	sp, #8
 8002ef6:	af00      	add	r7, sp, #0
 8002ef8:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN));
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	689b      	ldr	r3, [r3, #8]
 8002efe:	2201      	movs	r2, #1
 8002f00:	4013      	ands	r3, r2
 8002f02:	3b01      	subs	r3, #1
 8002f04:	425a      	negs	r2, r3
 8002f06:	4153      	adcs	r3, r2
 8002f08:	b2db      	uxtb	r3, r3
}
 8002f0a:	0018      	movs	r0, r3
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	b002      	add	sp, #8
 8002f10:	bd80      	pop	{r7, pc}
	...

08002f14 <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b084      	sub	sp, #16
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
 8002f1c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8002f1e:	230f      	movs	r3, #15
 8002f20:	18fb      	adds	r3, r7, r3
 8002f22:	2200      	movs	r2, #0
 8002f24:	701a      	strb	r2, [r3, #0]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_LOW_POWER(ADC_InitStruct->LowPowerMode));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	0018      	movs	r0, r3
 8002f2a:	f7ff ffe2 	bl	8002ef2 <LL_ADC_IsEnabled>
 8002f2e:	1e03      	subs	r3, r0, #0
 8002f30:	d118      	bne.n	8002f64 <LL_ADC_Init+0x50>
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC data resolution                                           */
    /*    - Set ADC conversion data alignment                                 */
    /*    - Set ADC low power mode                                            */
    MODIFY_REG(ADCx->CFGR1,
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	68db      	ldr	r3, [r3, #12]
 8002f36:	4a11      	ldr	r2, [pc, #68]	; (8002f7c <LL_ADC_Init+0x68>)
 8002f38:	401a      	ands	r2, r3
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	6859      	ldr	r1, [r3, #4]
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	4319      	orrs	r1, r3
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	68db      	ldr	r3, [r3, #12]
 8002f48:	430b      	orrs	r3, r1
 8002f4a:	431a      	orrs	r2, r3
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	60da      	str	r2, [r3, #12]
                 ADC_InitStruct->Resolution
               | ADC_InitStruct->DataAlignment
               | ADC_InitStruct->LowPowerMode
              );

    MODIFY_REG(ADCx->CFGR2,
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	691b      	ldr	r3, [r3, #16]
 8002f54:	009b      	lsls	r3, r3, #2
 8002f56:	089a      	lsrs	r2, r3, #2
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	431a      	orrs	r2, r3
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	611a      	str	r2, [r3, #16]
 8002f62:	e003      	b.n	8002f6c <LL_ADC_Init+0x58>
              );
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8002f64:	230f      	movs	r3, #15
 8002f66:	18fb      	adds	r3, r7, r3
 8002f68:	2201      	movs	r2, #1
 8002f6a:	701a      	strb	r2, [r3, #0]
  }
  return status;
 8002f6c:	230f      	movs	r3, #15
 8002f6e:	18fb      	adds	r3, r7, r3
 8002f70:	781b      	ldrb	r3, [r3, #0]
}
 8002f72:	0018      	movs	r0, r3
 8002f74:	46bd      	mov	sp, r7
 8002f76:	b004      	add	sp, #16
 8002f78:	bd80      	pop	{r7, pc}
 8002f7a:	46c0      	nop			; (mov r8, r8)
 8002f7c:	ffff3fc7 	.word	0xffff3fc7

08002f80 <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b084      	sub	sp, #16
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
 8002f88:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8002f8a:	230f      	movs	r3, #15
 8002f8c:	18fb      	adds	r3, r7, r3
 8002f8e:	2200      	movs	r2, #0
 8002f90:	701a      	strb	r2, [r3, #0]
  assert_param((ADC_REG_InitStruct->ContinuousMode == LL_ADC_REG_CONV_SINGLE)
               || (ADC_REG_InitStruct->SequencerDiscont == LL_ADC_REG_SEQ_DISCONT_DISABLE));

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	0018      	movs	r0, r3
 8002f96:	f7ff ffac 	bl	8002ef2 <LL_ADC_IsEnabled>
 8002f9a:	1e03      	subs	r3, r0, #0
 8002f9c:	d115      	bne.n	8002fca <LL_ADC_REG_Init+0x4a>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /*    - Set ADC group regular overrun behavior                            */
    /* Note: On this STM32 serie, ADC trigger edge is set to value 0x0 by     */
    /*       setting of trigger source to SW start.                           */
    MODIFY_REG(ADCx->CFGR1,
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	68db      	ldr	r3, [r3, #12]
 8002fa2:	4a0f      	ldr	r2, [pc, #60]	; (8002fe0 <LL_ADC_REG_Init+0x60>)
 8002fa4:	401a      	ands	r2, r3
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	6819      	ldr	r1, [r3, #0]
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	4319      	orrs	r1, r3
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	689b      	ldr	r3, [r3, #8]
 8002fb4:	4319      	orrs	r1, r3
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	68db      	ldr	r3, [r3, #12]
 8002fba:	4319      	orrs	r1, r3
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	691b      	ldr	r3, [r3, #16]
 8002fc0:	430b      	orrs	r3, r1
 8002fc2:	431a      	orrs	r2, r3
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	60da      	str	r2, [r3, #12]
 8002fc8:	e003      	b.n	8002fd2 <LL_ADC_REG_Init+0x52>

  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8002fca:	230f      	movs	r3, #15
 8002fcc:	18fb      	adds	r3, r7, r3
 8002fce:	2201      	movs	r2, #1
 8002fd0:	701a      	strb	r2, [r3, #0]
  }
  return status;
 8002fd2:	230f      	movs	r3, #15
 8002fd4:	18fb      	adds	r3, r7, r3
 8002fd6:	781b      	ldrb	r3, [r3, #0]
}
 8002fd8:	0018      	movs	r0, r3
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	b004      	add	sp, #16
 8002fde:	bd80      	pop	{r7, pc}
 8002fe0:	fffec23c 	.word	0xfffec23c

08002fe4 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b082      	sub	sp, #8
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 8002fec:	4b04      	ldr	r3, [pc, #16]	; (8003000 <LL_EXTI_EnableIT_0_31+0x1c>)
 8002fee:	6819      	ldr	r1, [r3, #0]
 8002ff0:	4b03      	ldr	r3, [pc, #12]	; (8003000 <LL_EXTI_EnableIT_0_31+0x1c>)
 8002ff2:	687a      	ldr	r2, [r7, #4]
 8002ff4:	430a      	orrs	r2, r1
 8002ff6:	601a      	str	r2, [r3, #0]
}
 8002ff8:	46c0      	nop			; (mov r8, r8)
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	b002      	add	sp, #8
 8002ffe:	bd80      	pop	{r7, pc}
 8003000:	40010400 	.word	0x40010400

08003004 <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b082      	sub	sp, #8
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 800300c:	4b05      	ldr	r3, [pc, #20]	; (8003024 <LL_EXTI_DisableIT_0_31+0x20>)
 800300e:	681a      	ldr	r2, [r3, #0]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	43d9      	mvns	r1, r3
 8003014:	4b03      	ldr	r3, [pc, #12]	; (8003024 <LL_EXTI_DisableIT_0_31+0x20>)
 8003016:	400a      	ands	r2, r1
 8003018:	601a      	str	r2, [r3, #0]
}
 800301a:	46c0      	nop			; (mov r8, r8)
 800301c:	46bd      	mov	sp, r7
 800301e:	b002      	add	sp, #8
 8003020:	bd80      	pop	{r7, pc}
 8003022:	46c0      	nop			; (mov r8, r8)
 8003024:	40010400 	.word	0x40010400

08003028 <LL_EXTI_EnableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b082      	sub	sp, #8
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 8003030:	4b04      	ldr	r3, [pc, #16]	; (8003044 <LL_EXTI_EnableEvent_0_31+0x1c>)
 8003032:	6859      	ldr	r1, [r3, #4]
 8003034:	4b03      	ldr	r3, [pc, #12]	; (8003044 <LL_EXTI_EnableEvent_0_31+0x1c>)
 8003036:	687a      	ldr	r2, [r7, #4]
 8003038:	430a      	orrs	r2, r1
 800303a:	605a      	str	r2, [r3, #4]

}
 800303c:	46c0      	nop			; (mov r8, r8)
 800303e:	46bd      	mov	sp, r7
 8003040:	b002      	add	sp, #8
 8003042:	bd80      	pop	{r7, pc}
 8003044:	40010400 	.word	0x40010400

08003048 <LL_EXTI_DisableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b082      	sub	sp, #8
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 8003050:	4b05      	ldr	r3, [pc, #20]	; (8003068 <LL_EXTI_DisableEvent_0_31+0x20>)
 8003052:	685a      	ldr	r2, [r3, #4]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	43d9      	mvns	r1, r3
 8003058:	4b03      	ldr	r3, [pc, #12]	; (8003068 <LL_EXTI_DisableEvent_0_31+0x20>)
 800305a:	400a      	ands	r2, r1
 800305c:	605a      	str	r2, [r3, #4]
}
 800305e:	46c0      	nop			; (mov r8, r8)
 8003060:	46bd      	mov	sp, r7
 8003062:	b002      	add	sp, #8
 8003064:	bd80      	pop	{r7, pc}
 8003066:	46c0      	nop			; (mov r8, r8)
 8003068:	40010400 	.word	0x40010400

0800306c <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b082      	sub	sp, #8
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 8003074:	4b04      	ldr	r3, [pc, #16]	; (8003088 <LL_EXTI_EnableRisingTrig_0_31+0x1c>)
 8003076:	6899      	ldr	r1, [r3, #8]
 8003078:	4b03      	ldr	r3, [pc, #12]	; (8003088 <LL_EXTI_EnableRisingTrig_0_31+0x1c>)
 800307a:	687a      	ldr	r2, [r7, #4]
 800307c:	430a      	orrs	r2, r1
 800307e:	609a      	str	r2, [r3, #8]

}
 8003080:	46c0      	nop			; (mov r8, r8)
 8003082:	46bd      	mov	sp, r7
 8003084:	b002      	add	sp, #8
 8003086:	bd80      	pop	{r7, pc}
 8003088:	40010400 	.word	0x40010400

0800308c <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b082      	sub	sp, #8
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8003094:	4b05      	ldr	r3, [pc, #20]	; (80030ac <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 8003096:	689a      	ldr	r2, [r3, #8]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	43d9      	mvns	r1, r3
 800309c:	4b03      	ldr	r3, [pc, #12]	; (80030ac <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 800309e:	400a      	ands	r2, r1
 80030a0:	609a      	str	r2, [r3, #8]

}
 80030a2:	46c0      	nop			; (mov r8, r8)
 80030a4:	46bd      	mov	sp, r7
 80030a6:	b002      	add	sp, #8
 80030a8:	bd80      	pop	{r7, pc}
 80030aa:	46c0      	nop			; (mov r8, r8)
 80030ac:	40010400 	.word	0x40010400

080030b0 <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b082      	sub	sp, #8
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 80030b8:	4b04      	ldr	r3, [pc, #16]	; (80030cc <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 80030ba:	68d9      	ldr	r1, [r3, #12]
 80030bc:	4b03      	ldr	r3, [pc, #12]	; (80030cc <LL_EXTI_EnableFallingTrig_0_31+0x1c>)
 80030be:	687a      	ldr	r2, [r7, #4]
 80030c0:	430a      	orrs	r2, r1
 80030c2:	60da      	str	r2, [r3, #12]
}
 80030c4:	46c0      	nop			; (mov r8, r8)
 80030c6:	46bd      	mov	sp, r7
 80030c8:	b002      	add	sp, #8
 80030ca:	bd80      	pop	{r7, pc}
 80030cc:	40010400 	.word	0x40010400

080030d0 <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b082      	sub	sp, #8
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 80030d8:	4b05      	ldr	r3, [pc, #20]	; (80030f0 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 80030da:	68da      	ldr	r2, [r3, #12]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	43d9      	mvns	r1, r3
 80030e0:	4b03      	ldr	r3, [pc, #12]	; (80030f0 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 80030e2:	400a      	ands	r2, r1
 80030e4:	60da      	str	r2, [r3, #12]
}
 80030e6:	46c0      	nop			; (mov r8, r8)
 80030e8:	46bd      	mov	sp, r7
 80030ea:	b002      	add	sp, #8
 80030ec:	bd80      	pop	{r7, pc}
 80030ee:	46c0      	nop			; (mov r8, r8)
 80030f0:	40010400 	.word	0x40010400

080030f4 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b084      	sub	sp, #16
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 80030fc:	230f      	movs	r3, #15
 80030fe:	18fb      	adds	r3, r7, r3
 8003100:	2200      	movs	r2, #0
 8003102:	701a      	strb	r2, [r3, #0]
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	791b      	ldrb	r3, [r3, #4]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d100      	bne.n	800310e <LL_EXTI_Init+0x1a>
 800310c:	e068      	b.n	80031e0 <LL_EXTI_Init+0xec>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d100      	bne.n	8003118 <LL_EXTI_Init+0x24>
 8003116:	e06e      	b.n	80031f6 <LL_EXTI_Init+0x102>
    {
      switch (EXTI_InitStruct->Mode)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	795b      	ldrb	r3, [r3, #5]
 800311c:	2b02      	cmp	r3, #2
 800311e:	d01b      	beq.n	8003158 <LL_EXTI_Init+0x64>
 8003120:	dc25      	bgt.n	800316e <LL_EXTI_Init+0x7a>
 8003122:	2b00      	cmp	r3, #0
 8003124:	d002      	beq.n	800312c <LL_EXTI_Init+0x38>
 8003126:	2b01      	cmp	r3, #1
 8003128:	d00b      	beq.n	8003142 <LL_EXTI_Init+0x4e>
 800312a:	e020      	b.n	800316e <LL_EXTI_Init+0x7a>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	0018      	movs	r0, r3
 8003132:	f7ff ff89 	bl	8003048 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	0018      	movs	r0, r3
 800313c:	f7ff ff52 	bl	8002fe4 <LL_EXTI_EnableIT_0_31>
          break;
 8003140:	e01a      	b.n	8003178 <LL_EXTI_Init+0x84>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	0018      	movs	r0, r3
 8003148:	f7ff ff5c 	bl	8003004 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	0018      	movs	r0, r3
 8003152:	f7ff ff69 	bl	8003028 <LL_EXTI_EnableEvent_0_31>
          break;
 8003156:	e00f      	b.n	8003178 <LL_EXTI_Init+0x84>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	0018      	movs	r0, r3
 800315e:	f7ff ff41 	bl	8002fe4 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	0018      	movs	r0, r3
 8003168:	f7ff ff5e 	bl	8003028 <LL_EXTI_EnableEvent_0_31>
          break;
 800316c:	e004      	b.n	8003178 <LL_EXTI_Init+0x84>
        default:
          status = ERROR;
 800316e:	230f      	movs	r3, #15
 8003170:	18fb      	adds	r3, r7, r3
 8003172:	2201      	movs	r2, #1
 8003174:	701a      	strb	r2, [r3, #0]
          break;
 8003176:	46c0      	nop			; (mov r8, r8)
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	799b      	ldrb	r3, [r3, #6]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d03a      	beq.n	80031f6 <LL_EXTI_Init+0x102>
      {
        switch (EXTI_InitStruct->Trigger)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	799b      	ldrb	r3, [r3, #6]
 8003184:	2b03      	cmp	r3, #3
 8003186:	d01b      	beq.n	80031c0 <LL_EXTI_Init+0xcc>
 8003188:	dc25      	bgt.n	80031d6 <LL_EXTI_Init+0xe2>
 800318a:	2b01      	cmp	r3, #1
 800318c:	d002      	beq.n	8003194 <LL_EXTI_Init+0xa0>
 800318e:	2b02      	cmp	r3, #2
 8003190:	d00b      	beq.n	80031aa <LL_EXTI_Init+0xb6>
 8003192:	e020      	b.n	80031d6 <LL_EXTI_Init+0xe2>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	0018      	movs	r0, r3
 800319a:	f7ff ff99 	bl	80030d0 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	0018      	movs	r0, r3
 80031a4:	f7ff ff62 	bl	800306c <LL_EXTI_EnableRisingTrig_0_31>
            break;
 80031a8:	e026      	b.n	80031f8 <LL_EXTI_Init+0x104>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	0018      	movs	r0, r3
 80031b0:	f7ff ff6c 	bl	800308c <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	0018      	movs	r0, r3
 80031ba:	f7ff ff79 	bl	80030b0 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 80031be:	e01b      	b.n	80031f8 <LL_EXTI_Init+0x104>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	0018      	movs	r0, r3
 80031c6:	f7ff ff51 	bl	800306c <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	0018      	movs	r0, r3
 80031d0:	f7ff ff6e 	bl	80030b0 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 80031d4:	e010      	b.n	80031f8 <LL_EXTI_Init+0x104>
          default:
            status = ERROR;
 80031d6:	230f      	movs	r3, #15
 80031d8:	18fb      	adds	r3, r7, r3
 80031da:	2201      	movs	r2, #1
 80031dc:	701a      	strb	r2, [r3, #0]
            break;
 80031de:	e00b      	b.n	80031f8 <LL_EXTI_Init+0x104>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	0018      	movs	r0, r3
 80031e6:	f7ff ff0d 	bl	8003004 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	0018      	movs	r0, r3
 80031f0:	f7ff ff2a 	bl	8003048 <LL_EXTI_DisableEvent_0_31>
 80031f4:	e000      	b.n	80031f8 <LL_EXTI_Init+0x104>
      }
 80031f6:	46c0      	nop			; (mov r8, r8)
  }
  return status;
 80031f8:	230f      	movs	r3, #15
 80031fa:	18fb      	adds	r3, r7, r3
 80031fc:	781b      	ldrb	r3, [r3, #0]
}
 80031fe:	0018      	movs	r0, r3
 8003200:	46bd      	mov	sp, r7
 8003202:	b004      	add	sp, #16
 8003204:	bd80      	pop	{r7, pc}

08003206 <LL_GPIO_SetPinMode>:
{
 8003206:	b580      	push	{r7, lr}
 8003208:	b084      	sub	sp, #16
 800320a:	af00      	add	r7, sp, #0
 800320c:	60f8      	str	r0, [r7, #12]
 800320e:	60b9      	str	r1, [r7, #8]
 8003210:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODER0), ((Pin * Pin) * Mode));
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	6819      	ldr	r1, [r3, #0]
 8003216:	68bb      	ldr	r3, [r7, #8]
 8003218:	435b      	muls	r3, r3
 800321a:	001a      	movs	r2, r3
 800321c:	0013      	movs	r3, r2
 800321e:	005b      	lsls	r3, r3, #1
 8003220:	189b      	adds	r3, r3, r2
 8003222:	43db      	mvns	r3, r3
 8003224:	400b      	ands	r3, r1
 8003226:	001a      	movs	r2, r3
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	435b      	muls	r3, r3
 800322c:	6879      	ldr	r1, [r7, #4]
 800322e:	434b      	muls	r3, r1
 8003230:	431a      	orrs	r2, r3
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	601a      	str	r2, [r3, #0]
}
 8003236:	46c0      	nop			; (mov r8, r8)
 8003238:	46bd      	mov	sp, r7
 800323a:	b004      	add	sp, #16
 800323c:	bd80      	pop	{r7, pc}

0800323e <LL_GPIO_SetPinOutputType>:
{
 800323e:	b580      	push	{r7, lr}
 8003240:	b084      	sub	sp, #16
 8003242:	af00      	add	r7, sp, #0
 8003244:	60f8      	str	r0, [r7, #12]
 8003246:	60b9      	str	r1, [r7, #8]
 8003248:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	68ba      	ldr	r2, [r7, #8]
 8003250:	43d2      	mvns	r2, r2
 8003252:	401a      	ands	r2, r3
 8003254:	68bb      	ldr	r3, [r7, #8]
 8003256:	6879      	ldr	r1, [r7, #4]
 8003258:	434b      	muls	r3, r1
 800325a:	431a      	orrs	r2, r3
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	605a      	str	r2, [r3, #4]
}
 8003260:	46c0      	nop			; (mov r8, r8)
 8003262:	46bd      	mov	sp, r7
 8003264:	b004      	add	sp, #16
 8003266:	bd80      	pop	{r7, pc}

08003268 <LL_GPIO_SetPinSpeed>:
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b084      	sub	sp, #16
 800326c:	af00      	add	r7, sp, #0
 800326e:	60f8      	str	r0, [r7, #12]
 8003270:	60b9      	str	r1, [r7, #8]
 8003272:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEEDR0), ((Pin * Pin) * Speed));
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	6899      	ldr	r1, [r3, #8]
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	435b      	muls	r3, r3
 800327c:	001a      	movs	r2, r3
 800327e:	0013      	movs	r3, r2
 8003280:	005b      	lsls	r3, r3, #1
 8003282:	189b      	adds	r3, r3, r2
 8003284:	43db      	mvns	r3, r3
 8003286:	400b      	ands	r3, r1
 8003288:	001a      	movs	r2, r3
 800328a:	68bb      	ldr	r3, [r7, #8]
 800328c:	435b      	muls	r3, r3
 800328e:	6879      	ldr	r1, [r7, #4]
 8003290:	434b      	muls	r3, r1
 8003292:	431a      	orrs	r2, r3
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	609a      	str	r2, [r3, #8]
}
 8003298:	46c0      	nop			; (mov r8, r8)
 800329a:	46bd      	mov	sp, r7
 800329c:	b004      	add	sp, #16
 800329e:	bd80      	pop	{r7, pc}

080032a0 <LL_GPIO_SetPinPull>:
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b084      	sub	sp, #16
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	60f8      	str	r0, [r7, #12]
 80032a8:	60b9      	str	r1, [r7, #8]
 80032aa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPDR0), ((Pin * Pin) * Pull));
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	68d9      	ldr	r1, [r3, #12]
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	435b      	muls	r3, r3
 80032b4:	001a      	movs	r2, r3
 80032b6:	0013      	movs	r3, r2
 80032b8:	005b      	lsls	r3, r3, #1
 80032ba:	189b      	adds	r3, r3, r2
 80032bc:	43db      	mvns	r3, r3
 80032be:	400b      	ands	r3, r1
 80032c0:	001a      	movs	r2, r3
 80032c2:	68bb      	ldr	r3, [r7, #8]
 80032c4:	435b      	muls	r3, r3
 80032c6:	6879      	ldr	r1, [r7, #4]
 80032c8:	434b      	muls	r3, r1
 80032ca:	431a      	orrs	r2, r3
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	60da      	str	r2, [r3, #12]
}
 80032d0:	46c0      	nop			; (mov r8, r8)
 80032d2:	46bd      	mov	sp, r7
 80032d4:	b004      	add	sp, #16
 80032d6:	bd80      	pop	{r7, pc}

080032d8 <LL_GPIO_SetAFPin_0_7>:
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b084      	sub	sp, #16
 80032dc:	af00      	add	r7, sp, #0
 80032de:	60f8      	str	r0, [r7, #12]
 80032e0:	60b9      	str	r1, [r7, #8]
 80032e2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	6a19      	ldr	r1, [r3, #32]
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	435b      	muls	r3, r3
 80032ec:	68ba      	ldr	r2, [r7, #8]
 80032ee:	4353      	muls	r3, r2
 80032f0:	68ba      	ldr	r2, [r7, #8]
 80032f2:	435a      	muls	r2, r3
 80032f4:	0013      	movs	r3, r2
 80032f6:	011b      	lsls	r3, r3, #4
 80032f8:	1a9b      	subs	r3, r3, r2
 80032fa:	43db      	mvns	r3, r3
 80032fc:	400b      	ands	r3, r1
 80032fe:	001a      	movs	r2, r3
 8003300:	68bb      	ldr	r3, [r7, #8]
 8003302:	435b      	muls	r3, r3
 8003304:	68b9      	ldr	r1, [r7, #8]
 8003306:	434b      	muls	r3, r1
 8003308:	68b9      	ldr	r1, [r7, #8]
 800330a:	434b      	muls	r3, r1
 800330c:	6879      	ldr	r1, [r7, #4]
 800330e:	434b      	muls	r3, r1
 8003310:	431a      	orrs	r2, r3
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	621a      	str	r2, [r3, #32]
}
 8003316:	46c0      	nop			; (mov r8, r8)
 8003318:	46bd      	mov	sp, r7
 800331a:	b004      	add	sp, #16
 800331c:	bd80      	pop	{r7, pc}

0800331e <LL_GPIO_SetAFPin_8_15>:
{
 800331e:	b580      	push	{r7, lr}
 8003320:	b084      	sub	sp, #16
 8003322:	af00      	add	r7, sp, #0
 8003324:	60f8      	str	r0, [r7, #12]
 8003326:	60b9      	str	r1, [r7, #8]
 8003328:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800332e:	68bb      	ldr	r3, [r7, #8]
 8003330:	0a1b      	lsrs	r3, r3, #8
 8003332:	68ba      	ldr	r2, [r7, #8]
 8003334:	0a12      	lsrs	r2, r2, #8
 8003336:	4353      	muls	r3, r2
 8003338:	68ba      	ldr	r2, [r7, #8]
 800333a:	0a12      	lsrs	r2, r2, #8
 800333c:	4353      	muls	r3, r2
 800333e:	68ba      	ldr	r2, [r7, #8]
 8003340:	0a12      	lsrs	r2, r2, #8
 8003342:	435a      	muls	r2, r3
 8003344:	0013      	movs	r3, r2
 8003346:	011b      	lsls	r3, r3, #4
 8003348:	1a9b      	subs	r3, r3, r2
 800334a:	43db      	mvns	r3, r3
 800334c:	400b      	ands	r3, r1
 800334e:	001a      	movs	r2, r3
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	0a1b      	lsrs	r3, r3, #8
 8003354:	68b9      	ldr	r1, [r7, #8]
 8003356:	0a09      	lsrs	r1, r1, #8
 8003358:	434b      	muls	r3, r1
 800335a:	68b9      	ldr	r1, [r7, #8]
 800335c:	0a09      	lsrs	r1, r1, #8
 800335e:	434b      	muls	r3, r1
 8003360:	68b9      	ldr	r1, [r7, #8]
 8003362:	0a09      	lsrs	r1, r1, #8
 8003364:	434b      	muls	r3, r1
 8003366:	6879      	ldr	r1, [r7, #4]
 8003368:	434b      	muls	r3, r1
 800336a:	431a      	orrs	r2, r3
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	625a      	str	r2, [r3, #36]	; 0x24
}
 8003370:	46c0      	nop			; (mov r8, r8)
 8003372:	46bd      	mov	sp, r7
 8003374:	b004      	add	sp, #16
 8003376:	bd80      	pop	{r7, pc}

08003378 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b084      	sub	sp, #16
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
 8003380:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = 0;
 8003382:	2300      	movs	r3, #0
 8003384:	60fb      	str	r3, [r7, #12]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8003386:	e048      	b.n	800341a <LL_GPIO_Init+0xa2>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	2101      	movs	r1, #1
 800338e:	68fa      	ldr	r2, [r7, #12]
 8003390:	4091      	lsls	r1, r2
 8003392:	000a      	movs	r2, r1
 8003394:	4013      	ands	r3, r2
 8003396:	60bb      	str	r3, [r7, #8]

    if (currentpin != 0x00u)
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d03a      	beq.n	8003414 <LL_GPIO_Init+0x9c>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	2b01      	cmp	r3, #1
 80033a4:	d003      	beq.n	80033ae <LL_GPIO_Init+0x36>
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	2b02      	cmp	r3, #2
 80033ac:	d10e      	bne.n	80033cc <LL_GPIO_Init+0x54>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	689a      	ldr	r2, [r3, #8]
 80033b2:	68b9      	ldr	r1, [r7, #8]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	0018      	movs	r0, r3
 80033b8:	f7ff ff56 	bl	8003268 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	6819      	ldr	r1, [r3, #0]
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	68da      	ldr	r2, [r3, #12]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	0018      	movs	r0, r3
 80033c8:	f7ff ff39 	bl	800323e <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	691a      	ldr	r2, [r3, #16]
 80033d0:	68b9      	ldr	r1, [r7, #8]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	0018      	movs	r0, r3
 80033d6:	f7ff ff63 	bl	80032a0 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	2b02      	cmp	r3, #2
 80033e0:	d111      	bne.n	8003406 <LL_GPIO_Init+0x8e>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	2bff      	cmp	r3, #255	; 0xff
 80033e6:	d807      	bhi.n	80033f8 <LL_GPIO_Init+0x80>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	695a      	ldr	r2, [r3, #20]
 80033ec:	68b9      	ldr	r1, [r7, #8]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	0018      	movs	r0, r3
 80033f2:	f7ff ff71 	bl	80032d8 <LL_GPIO_SetAFPin_0_7>
 80033f6:	e006      	b.n	8003406 <LL_GPIO_Init+0x8e>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	695a      	ldr	r2, [r3, #20]
 80033fc:	68b9      	ldr	r1, [r7, #8]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	0018      	movs	r0, r3
 8003402:	f7ff ff8c 	bl	800331e <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	685a      	ldr	r2, [r3, #4]
 800340a:	68b9      	ldr	r1, [r7, #8]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	0018      	movs	r0, r3
 8003410:	f7ff fef9 	bl	8003206 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	3301      	adds	r3, #1
 8003418:	60fb      	str	r3, [r7, #12]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	681a      	ldr	r2, [r3, #0]
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	40da      	lsrs	r2, r3
 8003422:	1e13      	subs	r3, r2, #0
 8003424:	d1b0      	bne.n	8003388 <LL_GPIO_Init+0x10>
  }

  return (SUCCESS);
 8003426:	2300      	movs	r3, #0
}
 8003428:	0018      	movs	r0, r3
 800342a:	46bd      	mov	sp, r7
 800342c:	b004      	add	sp, #16
 800342e:	bd80      	pop	{r7, pc}

08003430 <LL_RCC_HSI_IsReady>:
{
 8003430:	b580      	push	{r7, lr}
 8003432:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8003434:	4b05      	ldr	r3, [pc, #20]	; (800344c <LL_RCC_HSI_IsReady+0x1c>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	2202      	movs	r2, #2
 800343a:	4013      	ands	r3, r2
 800343c:	3b02      	subs	r3, #2
 800343e:	425a      	negs	r2, r3
 8003440:	4153      	adcs	r3, r2
 8003442:	b2db      	uxtb	r3, r3
}
 8003444:	0018      	movs	r0, r3
 8003446:	46bd      	mov	sp, r7
 8003448:	bd80      	pop	{r7, pc}
 800344a:	46c0      	nop			; (mov r8, r8)
 800344c:	40021000 	.word	0x40021000

08003450 <LL_RCC_LSE_IsReady>:
{
 8003450:	b580      	push	{r7, lr}
 8003452:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY));
 8003454:	4b05      	ldr	r3, [pc, #20]	; (800346c <LL_RCC_LSE_IsReady+0x1c>)
 8003456:	6a1b      	ldr	r3, [r3, #32]
 8003458:	2202      	movs	r2, #2
 800345a:	4013      	ands	r3, r2
 800345c:	3b02      	subs	r3, #2
 800345e:	425a      	negs	r2, r3
 8003460:	4153      	adcs	r3, r2
 8003462:	b2db      	uxtb	r3, r3
}
 8003464:	0018      	movs	r0, r3
 8003466:	46bd      	mov	sp, r7
 8003468:	bd80      	pop	{r7, pc}
 800346a:	46c0      	nop			; (mov r8, r8)
 800346c:	40021000 	.word	0x40021000

08003470 <LL_RCC_GetSysClkSource>:
{
 8003470:	b580      	push	{r7, lr}
 8003472:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003474:	4b03      	ldr	r3, [pc, #12]	; (8003484 <LL_RCC_GetSysClkSource+0x14>)
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	220c      	movs	r2, #12
 800347a:	4013      	ands	r3, r2
}
 800347c:	0018      	movs	r0, r3
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}
 8003482:	46c0      	nop			; (mov r8, r8)
 8003484:	40021000 	.word	0x40021000

08003488 <LL_RCC_GetAHBPrescaler>:
{
 8003488:	b580      	push	{r7, lr}
 800348a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800348c:	4b03      	ldr	r3, [pc, #12]	; (800349c <LL_RCC_GetAHBPrescaler+0x14>)
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	22f0      	movs	r2, #240	; 0xf0
 8003492:	4013      	ands	r3, r2
}
 8003494:	0018      	movs	r0, r3
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}
 800349a:	46c0      	nop			; (mov r8, r8)
 800349c:	40021000 	.word	0x40021000

080034a0 <LL_RCC_GetAPB1Prescaler>:
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80034a4:	4b03      	ldr	r3, [pc, #12]	; (80034b4 <LL_RCC_GetAPB1Prescaler+0x14>)
 80034a6:	685a      	ldr	r2, [r3, #4]
 80034a8:	23e0      	movs	r3, #224	; 0xe0
 80034aa:	00db      	lsls	r3, r3, #3
 80034ac:	4013      	ands	r3, r2
}
 80034ae:	0018      	movs	r0, r3
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bd80      	pop	{r7, pc}
 80034b4:	40021000 	.word	0x40021000

080034b8 <LL_RCC_GetUSARTClockSource>:
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b082      	sub	sp, #8
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR3, (RCC_CFGR3_USART1SW << USARTx)) | (USARTx << 24U));
 80034c0:	4b06      	ldr	r3, [pc, #24]	; (80034dc <LL_RCC_GetUSARTClockSource+0x24>)
 80034c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034c4:	2103      	movs	r1, #3
 80034c6:	687a      	ldr	r2, [r7, #4]
 80034c8:	4091      	lsls	r1, r2
 80034ca:	000a      	movs	r2, r1
 80034cc:	401a      	ands	r2, r3
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	061b      	lsls	r3, r3, #24
 80034d2:	4313      	orrs	r3, r2
}
 80034d4:	0018      	movs	r0, r3
 80034d6:	46bd      	mov	sp, r7
 80034d8:	b002      	add	sp, #8
 80034da:	bd80      	pop	{r7, pc}
 80034dc:	40021000 	.word	0x40021000

080034e0 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI48 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 80034e4:	4b03      	ldr	r3, [pc, #12]	; (80034f4 <LL_RCC_PLL_GetMainSource+0x14>)
 80034e6:	685a      	ldr	r2, [r3, #4]
 80034e8:	2380      	movs	r3, #128	; 0x80
 80034ea:	025b      	lsls	r3, r3, #9
 80034ec:	4013      	ands	r3, r2
}
 80034ee:	0018      	movs	r0, r3
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bd80      	pop	{r7, pc}
 80034f4:	40021000 	.word	0x40021000

080034f8 <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_14
  *         @arg @ref LL_RCC_PLL_MUL_15
  *         @arg @ref LL_RCC_PLL_MUL_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMUL));
 80034fc:	4b03      	ldr	r3, [pc, #12]	; (800350c <LL_RCC_PLL_GetMultiplicator+0x14>)
 80034fe:	685a      	ldr	r2, [r3, #4]
 8003500:	23f0      	movs	r3, #240	; 0xf0
 8003502:	039b      	lsls	r3, r3, #14
 8003504:	4013      	ands	r3, r2
}
 8003506:	0018      	movs	r0, r3
 8003508:	46bd      	mov	sp, r7
 800350a:	bd80      	pop	{r7, pc}
 800350c:	40021000 	.word	0x40021000

08003510 <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_14
  *         @arg @ref LL_RCC_PREDIV_DIV_15
  *         @arg @ref LL_RCC_PREDIV_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV));
 8003514:	4b03      	ldr	r3, [pc, #12]	; (8003524 <LL_RCC_PLL_GetPrediv+0x14>)
 8003516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003518:	220f      	movs	r2, #15
 800351a:	4013      	ands	r3, r2
}
 800351c:	0018      	movs	r0, r3
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}
 8003522:	46c0      	nop			; (mov r8, r8)
 8003524:	40021000 	.word	0x40021000

08003528 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b082      	sub	sp, #8
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8003530:	f000 f85c 	bl	80035ec <RCC_GetSystemClockFreq>
 8003534:	0002      	movs	r2, r0
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	0018      	movs	r0, r3
 8003540:	f000 f87a 	bl	8003638 <RCC_GetHCLKClockFreq>
 8003544:	0002      	movs	r2, r0
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	0018      	movs	r0, r3
 8003550:	f000 f888 	bl	8003664 <RCC_GetPCLK1ClockFreq>
 8003554:	0002      	movs	r2, r0
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	609a      	str	r2, [r3, #8]
}
 800355a:	46c0      	nop			; (mov r8, r8)
 800355c:	46bd      	mov	sp, r7
 800355e:	b002      	add	sp, #8
 8003560:	bd80      	pop	{r7, pc}
	...

08003564 <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         @arg @ref LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b084      	sub	sp, #16
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 800356c:	2300      	movs	r3, #0
 800356e:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));
#if defined(RCC_CFGR3_USART1SW)
  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d12d      	bne.n	80035d2 <LL_RCC_GetUSARTClockFreq+0x6e>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	0018      	movs	r0, r3
 800357a:	f7ff ff9d 	bl	80034b8 <LL_RCC_GetUSARTClockSource>
 800357e:	0003      	movs	r3, r0
 8003580:	2b03      	cmp	r3, #3
 8003582:	d00a      	beq.n	800359a <LL_RCC_GetUSARTClockFreq+0x36>
 8003584:	d818      	bhi.n	80035b8 <LL_RCC_GetUSARTClockFreq+0x54>
 8003586:	2b01      	cmp	r3, #1
 8003588:	d002      	beq.n	8003590 <LL_RCC_GetUSARTClockFreq+0x2c>
 800358a:	2b02      	cmp	r3, #2
 800358c:	d00c      	beq.n	80035a8 <LL_RCC_GetUSARTClockFreq+0x44>
 800358e:	e013      	b.n	80035b8 <LL_RCC_GetUSARTClockFreq+0x54>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8003590:	f000 f82c 	bl	80035ec <RCC_GetSystemClockFreq>
 8003594:	0003      	movs	r3, r0
 8003596:	60fb      	str	r3, [r7, #12]
        break;
 8003598:	e020      	b.n	80035dc <LL_RCC_GetUSARTClockFreq+0x78>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 800359a:	f7ff ff49 	bl	8003430 <LL_RCC_HSI_IsReady>
 800359e:	1e03      	subs	r3, r0, #0
 80035a0:	d019      	beq.n	80035d6 <LL_RCC_GetUSARTClockFreq+0x72>
        {
          usart_frequency = HSI_VALUE;
 80035a2:	4b11      	ldr	r3, [pc, #68]	; (80035e8 <LL_RCC_GetUSARTClockFreq+0x84>)
 80035a4:	60fb      	str	r3, [r7, #12]
        }
        break;
 80035a6:	e016      	b.n	80035d6 <LL_RCC_GetUSARTClockFreq+0x72>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 80035a8:	f7ff ff52 	bl	8003450 <LL_RCC_LSE_IsReady>
 80035ac:	1e03      	subs	r3, r0, #0
 80035ae:	d014      	beq.n	80035da <LL_RCC_GetUSARTClockFreq+0x76>
        {
          usart_frequency = LSE_VALUE;
 80035b0:	2380      	movs	r3, #128	; 0x80
 80035b2:	021b      	lsls	r3, r3, #8
 80035b4:	60fb      	str	r3, [r7, #12]
        }
        break;
 80035b6:	e010      	b.n	80035da <LL_RCC_GetUSARTClockFreq+0x76>

      case LL_RCC_USART1_CLKSOURCE_PCLK1:  /* USART1 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80035b8:	f000 f818 	bl	80035ec <RCC_GetSystemClockFreq>
 80035bc:	0003      	movs	r3, r0
 80035be:	0018      	movs	r0, r3
 80035c0:	f000 f83a 	bl	8003638 <RCC_GetHCLKClockFreq>
 80035c4:	0003      	movs	r3, r0
 80035c6:	0018      	movs	r0, r3
 80035c8:	f000 f84c 	bl	8003664 <RCC_GetPCLK1ClockFreq>
 80035cc:	0003      	movs	r3, r0
 80035ce:	60fb      	str	r3, [r7, #12]
        break;
 80035d0:	e004      	b.n	80035dc <LL_RCC_GetUSARTClockFreq+0x78>
    }
  }
 80035d2:	46c0      	nop			; (mov r8, r8)
 80035d4:	e002      	b.n	80035dc <LL_RCC_GetUSARTClockFreq+0x78>
        break;
 80035d6:	46c0      	nop			; (mov r8, r8)
 80035d8:	e000      	b.n	80035dc <LL_RCC_GetUSARTClockFreq+0x78>
        break;
 80035da:	46c0      	nop			; (mov r8, r8)
        break;
    }
  }

#endif /* RCC_CFGR3_USART3SW */
  return usart_frequency;
 80035dc:	68fb      	ldr	r3, [r7, #12]
}
 80035de:	0018      	movs	r0, r3
 80035e0:	46bd      	mov	sp, r7
 80035e2:	b004      	add	sp, #16
 80035e4:	bd80      	pop	{r7, pc}
 80035e6:	46c0      	nop			; (mov r8, r8)
 80035e8:	007a1200 	.word	0x007a1200

080035ec <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b082      	sub	sp, #8
 80035f0:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 80035f2:	2300      	movs	r3, #0
 80035f4:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 80035f6:	f7ff ff3b 	bl	8003470 <LL_RCC_GetSysClkSource>
 80035fa:	0003      	movs	r3, r0
 80035fc:	2b08      	cmp	r3, #8
 80035fe:	d00b      	beq.n	8003618 <RCC_GetSystemClockFreq+0x2c>
 8003600:	d80f      	bhi.n	8003622 <RCC_GetSystemClockFreq+0x36>
 8003602:	2b00      	cmp	r3, #0
 8003604:	d002      	beq.n	800360c <RCC_GetSystemClockFreq+0x20>
 8003606:	2b04      	cmp	r3, #4
 8003608:	d003      	beq.n	8003612 <RCC_GetSystemClockFreq+0x26>
 800360a:	e00a      	b.n	8003622 <RCC_GetSystemClockFreq+0x36>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 800360c:	4b09      	ldr	r3, [pc, #36]	; (8003634 <RCC_GetSystemClockFreq+0x48>)
 800360e:	607b      	str	r3, [r7, #4]
      break;
 8003610:	e00a      	b.n	8003628 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8003612:	4b08      	ldr	r3, [pc, #32]	; (8003634 <RCC_GetSystemClockFreq+0x48>)
 8003614:	607b      	str	r3, [r7, #4]
      break;
 8003616:	e007      	b.n	8003628 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8003618:	f000 f838 	bl	800368c <RCC_PLL_GetFreqDomain_SYS>
 800361c:	0003      	movs	r3, r0
 800361e:	607b      	str	r3, [r7, #4]
      break;
 8003620:	e002      	b.n	8003628 <RCC_GetSystemClockFreq+0x3c>
      frequency = HSI48_VALUE;
      break;
#endif /* RCC_HSI48_SUPPORT */

    default:
      frequency = HSI_VALUE;
 8003622:	4b04      	ldr	r3, [pc, #16]	; (8003634 <RCC_GetSystemClockFreq+0x48>)
 8003624:	607b      	str	r3, [r7, #4]
      break;
 8003626:	46c0      	nop			; (mov r8, r8)
  }

  return frequency;
 8003628:	687b      	ldr	r3, [r7, #4]
}
 800362a:	0018      	movs	r0, r3
 800362c:	46bd      	mov	sp, r7
 800362e:	b002      	add	sp, #8
 8003630:	bd80      	pop	{r7, pc}
 8003632:	46c0      	nop			; (mov r8, r8)
 8003634:	007a1200 	.word	0x007a1200

08003638 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b082      	sub	sp, #8
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8003640:	f7ff ff22 	bl	8003488 <LL_RCC_GetAHBPrescaler>
 8003644:	0003      	movs	r3, r0
 8003646:	091b      	lsrs	r3, r3, #4
 8003648:	220f      	movs	r2, #15
 800364a:	4013      	ands	r3, r2
 800364c:	4a04      	ldr	r2, [pc, #16]	; (8003660 <RCC_GetHCLKClockFreq+0x28>)
 800364e:	5cd3      	ldrb	r3, [r2, r3]
 8003650:	001a      	movs	r2, r3
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	40d3      	lsrs	r3, r2
}
 8003656:	0018      	movs	r0, r3
 8003658:	46bd      	mov	sp, r7
 800365a:	b002      	add	sp, #8
 800365c:	bd80      	pop	{r7, pc}
 800365e:	46c0      	nop			; (mov r8, r8)
 8003660:	08003b80 	.word	0x08003b80

08003664 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b082      	sub	sp, #8
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 800366c:	f7ff ff18 	bl	80034a0 <LL_RCC_GetAPB1Prescaler>
 8003670:	0003      	movs	r3, r0
 8003672:	0a1b      	lsrs	r3, r3, #8
 8003674:	4a04      	ldr	r2, [pc, #16]	; (8003688 <RCC_GetPCLK1ClockFreq+0x24>)
 8003676:	5cd3      	ldrb	r3, [r2, r3]
 8003678:	001a      	movs	r2, r3
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	40d3      	lsrs	r3, r2
}
 800367e:	0018      	movs	r0, r3
 8003680:	46bd      	mov	sp, r7
 8003682:	b002      	add	sp, #8
 8003684:	bd80      	pop	{r7, pc}
 8003686:	46c0      	nop			; (mov r8, r8)
 8003688:	08003b90 	.word	0x08003b90

0800368c <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 800368c:	b590      	push	{r4, r7, lr}
 800368e:	b083      	sub	sp, #12
 8003690:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 8003692:	2300      	movs	r3, #0
 8003694:	607b      	str	r3, [r7, #4]
 8003696:	2300      	movs	r3, #0
 8003698:	603b      	str	r3, [r7, #0]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL divider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 800369a:	f7ff ff21 	bl	80034e0 <LL_RCC_PLL_GetMainSource>
 800369e:	0003      	movs	r3, r0
 80036a0:	603b      	str	r3, [r7, #0]

  switch (pllsource)
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d005      	beq.n	80036b4 <RCC_PLL_GetFreqDomain_SYS+0x28>
 80036a8:	683a      	ldr	r2, [r7, #0]
 80036aa:	2380      	movs	r3, #128	; 0x80
 80036ac:	025b      	lsls	r3, r3, #9
 80036ae:	429a      	cmp	r2, r3
 80036b0:	d003      	beq.n	80036ba <RCC_PLL_GetFreqDomain_SYS+0x2e>
 80036b2:	e005      	b.n	80036c0 <RCC_PLL_GetFreqDomain_SYS+0x34>
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
    case LL_RCC_PLLSOURCE_HSI:       /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
#else
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
 80036b4:	4b0f      	ldr	r3, [pc, #60]	; (80036f4 <RCC_PLL_GetFreqDomain_SYS+0x68>)
 80036b6:	607b      	str	r3, [r7, #4]
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 80036b8:	e005      	b.n	80036c6 <RCC_PLL_GetFreqDomain_SYS+0x3a>
      pllinputfreq = HSI48_VALUE;
      break;
#endif /* RCC_HSI48_SUPPORT */

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 80036ba:	4b0f      	ldr	r3, [pc, #60]	; (80036f8 <RCC_PLL_GetFreqDomain_SYS+0x6c>)
 80036bc:	607b      	str	r3, [r7, #4]
      break;
 80036be:	e002      	b.n	80036c6 <RCC_PLL_GetFreqDomain_SYS+0x3a>

    default:
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
      pllinputfreq = HSI_VALUE;
#else
      pllinputfreq = HSI_VALUE / 2U;
 80036c0:	4b0c      	ldr	r3, [pc, #48]	; (80036f4 <RCC_PLL_GetFreqDomain_SYS+0x68>)
 80036c2:	607b      	str	r3, [r7, #4]
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 80036c4:	46c0      	nop			; (mov r8, r8)
  }
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator(), LL_RCC_PLL_GetPrediv());
#else
  return __LL_RCC_CALC_PLLCLK_FREQ((pllinputfreq / (LL_RCC_PLL_GetPrediv() + 1U)), LL_RCC_PLL_GetMultiplicator());
 80036c6:	f7ff ff23 	bl	8003510 <LL_RCC_PLL_GetPrediv>
 80036ca:	0003      	movs	r3, r0
 80036cc:	3301      	adds	r3, #1
 80036ce:	0019      	movs	r1, r3
 80036d0:	6878      	ldr	r0, [r7, #4]
 80036d2:	f7fc fd19 	bl	8000108 <__udivsi3>
 80036d6:	0003      	movs	r3, r0
 80036d8:	001c      	movs	r4, r3
 80036da:	f7ff ff0d 	bl	80034f8 <LL_RCC_PLL_GetMultiplicator>
 80036de:	0003      	movs	r3, r0
 80036e0:	0c9b      	lsrs	r3, r3, #18
 80036e2:	220f      	movs	r2, #15
 80036e4:	4013      	ands	r3, r2
 80036e6:	3302      	adds	r3, #2
 80036e8:	4363      	muls	r3, r4
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
}
 80036ea:	0018      	movs	r0, r3
 80036ec:	46bd      	mov	sp, r7
 80036ee:	b003      	add	sp, #12
 80036f0:	bd90      	pop	{r4, r7, pc}
 80036f2:	46c0      	nop			; (mov r8, r8)
 80036f4:	003d0900 	.word	0x003d0900
 80036f8:	007a1200 	.word	0x007a1200

080036fc <LL_TIM_SetPrescaler>:
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b082      	sub	sp, #8
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
 8003704:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	683a      	ldr	r2, [r7, #0]
 800370a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800370c:	46c0      	nop			; (mov r8, r8)
 800370e:	46bd      	mov	sp, r7
 8003710:	b002      	add	sp, #8
 8003712:	bd80      	pop	{r7, pc}

08003714 <LL_TIM_SetAutoReload>:
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b082      	sub	sp, #8
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
 800371c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	683a      	ldr	r2, [r7, #0]
 8003722:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8003724:	46c0      	nop			; (mov r8, r8)
 8003726:	46bd      	mov	sp, r7
 8003728:	b002      	add	sp, #8
 800372a:	bd80      	pop	{r7, pc}

0800372c <LL_TIM_SetRepetitionCounter>:
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b082      	sub	sp, #8
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
 8003734:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	683a      	ldr	r2, [r7, #0]
 800373a:	631a      	str	r2, [r3, #48]	; 0x30
}
 800373c:	46c0      	nop			; (mov r8, r8)
 800373e:	46bd      	mov	sp, r7
 8003740:	b002      	add	sp, #8
 8003742:	bd80      	pop	{r7, pc}

08003744 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b082      	sub	sp, #8
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	695b      	ldr	r3, [r3, #20]
 8003750:	2201      	movs	r2, #1
 8003752:	431a      	orrs	r2, r3
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	615a      	str	r2, [r3, #20]
}
 8003758:	46c0      	nop			; (mov r8, r8)
 800375a:	46bd      	mov	sp, r7
 800375c:	b002      	add	sp, #8
 800375e:	bd80      	pop	{r7, pc}

08003760 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b084      	sub	sp, #16
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
 8003768:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	4a30      	ldr	r2, [pc, #192]	; (8003834 <LL_TIM_Init+0xd4>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d003      	beq.n	8003780 <LL_TIM_Init+0x20>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	4a2f      	ldr	r2, [pc, #188]	; (8003838 <LL_TIM_Init+0xd8>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d107      	bne.n	8003790 <LL_TIM_Init+0x30>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	2270      	movs	r2, #112	; 0x70
 8003784:	4393      	bics	r3, r2
 8003786:	001a      	movs	r2, r3
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	4313      	orrs	r3, r2
 800378e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	4a28      	ldr	r2, [pc, #160]	; (8003834 <LL_TIM_Init+0xd4>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d013      	beq.n	80037c0 <LL_TIM_Init+0x60>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	4a27      	ldr	r2, [pc, #156]	; (8003838 <LL_TIM_Init+0xd8>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d00f      	beq.n	80037c0 <LL_TIM_Init+0x60>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	4a26      	ldr	r2, [pc, #152]	; (800383c <LL_TIM_Init+0xdc>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d00b      	beq.n	80037c0 <LL_TIM_Init+0x60>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	4a25      	ldr	r2, [pc, #148]	; (8003840 <LL_TIM_Init+0xe0>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d007      	beq.n	80037c0 <LL_TIM_Init+0x60>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	4a24      	ldr	r2, [pc, #144]	; (8003844 <LL_TIM_Init+0xe4>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d003      	beq.n	80037c0 <LL_TIM_Init+0x60>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	4a23      	ldr	r2, [pc, #140]	; (8003848 <LL_TIM_Init+0xe8>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d106      	bne.n	80037ce <LL_TIM_Init+0x6e>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	4a22      	ldr	r2, [pc, #136]	; (800384c <LL_TIM_Init+0xec>)
 80037c4:	401a      	ands	r2, r3
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	68db      	ldr	r3, [r3, #12]
 80037ca:	4313      	orrs	r3, r2
 80037cc:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	68fa      	ldr	r2, [r7, #12]
 80037d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	689a      	ldr	r2, [r3, #8]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	0011      	movs	r1, r2
 80037dc:	0018      	movs	r0, r3
 80037de:	f7ff ff99 	bl	8003714 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	881b      	ldrh	r3, [r3, #0]
 80037e6:	001a      	movs	r2, r3
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	0011      	movs	r1, r2
 80037ec:	0018      	movs	r0, r3
 80037ee:	f7ff ff85 	bl	80036fc <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	4a0f      	ldr	r2, [pc, #60]	; (8003834 <LL_TIM_Init+0xd4>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d00b      	beq.n	8003812 <LL_TIM_Init+0xb2>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	4a10      	ldr	r2, [pc, #64]	; (8003840 <LL_TIM_Init+0xe0>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d007      	beq.n	8003812 <LL_TIM_Init+0xb2>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	4a0f      	ldr	r2, [pc, #60]	; (8003844 <LL_TIM_Init+0xe4>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d003      	beq.n	8003812 <LL_TIM_Init+0xb2>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	4a0e      	ldr	r2, [pc, #56]	; (8003848 <LL_TIM_Init+0xe8>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d106      	bne.n	8003820 <LL_TIM_Init+0xc0>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	691a      	ldr	r2, [r3, #16]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	0011      	movs	r1, r2
 800381a:	0018      	movs	r0, r3
 800381c:	f7ff ff86 	bl	800372c <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	0018      	movs	r0, r3
 8003824:	f7ff ff8e 	bl	8003744 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8003828:	2300      	movs	r3, #0
}
 800382a:	0018      	movs	r0, r3
 800382c:	46bd      	mov	sp, r7
 800382e:	b004      	add	sp, #16
 8003830:	bd80      	pop	{r7, pc}
 8003832:	46c0      	nop			; (mov r8, r8)
 8003834:	40012c00 	.word	0x40012c00
 8003838:	40000400 	.word	0x40000400
 800383c:	40002000 	.word	0x40002000
 8003840:	40014000 	.word	0x40014000
 8003844:	40014400 	.word	0x40014400
 8003848:	40014800 	.word	0x40014800
 800384c:	fffffcff 	.word	0xfffffcff

08003850 <LL_USART_IsEnabled>:
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b082      	sub	sp, #8
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	2201      	movs	r2, #1
 800385e:	4013      	ands	r3, r2
 8003860:	2b01      	cmp	r3, #1
 8003862:	d101      	bne.n	8003868 <LL_USART_IsEnabled+0x18>
 8003864:	2301      	movs	r3, #1
 8003866:	e000      	b.n	800386a <LL_USART_IsEnabled+0x1a>
 8003868:	2300      	movs	r3, #0
}
 800386a:	0018      	movs	r0, r3
 800386c:	46bd      	mov	sp, r7
 800386e:	b002      	add	sp, #8
 8003870:	bd80      	pop	{r7, pc}
	...

08003874 <LL_USART_SetStopBitsLength>:
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b082      	sub	sp, #8
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
 800387c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	4a05      	ldr	r2, [pc, #20]	; (8003898 <LL_USART_SetStopBitsLength+0x24>)
 8003884:	401a      	ands	r2, r3
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	431a      	orrs	r2, r3
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	605a      	str	r2, [r3, #4]
}
 800388e:	46c0      	nop			; (mov r8, r8)
 8003890:	46bd      	mov	sp, r7
 8003892:	b002      	add	sp, #8
 8003894:	bd80      	pop	{r7, pc}
 8003896:	46c0      	nop			; (mov r8, r8)
 8003898:	ffffcfff 	.word	0xffffcfff

0800389c <LL_USART_SetHWFlowCtrl>:
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b082      	sub	sp, #8
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
 80038a4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	689b      	ldr	r3, [r3, #8]
 80038aa:	4a05      	ldr	r2, [pc, #20]	; (80038c0 <LL_USART_SetHWFlowCtrl+0x24>)
 80038ac:	401a      	ands	r2, r3
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	431a      	orrs	r2, r3
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	609a      	str	r2, [r3, #8]
}
 80038b6:	46c0      	nop			; (mov r8, r8)
 80038b8:	46bd      	mov	sp, r7
 80038ba:	b002      	add	sp, #8
 80038bc:	bd80      	pop	{r7, pc}
 80038be:	46c0      	nop			; (mov r8, r8)
 80038c0:	fffffcff 	.word	0xfffffcff

080038c4 <LL_USART_SetBaudRate>:
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b086      	sub	sp, #24
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	60f8      	str	r0, [r7, #12]
 80038cc:	60b9      	str	r1, [r7, #8]
 80038ce:	607a      	str	r2, [r7, #4]
 80038d0:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 80038d2:	687a      	ldr	r2, [r7, #4]
 80038d4:	2380      	movs	r3, #128	; 0x80
 80038d6:	021b      	lsls	r3, r3, #8
 80038d8:	429a      	cmp	r2, r3
 80038da:	d11c      	bne.n	8003916 <LL_USART_SetBaudRate+0x52>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 80038dc:	68bb      	ldr	r3, [r7, #8]
 80038de:	005a      	lsls	r2, r3, #1
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	085b      	lsrs	r3, r3, #1
 80038e4:	18d3      	adds	r3, r2, r3
 80038e6:	6839      	ldr	r1, [r7, #0]
 80038e8:	0018      	movs	r0, r3
 80038ea:	f7fc fc0d 	bl	8000108 <__udivsi3>
 80038ee:	0003      	movs	r3, r0
 80038f0:	b29b      	uxth	r3, r3
 80038f2:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	4a10      	ldr	r2, [pc, #64]	; (8003938 <LL_USART_SetBaudRate+0x74>)
 80038f8:	4013      	ands	r3, r2
 80038fa:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80038fc:	697b      	ldr	r3, [r7, #20]
 80038fe:	085b      	lsrs	r3, r3, #1
 8003900:	b29b      	uxth	r3, r3
 8003902:	001a      	movs	r2, r3
 8003904:	2307      	movs	r3, #7
 8003906:	4013      	ands	r3, r2
 8003908:	693a      	ldr	r2, [r7, #16]
 800390a:	4313      	orrs	r3, r2
 800390c:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	693a      	ldr	r2, [r7, #16]
 8003912:	60da      	str	r2, [r3, #12]
}
 8003914:	e00c      	b.n	8003930 <LL_USART_SetBaudRate+0x6c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	085a      	lsrs	r2, r3, #1
 800391a:	68bb      	ldr	r3, [r7, #8]
 800391c:	18d3      	adds	r3, r2, r3
 800391e:	6839      	ldr	r1, [r7, #0]
 8003920:	0018      	movs	r0, r3
 8003922:	f7fc fbf1 	bl	8000108 <__udivsi3>
 8003926:	0003      	movs	r3, r0
 8003928:	b29b      	uxth	r3, r3
 800392a:	001a      	movs	r2, r3
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	60da      	str	r2, [r3, #12]
}
 8003930:	46c0      	nop			; (mov r8, r8)
 8003932:	46bd      	mov	sp, r7
 8003934:	b006      	add	sp, #24
 8003936:	bd80      	pop	{r7, pc}
 8003938:	0000fff0 	.word	0x0000fff0

0800393c <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 800393c:	b590      	push	{r4, r7, lr}
 800393e:	b089      	sub	sp, #36	; 0x24
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
 8003944:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8003946:	231f      	movs	r3, #31
 8003948:	18fb      	adds	r3, r7, r3
 800394a:	2201      	movs	r2, #1
 800394c:	701a      	strb	r2, [r3, #0]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 800394e:	2300      	movs	r3, #0
 8003950:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	0018      	movs	r0, r3
 8003956:	f7ff ff7b 	bl	8003850 <LL_USART_IsEnabled>
 800395a:	1e03      	subs	r3, r0, #0
 800395c:	d148      	bne.n	80039f0 <LL_USART_Init+0xb4>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a27      	ldr	r2, [pc, #156]	; (8003a00 <LL_USART_Init+0xc4>)
 8003964:	401a      	ands	r2, r3
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	6859      	ldr	r1, [r3, #4]
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	68db      	ldr	r3, [r3, #12]
 800396e:	4319      	orrs	r1, r3
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	691b      	ldr	r3, [r3, #16]
 8003974:	4319      	orrs	r1, r3
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	699b      	ldr	r3, [r3, #24]
 800397a:	430b      	orrs	r3, r1
 800397c:	431a      	orrs	r2, r3
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	689a      	ldr	r2, [r3, #8]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	0011      	movs	r1, r2
 800398a:	0018      	movs	r0, r3
 800398c:	f7ff ff72 	bl	8003874 <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	695a      	ldr	r2, [r3, #20]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	0011      	movs	r1, r2
 8003998:	0018      	movs	r0, r3
 800399a:	f7ff ff7f 	bl	800389c <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	4a18      	ldr	r2, [pc, #96]	; (8003a04 <LL_USART_Init+0xc8>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d105      	bne.n	80039b2 <LL_USART_Init+0x76>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 80039a6:	2000      	movs	r0, #0
 80039a8:	f7ff fddc 	bl	8003564 <LL_RCC_GetUSARTClockFreq>
 80039ac:	0003      	movs	r3, r0
 80039ae:	61bb      	str	r3, [r7, #24]
 80039b0:	e00b      	b.n	80039ca <LL_USART_Init+0x8e>
    }
#if defined(USART2)
    else if (USARTx == USART2)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	4a14      	ldr	r2, [pc, #80]	; (8003a08 <LL_USART_Init+0xcc>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d107      	bne.n	80039ca <LL_USART_Init+0x8e>
    {
#if defined(RCC_CFGR3_USART2SW)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
#else
      /* USART2 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 80039ba:	240c      	movs	r4, #12
 80039bc:	193b      	adds	r3, r7, r4
 80039be:	0018      	movs	r0, r3
 80039c0:	f7ff fdb2 	bl	8003528 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 80039c4:	193b      	adds	r3, r7, r4
 80039c6:	689b      	ldr	r3, [r3, #8]
 80039c8:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 80039ca:	69bb      	ldr	r3, [r7, #24]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d00f      	beq.n	80039f0 <LL_USART_Init+0xb4>
        && (USART_InitStruct->BaudRate != 0U))
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d00b      	beq.n	80039f0 <LL_USART_Init+0xb4>
    {
      status = SUCCESS;
 80039d8:	231f      	movs	r3, #31
 80039da:	18fb      	adds	r3, r7, r3
 80039dc:	2200      	movs	r2, #0
 80039de:	701a      	strb	r2, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	699a      	ldr	r2, [r3, #24]
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	69b9      	ldr	r1, [r7, #24]
 80039ea:	6878      	ldr	r0, [r7, #4]
 80039ec:	f7ff ff6a 	bl	80038c4 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MAX(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 80039f0:	231f      	movs	r3, #31
 80039f2:	18fb      	adds	r3, r7, r3
 80039f4:	781b      	ldrb	r3, [r3, #0]
}
 80039f6:	0018      	movs	r0, r3
 80039f8:	46bd      	mov	sp, r7
 80039fa:	b009      	add	sp, #36	; 0x24
 80039fc:	bd90      	pop	{r4, r7, pc}
 80039fe:	46c0      	nop			; (mov r8, r8)
 8003a00:	ffff69f3 	.word	0xffff69f3
 8003a04:	40013800 	.word	0x40013800
 8003a08:	40004400 	.word	0x40004400

08003a0c <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b082      	sub	sp, #8
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
 8003a14:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8003a16:	6839      	ldr	r1, [r7, #0]
 8003a18:	6878      	ldr	r0, [r7, #4]
 8003a1a:	f7fc fb75 	bl	8000108 <__udivsi3>
 8003a1e:	0003      	movs	r3, r0
 8003a20:	001a      	movs	r2, r3
 8003a22:	4b06      	ldr	r3, [pc, #24]	; (8003a3c <LL_InitTick+0x30>)
 8003a24:	3a01      	subs	r2, #1
 8003a26:	605a      	str	r2, [r3, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8003a28:	4b04      	ldr	r3, [pc, #16]	; (8003a3c <LL_InitTick+0x30>)
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003a2e:	4b03      	ldr	r3, [pc, #12]	; (8003a3c <LL_InitTick+0x30>)
 8003a30:	2205      	movs	r2, #5
 8003a32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8003a34:	46c0      	nop			; (mov r8, r8)
 8003a36:	46bd      	mov	sp, r7
 8003a38:	b002      	add	sp, #8
 8003a3a:	bd80      	pop	{r7, pc}
 8003a3c:	e000e010 	.word	0xe000e010

08003a40 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b082      	sub	sp, #8
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8003a48:	23fa      	movs	r3, #250	; 0xfa
 8003a4a:	009a      	lsls	r2, r3, #2
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	0011      	movs	r1, r2
 8003a50:	0018      	movs	r0, r3
 8003a52:	f7ff ffdb 	bl	8003a0c <LL_InitTick>
}
 8003a56:	46c0      	nop			; (mov r8, r8)
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	b002      	add	sp, #8
 8003a5c:	bd80      	pop	{r7, pc}
	...

08003a60 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b084      	sub	sp, #16
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8003a68:	4b0d      	ldr	r3, [pc, #52]	; (8003aa0 <LL_mDelay+0x40>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8003a6e:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	3301      	adds	r3, #1
 8003a74:	d00c      	beq.n	8003a90 <LL_mDelay+0x30>
  {
    Delay++;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	3301      	adds	r3, #1
 8003a7a:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 8003a7c:	e008      	b.n	8003a90 <LL_mDelay+0x30>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8003a7e:	4b08      	ldr	r3, [pc, #32]	; (8003aa0 <LL_mDelay+0x40>)
 8003a80:	681a      	ldr	r2, [r3, #0]
 8003a82:	2380      	movs	r3, #128	; 0x80
 8003a84:	025b      	lsls	r3, r3, #9
 8003a86:	4013      	ands	r3, r2
 8003a88:	d002      	beq.n	8003a90 <LL_mDelay+0x30>
    {
      Delay--;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	3b01      	subs	r3, #1
 8003a8e:	607b      	str	r3, [r7, #4]
  while (Delay)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d1f3      	bne.n	8003a7e <LL_mDelay+0x1e>
    }
  }
}
 8003a96:	46c0      	nop			; (mov r8, r8)
 8003a98:	46c0      	nop			; (mov r8, r8)
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	b004      	add	sp, #16
 8003a9e:	bd80      	pop	{r7, pc}
 8003aa0:	e000e010 	.word	0xe000e010

08003aa4 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b082      	sub	sp, #8
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8003aac:	4b03      	ldr	r3, [pc, #12]	; (8003abc <LL_SetSystemCoreClock+0x18>)
 8003aae:	687a      	ldr	r2, [r7, #4]
 8003ab0:	601a      	str	r2, [r3, #0]
}
 8003ab2:	46c0      	nop			; (mov r8, r8)
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	b002      	add	sp, #8
 8003ab8:	bd80      	pop	{r7, pc}
 8003aba:	46c0      	nop			; (mov r8, r8)
 8003abc:	20000000 	.word	0x20000000

08003ac0 <__libc_init_array>:
 8003ac0:	b570      	push	{r4, r5, r6, lr}
 8003ac2:	2600      	movs	r6, #0
 8003ac4:	4d0c      	ldr	r5, [pc, #48]	; (8003af8 <__libc_init_array+0x38>)
 8003ac6:	4c0d      	ldr	r4, [pc, #52]	; (8003afc <__libc_init_array+0x3c>)
 8003ac8:	1b64      	subs	r4, r4, r5
 8003aca:	10a4      	asrs	r4, r4, #2
 8003acc:	42a6      	cmp	r6, r4
 8003ace:	d109      	bne.n	8003ae4 <__libc_init_array+0x24>
 8003ad0:	2600      	movs	r6, #0
 8003ad2:	f000 f821 	bl	8003b18 <_init>
 8003ad6:	4d0a      	ldr	r5, [pc, #40]	; (8003b00 <__libc_init_array+0x40>)
 8003ad8:	4c0a      	ldr	r4, [pc, #40]	; (8003b04 <__libc_init_array+0x44>)
 8003ada:	1b64      	subs	r4, r4, r5
 8003adc:	10a4      	asrs	r4, r4, #2
 8003ade:	42a6      	cmp	r6, r4
 8003ae0:	d105      	bne.n	8003aee <__libc_init_array+0x2e>
 8003ae2:	bd70      	pop	{r4, r5, r6, pc}
 8003ae4:	00b3      	lsls	r3, r6, #2
 8003ae6:	58eb      	ldr	r3, [r5, r3]
 8003ae8:	4798      	blx	r3
 8003aea:	3601      	adds	r6, #1
 8003aec:	e7ee      	b.n	8003acc <__libc_init_array+0xc>
 8003aee:	00b3      	lsls	r3, r6, #2
 8003af0:	58eb      	ldr	r3, [r5, r3]
 8003af2:	4798      	blx	r3
 8003af4:	3601      	adds	r6, #1
 8003af6:	e7f2      	b.n	8003ade <__libc_init_array+0x1e>
 8003af8:	08003b98 	.word	0x08003b98
 8003afc:	08003b98 	.word	0x08003b98
 8003b00:	08003b98 	.word	0x08003b98
 8003b04:	08003b9c 	.word	0x08003b9c

08003b08 <memset>:
 8003b08:	0003      	movs	r3, r0
 8003b0a:	1882      	adds	r2, r0, r2
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d100      	bne.n	8003b12 <memset+0xa>
 8003b10:	4770      	bx	lr
 8003b12:	7019      	strb	r1, [r3, #0]
 8003b14:	3301      	adds	r3, #1
 8003b16:	e7f9      	b.n	8003b0c <memset+0x4>

08003b18 <_init>:
 8003b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b1a:	46c0      	nop			; (mov r8, r8)
 8003b1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b1e:	bc08      	pop	{r3}
 8003b20:	469e      	mov	lr, r3
 8003b22:	4770      	bx	lr

08003b24 <_fini>:
 8003b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b26:	46c0      	nop			; (mov r8, r8)
 8003b28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b2a:	bc08      	pop	{r3}
 8003b2c:	469e      	mov	lr, r3
 8003b2e:	4770      	bx	lr
